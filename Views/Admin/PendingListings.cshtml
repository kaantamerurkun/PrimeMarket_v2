@model List<PrimeMarket.Models.Listing>
@{
    ViewData["Title"] = "Pending Listings";
    Layout = null;
    var userName = Context.Session.GetString("AdminUsername") ?? "Admin";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>@ViewData["Title"] - PrimeMarket Admin</title>
    <link rel="stylesheet" href="~/css/AdminDashboard.css" />
    <link rel="stylesheet" href="/css/notificationstyle.css" />
    <link rel="stylesheet" href="/css/messagenotifications.css" />
    <style>
        .listing-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .listing-card {
            background-color: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .listing-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }

        .listing-image {
            height: 200px;
            overflow: hidden;
        }

            .listing-image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .listing-details {
            padding: 15px;
        }

        .listing-title {
            margin: 0 0 10px 0;
            font-size: 18px;
            font-weight: bold;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .listing-price {
            color: #0066cc;
            font-weight: bold;
            font-size: 18px;
            margin-bottom: 5px;
        }

        .listing-seller, .listing-category, .listing-date {
            color: #666;
            font-size: 14px;
            margin-bottom: 5px;
        }

        .seller-name {
            color: #0066cc;
            cursor: pointer;
            text-decoration: underline;
        }

            .seller-name:hover {
                text-decoration: underline;
            }

        .listing-action {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        .btn-view, .btn-approve, .btn-reject {
            flex: 1;
            padding: 8px 0;
            background-color: #0066cc;
            color: white;
            border: none;
            border-radius: 5px;
            text-align: center;
            text-decoration: none;
            cursor: pointer;
        }

        .btn-approve {
            background-color: #28a745;
        }

        .btn-reject {
            background-color: #dc3545;
        }

        .btn-view:hover {
            background-color: #0055b3;
        }

        .btn-approve:hover {
            background-color: #218838;
        }

        .btn-reject:hover {
            background-color: #c82333;
        }

        .empty-state {
            text-align: center;
            padding: 50px;
            background-color: #f8f9fa;
            border-radius: 10px;
            margin-top: 20px;
        }

            .empty-state i {
                font-size: 50px;
                color: #ddd;
                margin-bottom: 20px;
            }

            .empty-state p {
                color: #666;
                font-size: 18px;
            }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .count-badge {
            background-color: #0066cc;
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 14px;
        }

        .alert {
            padding: 12px 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
        }

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 10px;
            width: 90%;
            max-width: 500px;
            position: relative;
        }

        .close {
            position: absolute;
            top: 10px;
            right: 15px;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
        }

        .approval-actions {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }

        textarea {
            width: 100%;
            padding: 10px;
            margin-top: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            resize: vertical;
            min-height: 100px;
        }

        .reasons-checklist {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 10px;
            margin-bottom: 20px;
        }

        @@media (max-width: 768px) {
            .reasons-checklist

        {
            grid-template-columns: 1fr;
        }

        }

        .reason-item {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 8px;
        }

            .reason-item input[type="checkbox"] {
                width: 18px;
                height: 18px;
            }

            .reason-item label {
                font-weight: normal;
            }

        /* User Profile Modal Styles */
        #userProfileModal {
            z-index: 1010;
        }

        .user-profile-content {
            width: 95%;
            max-width: 1000px;
            padding: 30px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .profile-header {
            display: flex;
            gap: 30px;
            margin-bottom: 30px;
            align-items: flex-start;
        }

        .profile-image-container {
            position: relative;
            width: 200px;
            height: 200px;
            flex-shrink: 0;
        }

            .profile-image-container img {
                width: 100%;
                height: 100%;
                border-radius: 10px;
                object-fit: cover;
            }

        .verification-badge {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background-color: #fff;
            border-radius: 50%;
            padding: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .profile-details {
            flex: 1;
        }

        .user-details-container {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .detail-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .detail-label {
            font-weight: bold;
            color: #555;
        }

        .detail-value {
            color: #333;
        }

        .user-listings-section {
            margin-top: 30px;
        }

            .user-listings-section h2 {
                margin-bottom: 20px;
                text-align: center;
            }

        .listings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .listing-card {
            background-color: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .listing-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }

        .listing-image {
            position: relative;
            height: 180px;
        }

            .listing-image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .listing-status {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }

            .listing-status.pending {
                background-color: #ffc107;
                color: #212529;
            }

            .listing-status.approved {
                background-color: #28a745;
                color: white;
            }

            .listing-status.rejected {
                background-color: #dc3545;
                color: white;
            }

            .listing-status.sold {
                background-color: #17a2b8;
                color: white;
            }

        .listing-details {
            padding: 15px;
        }

            .listing-details h3 {
                margin: 0 0 10px 0;
                font-size: 16px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

        .listing-price {
            font-weight: bold;
            font-size: 16px;
            color: #0066cc;
            margin-bottom: 5px;
        }

        .listing-date {
            color: #666;
            font-size: 12px;
            margin-bottom: 5px;
        }

        .rejection-reason {
            background-color: #fff3cd;
            border-left: 3px solid #ffc107;
            padding: 8px;
            margin-top: 8px;
            font-size: 12px;
        }

        .empty-listings {
            text-align: center;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 10px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    @using Microsoft.AspNetCore.Antiforgery
    @inject IAntiforgery Anti

    @{
        var tokens = Anti.GetAndStoreTokens(Context);
    }

    <input type="hidden"
           id="__RequestVerificationToken"
           name="__RequestVerificationToken"
           value="@tokens.RequestToken" />

    <header class="main-header">
        <div class="header-content">
            <a asp-action="AdminDashboard" asp-controller="Admin" class="logo">
                <img style="height: 50px; width: 100px; background-color: #f0f8ff" src="/images/PrimeMarket_Logo_V2.png" alt="PrimeMarket Logo" />
            </a>
            <div class="header-actions">
                <a asp-action="Logout" asp-controller="Admin"><button class="btn-logoutadmin">Logout</button></a>
                <p>@userName</p>

                <!-- Notification Bell -->
                <div class="notification-wrapper">
                    <img id="listingNotificationBell" class="notification-icon" style="margin-top:10px; height: 25px; width: 25px; cursor: pointer;" src="/images/NotificationBell.png" alt="Notification Bell" />
                    <div id="listingNotificationDropdown" class="notification-dropdown">
                        <p class="notification-item">An item is waiting to be approved or rejected</p>
                        <p class="notification-item">A user sent ID for verification.</p>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <div class="dashboard">
        <div class="sidebar">
            <ul>
                <li onclick="window.location.href='@Url.Action("PendingVerifications", "Admin")'" class="nav-item">User ID Verifications</li>
                <li onclick="window.location.href='@Url.Action("PendingListings", "Admin")'" class="nav-item active">Pending Listings</li>
                <li onclick="window.location.href='@Url.Action("UsageReport", "Admin")'" class="nav-item">Usage Report</li>
            </ul>
        </div>

        <div class="dashboard-content">
            <div class="section-header">
                <h1>Pending Listings <span class="count-badge">@Model.Count</span></h1>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    @TempData["SuccessMessage"]
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["ErrorMessage"]
                </div>
            }

            @if (Model == null || Model.Count == 0)
            {
                <div class="empty-state">
                    <i class="fas fa-check-circle"></i>
                    <p>No pending listings to review!</p>
                </div>
            }
            else
            {
                <div class="listing-grid">
                    @foreach (var listing in Model)
                    {
                        var mainImage = listing.Images != null && listing.Images.Any()
                        ? (listing.Images.FirstOrDefault(i => i.IsMainImage)?.ImagePath ?? listing.Images.First().ImagePath)
                        : "/images/placeholder.png";

                        <div class="listing-card" data-id="@listing.Id">
                            <a href="@Url.Action("ListingDetails", "Admin", new { id = listing.Id })">
                                <div class="listing-image">
                                    <img src="@mainImage" alt="@listing.Title">
                                </div>
                                <div class="listing-details">
                                    <h3 class="listing-title">@listing.Title</h3>
                                    <p class="listing-price">@listing.Price.ToString("C")</p>
                                    <p class="listing-seller">Seller: <span class="seller-name" data-user-id="@listing.SellerId">@(listing.Seller?.FirstName ?? "") @(listing.Seller?.LastName ?? "")</span></p>
                                    <p class="listing-category">Category: @listing.Category > @listing.SubCategory</p>
                                    <p class="listing-date">Listed: @(((DateTime)listing.CreatedAt).ToString("MMM dd, yyyy"))</p>
                                </div>
                            </a>
                            <div class="listing-action">
                                <button onclick="openListingActions('@listing.Id')" class="btn-view">Review</button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Modal for listing actions -->
    <div id="listingActionsModal" class="modal">
        <div class="modal-content" style="max-width: 800px; width: 90%;">
            <span class="close" onclick="closeModal()">&times;</span>
            <h2>Review Listing</h2>

            <!-- Listing details section -->
            <div class="listing-review-details" style="display: flex; margin: 20px 0; border-bottom: 1px solid #ddd; padding-bottom: 20px;">
                <div id="modalListingImage" style="width: 200px; height: 200px; border-radius: 8px; overflow: hidden; margin-right: 20px; flex-shrink: 0;">
                    <img src="" alt="Listing Image" style="width: 100%; height: 100%; object-fit: cover;">
                </div>
                <div style="flex: 1;">
                    <h3 id="modalListingTitle" style="margin-top: 0; margin-bottom: 10px;"></h3>
                    <p id="modalListingPrice" style="font-weight: bold; color: #0066cc; font-size: 18px; margin-bottom: 10px;"></p>
                    <p id="modalListingSeller" style="margin-bottom: 5px;"></p>
                    <p id="modalListingCategory" style="margin-bottom: 5px;"></p>
                    <p id="modalListingDate" style="margin-bottom: 5px;"></p>
                    <p id="modalListingDescription" style="margin-top: 15px; max-height: 150px; overflow-y: auto;"></p>
                </div>
            </div>

            <p>Would you like to approve or reject this listing?</p>

            <div class="approval-actions">
                <form id="approveForm" method="post" asp-action="ApproveListing" asp-controller="Admin">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="approveListingId" name="id" value="">
                    <button type="submit" class="btn-approve">Approve</button>
                </form>

                <button class="btn-reject" onclick="showRejectForm()">Reject</button>

                <!-- View Details link -->
                <a id="viewDetailsLink" href="#" style="flex: 1; display: flex; justify-content: center; align-items: center; text-decoration: none;">
                    <button style="width: 100%; background-color: #0066cc;" class="btn-view">View Full Details</button>
                </a>
            </div>

            <div id="rejectForm" style="display: none; margin-top: 15px;">
                <h3>Select Reason(s) for Rejection:</h3>
                <div class="reasons-checklist">
                    <div class="reason-item">
                        <input type="checkbox" id="reason1" name="reason" value="Images are blurry or unclear">
                        <label for="reason1">Images are blurry or unclear</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason2" name="reason" value="Listing description is incomplete or vague">
                        <label for="reason2">Listing description is incomplete or vague</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason3" name="reason" value="Price is not reasonable for this item">
                        <label for="reason3">Price is not reasonable for this item</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason4" name="reason" value="Item appears to be damaged or defective">
                        <label for="reason4">Item appears to be damaged or defective</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason5" name="reason" value="Item is prohibited or restricted">
                        <label for="reason5">Item is prohibited or restricted</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason6" name="reason" value="Information doesn't match the category">
                        <label for="reason6">Information doesn't match the category</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason7" name="reason" value="Not enough images provided">
                        <label for="reason7">Not enough images provided</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason8" name="reason" value="Counterfeit or fake item">
                        <label for="reason8">Counterfeit or fake item</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reasonOther" name="reason" value="Other">
                        <label for="reasonOther">Other</label>
                        <input type="text" id="otherReasonText" placeholder="Please specify..." style="display:none; margin-top:5px; width:100%; padding:5px; border-radius:5px;">
                    </div>
                </div>
                <div style="text-align: right; margin-top: 15px;">
                    <button type="button" class="btn-cancel" onclick="hideRejectForm()">Cancel</button>
                    <button type="button" class="btn-reject" onclick="rejectListing()">Confirm Rejection</button>
                </div>
            </div>
        </div>
    </div>

    <!-- User Profile Modal -->
    <div id="userProfileModal" class="modal">
        <div class="modal-content user-profile-content">
            <span class="close" onclick="closeUserProfileModal()">&times;</span>
            <div class="modal-header">
                <h2 id="profileModalUserName">User Profile</h2>
            </div>
            <div class="profile-header">
                <div class="profile-image-container">
                    <img id="profileModalUserImage" src="/images/user-placeholder.png" alt="User Profile">
                    <div id="profileModalVerificationBadge" class="verification-badge" style="display: none;">
                        <img src="/images/verified.png" alt="Verified" width="30" height="30" title="Verified User">
                    </div>
                </div>

                <div class="profile-details">
                    <div class="user-details-container">
                        <div class="detail-item">
                            <span class="detail-label">Name:</span>
                            <span id="profileModalUserFirstName" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Last Name:</span>
                            <span id="profileModalUserLastName" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Email:</span>
                            <span id="profileModalUserEmail" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Phone Number:</span>
                            <span id="profileModalUserPhone" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Registered:</span>
                            <span id="profileModalUserCreated" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Verification Status:</span>
                            <span id="profileModalUserVerification" class="detail-value"></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User's Listings Section -->
            <div class="user-listings-section">
                <h2>User's Listings</h2>
                <div id="profileModalListingsContainer">
                    <div class="empty-listings">
                        <p>Loading listings...</p>
                    </div>
                </div>
            </div>

            <div class="modal-actions">
                <button id="closeProfileBtn" class="btn-reject" style="background-color: #6c757d;">Close</button>
            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Toggle notification dropdown
            const notificationBell = document.getElementById('listingNotificationBell');
            const notificationDropdown = document.getElementById('listingNotificationDropdown');

            if (notificationBell && notificationDropdown) {
                notificationBell.addEventListener('click', function(e) {
                    e.stopPropagation();
                    notificationDropdown.style.display = notificationDropdown.style.display === 'block' ? 'none' : 'block';
                });

                document.addEventListener('click', function(event) {
                    if (!notificationDropdown.contains(event.target) && event.target !== notificationBell) {
                        notificationDropdown.style.display = 'none';
                    }
                });
            }

            // Add event listeners for seller name clicks in listing cards
            const sellerNames = document.querySelectorAll('.seller-name');
            sellerNames.forEach(name => {
                name.addEventListener('click', function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                    const userId = this.getAttribute('data-user-id');
                    const userName = this.textContent.trim();
                    openUserProfileModal(userId, userName);
                });
            });

            // Filter buttons functionality
            const filterButtons = document.querySelectorAll('.filter-btn');
            const listingCards = document.querySelectorAll('.listing-card');

            if (filterButtons && listingCards) {
                filterButtons.forEach(button => {
                    button.addEventListener('click', function() {
                        const filter = this.getAttribute('data-filter');

                        // Update active button
                        filterButtons.forEach(btn => btn.classList.remove('active'));
                        this.classList.add('active');

                        // Filter listings
                        listingCards.forEach(card => {
                            if (filter === 'all' || card.getAttribute('data-status') === filter) {
                                card.style.display = 'block';
                            } else {
                                card.style.display = 'none';
                            }
                        });
                    });
                });
            }

            // Handle "Other" reason checkbox
            const reasonOtherCheckbox = document.getElementById('reasonOther');
            if (reasonOtherCheckbox) {
                reasonOtherCheckbox.addEventListener('change', function() {
                    document.getElementById('otherReasonText').style.display = this.checked ? 'block' : 'none';
                });
            }

            // Close modal when clicking outside
            window.addEventListener('click', function(event) {
                const listingModal = document.getElementById('listingActionsModal');
                const userProfileModal = document.getElementById('userProfileModal');

                if (event.target === listingModal) {
                    closeModal();
                }

                if (event.target === userProfileModal) {
                    closeUserProfileModal();
                }
            });
        });

        // Keep track of which listing we're working with
        let currentListingId = null;
        let currentSellerId = null;

        // Function to open the listing actions modal
        function openListingActions(listingId) {
            currentListingId = listingId;

            // Set the listing ID in the forms
            document.getElementById('approveListingId').value = listingId;

            // Get listing details from the card
            const listingCard = document.querySelector(`.listing-card[data-id="${listingId}"]`);
            const imageElement = listingCard.querySelector('.listing-image img');
            const titleElement = listingCard.querySelector('.listing-title');
            const priceElement = listingCard.querySelector('.listing-price');
            const sellerElement = listingCard.querySelector('.listing-seller');
            const categoryElement = listingCard.querySelector('.listing-category');
            const dateElement = listingCard.querySelector('.listing-date');

            // Get seller ID
            const sellerNameElement = listingCard.querySelector('.seller-name');
            if (sellerNameElement) {
                currentSellerId = sellerNameElement.getAttribute('data-user-id');
            }

            // Populate the modal with listing details
            document.getElementById('modalListingImage').querySelector('img').src = imageElement.src;
            document.getElementById('modalListingTitle').textContent = titleElement.textContent;
            document.getElementById('modalListingPrice').textContent = priceElement.textContent;

            // Set up seller with clickable name
            const sellerText = sellerElement.textContent;
            const sellerName = sellerElement.querySelector('.seller-name').textContent;
            const sellerHtml = `Seller: <span class="seller-name" data-user-id="${currentSellerId}" onclick="openUserProfileModal(${currentSellerId}, '${sellerName}')">${sellerName}</span>`;
            document.getElementById('modalListingSeller').innerHTML = sellerHtml;

            document.getElementById('modalListingCategory').textContent = categoryElement.textContent;
            document.getElementById('modalListingDate').textContent = dateElement.textContent;

            // Set the "View Full Details" link
            document.getElementById('viewDetailsLink').href = `/Admin/ListingDetails/${listingId}`;

            // Hide reject form initially
            document.getElementById('rejectForm').style.display = 'none';

            // Reset any checked checkboxes
            document.querySelectorAll('input[name="reason"]').forEach(checkbox => {
                checkbox.checked = false;
            });

            // Hide the "Other" text field
            const otherReasonText = document.getElementById('otherReasonText');
            if (otherReasonText) {
                otherReasonText.style.display = 'none';
                otherReasonText.value = '';
            }

            // Show the modal
            document.getElementById('listingActionsModal').style.display = 'block';
        }

        // Function to close the modal
        function closeModal() {
            const modal = document.getElementById('listingActionsModal');
            if (modal) {
                modal.style.display = 'none';
            }
        }

        // Function to show the rejection form
        function showRejectForm() {
            document.getElementById('rejectForm').style.display = 'block';
        }

        // Function to hide the rejection form
        function hideRejectForm() {
            document.getElementById('rejectForm').style.display = 'none';
        }

        // Function to handle listing rejection with selected reasons
        function rejectListing() {
            // gather selected reasons
            const selectedReasons = [];
            document.querySelectorAll('input[name="reason"]:checked').forEach(cb => {
                if (cb.id === 'reasonOther') {
                    const txt = document.getElementById('otherReasonText').value.trim();
                    if (txt) selectedReasons.push(txt);
                } else {
                    selectedReasons.push(cb.value);
                }
            });

            if (!selectedReasons.length) {
                alert('Please select at least one rejection reason.');
                return;
            }

            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (!token) {
                alert('CSRF token not found – refresh the page and try again.');
                return;
            }

            fetch('/Admin/RejectListing', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token,
                    'Accept': 'application/json'             // <-- tell server we expect JSON
                },
                body: `id=${currentListingId}&rejectionReason=${encodeURIComponent(selectedReasons.join(', '))}`
            })
            .then(async res => {
                if (!res.ok) throw new Error(`Server error ${res.status}`);

                // guard against wrong payload (e.g., HTML if something mis-routes)
                const ct = res.headers.get('content-type') || '';
                if (ct.includes('application/json')) return res.json();

                // unexpected – read as text so we don't crash on .json()
                const txt = await res.text();
                throw new Error(txt.slice(0, 200));
            })
            .then(data => {
                if (data.success) {
                    closeModal();

                    document.querySelector(`.listing-card[data-id="${currentListingId}"]`)?.remove();

                    const ok = document.createElement('div');
                    ok.className = 'alert alert-success';
                    ok.textContent = 'Listing rejected successfully.';
                    document.querySelector('.dashboard-content')
                            .insertBefore(ok, document.querySelector('.section-header').nextSibling);

                    setTimeout(() => ok.remove(), 3000);
                } else {
                    alert(data.message || 'Error rejecting listing. Please try again.');
                }
            })
            .catch(err => {
                console.error('Error rejecting listing:', err);
                alert('Error rejecting listing. Please try again.');
            });
        }

        // User Profile Modal Functions
        function openUserProfileModal(userId, userName) {
            if (!userId) return;

            document.getElementById('profileModalUserName').textContent = userName + "'s Profile";
            document.getElementById('userProfileModal').style.display = 'block';

            // Clear previous data
            document.getElementById('profileModalUserFirstName').textContent = "";
            document.getElementById('profileModalUserLastName').textContent = "";
            document.getElementById('profileModalUserEmail').textContent = "";
            document.getElementById('profileModalUserPhone').textContent = "Not provided";
            document.getElementById('profileModalUserCreated').textContent = "";
            document.getElementById('profileModalUserVerification').textContent = "Pending";
            document.getElementById('profileModalUserImage').src = "/images/user-placeholder.png";
            document.getElementById('profileModalVerificationBadge').style.display = 'none';

            // Set empty listings message
            document.getElementById('profileModalListingsContainer').innerHTML = `
                <div class="empty-listings">
                    <p>Loading listings...</p>
                </div>
            `;

            // Fetch user details
            fetchUserDetails(userId);

            // Set up close button click handler
            document.getElementById('closeProfileBtn').onclick = closeUserProfileModal;
        }

        function closeUserProfileModal() {
            document.getElementById('userProfileModal').style.display = 'none';
        }

        function fetchUserDetails(userId) {
            fetch(`/Admin/GetUserDetails?userId=${userId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error fetching user details');
                }
                return response.json();
            })
            .then(user => {
                // Update the UI with the user details from the database
                document.getElementById('profileModalUserFirstName').textContent = user.firstName || "";
                document.getElementById('profileModalUserLastName').textContent = user.lastName || "";
                document.getElementById('profileModalUserEmail').textContent = user.email || "";
                document.getElementById('profileModalUserPhone').textContent = user.phoneNumber || "Not provided";
                document.getElementById('profileModalUserCreated').textContent = new Date(user.createdAt).toLocaleDateString();
                document.getElementById('profileModalUserVerification').textContent = user.isIdVerified ? "Verified" : "Pending";

                if (user.profileImagePath) {
                    document.getElementById('profileModalUserImage').src = user.profileImagePath;
                }

                // Show verification badge if user is verified
                if (user.isIdVerified) {
                    document.getElementById('profileModalVerificationBadge').style.display = 'block';
                } else {
                    document.getElementById('profileModalVerificationBadge').style.display = 'none';
                }

                // Fetch user listings and generate the listings grid
                fetchUserListings(userId);
            })
            .catch(error => {
                console.error('Error fetching user details:', error);
                // Fallback to data from the verification card if API call fails
                const sellerEl = document.querySelector(`[data-user-id="${userId}"]`);
                if (sellerEl) {
                    const userName = sellerEl.textContent.trim().split(' ');
                    const firstName = userName[0] || "";
                    const lastName = userName.slice(1).join(' ') || "";

                    // Update the UI with the data we have
                    document.getElementById('profileModalUserFirstName').textContent = firstName;
                    document.getElementById('profileModalUserLastName').textContent = lastName;
                    document.getElementById('profileModalUserEmail').textContent = "Information not available";
                    document.getElementById('profileModalUserCreated').textContent = "Unknown";
                    document.getElementById('profileModalUserVerification').textContent = "Unknown";
                }

                // Still try to fetch user listings
                fetchUserListings(userId);
            });
        }

        function fetchUserListings(userId) {
            const listingsContainer = document.getElementById('profileModalListingsContainer');
            listingsContainer.innerHTML = `
                <div class="empty-listings">
                    <p>Loading listings...</p>
                </div>
            `;

            fetch(`/Admin/GetUserListings?userId=${userId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                }
            })
            .then(response => {
                if (!response.ok) {
                    console.error('Network response was not ok');
                    return []; // fallback to empty listings
                }
                return response.json();
            })
            .then(data => {
                // If the server sent an object like { success: false }, treat as empty
                const listings = Array.isArray(data) ? data : [];

                if (listings.length === 0) {
                    listingsContainer.innerHTML = `
                        <div class="empty-listings">
                            <p>This user has no listings.</p>
                        </div>
                    `;
                    return;
                }

                // Build listings HTML
                let listingsHTML = '<div class="listings-grid">';
                listings.forEach(listing => {
                    let mainImage = "/images/placeholder.png";
                    if (listing.images && listing.images.length > 0) {
                        const mainImageObj = listing.images.find(img => img.isMainImage);
                        mainImage = mainImageObj ? mainImageObj.imagePath : listing.images[0].imagePath;
                    }

                    const status = listing.status.toLowerCase();

                    listingsHTML += `
                        <div class="listing-card ${status}">
                            <div class="listing-image">
                                <img src="${mainImage}" alt="${listing.title}">
                                <div class="listing-status ${status}">${listing.status}</div>
                            </div>
                            <div class="listing-details">
                                <h3>${listing.title}</h3>
                                <p class="listing-price">₺${listing.price.toLocaleString()}</p>
                                <p class="listing-date">Listed on ${new Date(listing.createdAt).toLocaleDateString()}</p>
                                <p>Category: ${listing.category}${listing.subCategory ? ` > ${listing.subCategory}` : ''}</p>
                                ${listing.status === 'Rejected' && listing.rejectionReason ?
                                    `<p class="rejection-reason"><strong>Rejection Reason:</strong> ${listing.rejectionReason}</p>` : ''}
                            </div>
                        </div>
                    `;
                });

                listingsHTML += '</div>';
                listingsContainer.innerHTML = listingsHTML;
            })
            .catch(error => {
                console.error('Error fetching user listings:', error);
                listingsContainer.innerHTML = `
                    <div class="empty-listings">
                        <p>Error loading listings. Please try again later.</p>
                    </div>
                `;
            });
        }


        </script>
        </body>
        </html>