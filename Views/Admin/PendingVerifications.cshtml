@model List<PrimeMarket.Models.VerificationDocument>
@{
    ViewData["Title"] = "Pending Verifications";
    Layout = null;
    var userName = Context.Session.GetString("AdminUsername") ?? "Admin";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>@ViewData["Title"] - PrimeMarket Admin</title>
    <link rel="stylesheet" href="~/css/AdminDashboard.css" />
    <link rel="stylesheet" href="/css/notificationstyle.css" />
    <style>
        .logo img {
            width: 120px;
            height: 50px;
            object-fit: cover;
            border-radius: 8px;
        }
        .verification-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }

        .verification-card {
            background-color: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            padding: 20px;
        }

        .user-info {
            display: flex;
            align-items: center;
            margin-bottom: 15px;
        }

        .user-image {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 15px;
        }

        .user-details h3 {
            margin: 0 0 5px 0;
            font-size: 18px;
            cursor: pointer;
            color: #0066cc;
            text-decoration: underline;
        }

        .user-email {
            color: #666;
            font-size: 14px;
            margin: 0;
        }

        .verification-images {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
        }

        .id-image-container {
            flex: 1;
            position: relative;
        }

            .id-image-container h4 {
                margin: 0 0 5px 0;
                font-size: 16px;
                text-align: center;
            }

        .id-image {
            width: 100%;
            height: 180px;
            object-fit: cover;
            border-radius: 5px;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

            .id-image:hover {
                transform: scale(1.03);
            }

        .verification-date {
            color: #666;
            font-size: 14px;
            margin-bottom: 15px;
        }

        .verification-actions {
            display: flex;
            gap: 10px;
        }

        .btn-approve, .btn-reject {
            flex: 1;
            padding: 10px 0;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            text-align: center;
        }

        .btn-approve {
            background-color: #28a745;
            color: white;
        }

        .btn-reject {
            background-color: #dc3545;
            color: white;
        }

        .empty-state {
            text-align: center;
            padding: 50px;
            background-color: #f8f9fa;
            border-radius: 10px;
            margin-top: 20px;
        }

            .empty-state i {
                font-size: 50px;
                color: #ddd;
                margin-bottom: 20px;
            }

            .empty-state p {
                color: #666;
                font-size: 18px;
            }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .count-badge {
            background-color: #0066cc;
            color: white;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 14px;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.8);
        }

        .modal-content {
            width: 95%;
            max-width: 600px;
        }

        .close {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .modal-header {
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #ddd;
        }

        .modal-images {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
        }

        .modal-image-container {
            flex: 1;
        }

            .modal-image-container h4 {
                margin: 0 0 10px 0;
                text-align: center;
                font-size: 18px;
            }

        .modal-image {
            width: 100%;
            height: auto;
            max-height: 400px;
            object-fit: contain;
            border-radius: 5px;
        }

        .modal-actions {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }

            .modal-actions button {
                padding: 10px 20px;
                border: none;
                border-radius: 5px;
                cursor: pointer;
                font-weight: bold;
            }

        .reject-reasons {
            display: none;
            margin-top: 20px;
        }

            .reject-reasons h3 {
                margin: 0 0 15px 0;
                font-size: 18px;
            }

        .reasons-checklist {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 10px;
            margin-bottom: 20px;
        }

        .reason-item {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .btn-confirm-reject {
            padding: 10px 20px;
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }

        .approval-message {
            display: none;
            text-align: center;
            margin-top: 20px;
            padding: 15px;
            background-color: #d4edda;
            color: #155724;
            border-radius: 5px;
        }

        .alert {
            padding: 12px 15px;
            border-radius: 5px;
            margin-bottom: 20px;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
        }

        /* User Profile Modal Styles */
        #userProfileModal {
            z-index: 1010;
        }

        .user-profile-content {
            width: 95%;
            max-width: 1000px;
            padding: 30px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .profile-header {
            display: flex;
            gap: 30px;
            margin-bottom: 30px;
            align-items: flex-start;
        }

        .profile-image-container {
            position: relative;
            width: 200px;
            height: 200px;
            flex-shrink: 0;
        }

            .profile-image-container img {
                width: 100%;
                height: 100%;
                border-radius: 10px;
                object-fit: cover;
            }

        .verification-badge {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background-color: #fff;
            border-radius: 50%;
            padding: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .profile-details {
            flex: 1;
        }

        .user-details-container {
            background-color: #f8f9fa;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .detail-item {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .detail-label {
            font-weight: bold;
            color: #555;
        }

        .detail-value {
            color: #333;
        }

        .user-listings-section {
            margin-top: 30px;
        }

            .user-listings-section h2 {
                margin-bottom: 20px;
                text-align: center;
            }

        .listings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .listing-card {
            background-color: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .listing-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }

        .listing-image {
            position: relative;
            height: 180px;
        }

            .listing-image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .listing-status {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }

            .listing-status.pending {
                background-color: #ffc107;
                color: #212529;
            }

            .listing-status.approved {
                background-color: #28a745;
                color: white;
            }

            .listing-status.rejected {
                background-color: #dc3545;
                color: white;
            }

            .listing-status.sold {
                background-color: #17a2b8;
                color: white;
            }

        .listing-details {
            padding: 15px;
        }

            .listing-details h3 {
                margin: 0 0 10px 0;
                font-size: 16px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

        .listing-price {
            font-weight: bold;
            font-size: 16px;
            color: #0066cc;
            margin-bottom: 5px;
        }

        .listing-date {
            color: #666;
            font-size: 12px;
            margin-bottom: 5px;
        }

        .empty-listings {
            text-align: center;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 10px;
            margin-top: 20px;
        }
        @@media (max-width: 768px) {
            .verification-images, .modal-images

        {
            flex-direction: column;
        }
        }
    </style>
</head>
<body>
    @using Microsoft.AspNetCore.Antiforgery
    @inject IAntiforgery Anti

    @{
        var tokens = Anti.GetAndStoreTokens(Context);
    }

    <input type="hidden"
           id="__RequestVerificationToken"
           name="__RequestVerificationToken"
           value="@tokens.RequestToken" />

    <header class="main-header">
        <div class="header-content">
            <a asp-action="AdminDashboard" asp-controller="Admin" class="logo">
                <img style="height: 50px; width: 100px; background-color: #f0f8ff" src="/images/PrimeMarket_Logo_V2.png" alt="PrimeMarket Logo" />
            </a>
            <div class="header-actions">
                <a asp-action="Logout" asp-controller="Admin"><button class="btn-logoutadmin">Logout</button></a>
                <p>@userName</p>

                <!-- Notification Bell -->
@*                 <div class="notification-wrapper">
                    <img id="listingNotificationBell" class="notification-icon" style="margin-top:10px; height: 25px; width: 25px; cursor: pointer;" src="/images/NotificationBell.png" alt="Notification Bell" />
                    <div id="listingNotificationDropdown" class="notification-dropdown">
                        <p class="notification-item">An item is waiting to be approved or rejected</p>
                        <p class="notification-item">A user sent ID for verification.</p>
                    </div>
                </div> *@
            </div>
        </div>
    </header>

    <div class="dashboard">
        <div class="sidebar">
            <ul>
                <li onclick="window.location.href='@Url.Action("PendingVerifications", "Admin")'" class="nav-item active">User ID Verifications</li>
                <li onclick="window.location.href='@Url.Action("PendingListings", "Admin")'" class="nav-item">Pending Listings</li>
                <li onclick="window.location.href='@Url.Action("UsageReport", "Admin")'" class="nav-item">Usage Report</li>
            </ul>
        </div>

        <div class="dashboard-content">
            <div class="section-header">
                <h1>Pending ID Verifications <span class="count-badge">@Model.Count</span></h1>
            </div>

            @if (TempData["SuccessMessage"] != null)
            {
                <div class="alert alert-success">
                    @TempData["SuccessMessage"]
                </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["ErrorMessage"]
                </div>
            }

            @if (Model == null || Model.Count == 0)
            {
                <div class="empty-state">
                    <i class="fas fa-id-card"></i>
                    <p>No pending ID verifications to review!</p>
                </div>
            }
            else
            {
                <div class="verification-grid">
                    @foreach (var verification in Model)
                    {
                        <div class="verification-card" data-id="@verification.Id" data-user-id="@verification.UserId">
                            <div class="user-info">
                                <img src="@(string.IsNullOrEmpty(verification.User?.ProfileImagePath) ? "/images/user-placeholder.png" : verification.User.ProfileImagePath)" alt="User" class="user-image">
                                <div class="user-details">
                                    <h3 onclick="openUserProfileModal(@verification.UserId, '@verification.User?.FirstName @verification.User?.LastName')">@verification.User?.FirstName @verification.User?.LastName</h3>
                                    <p class="user-email">@verification.User?.Email</p>
                                </div>
                            </div>

                            <div class="verification-images">
                                <div class="id-image-container">
                                    <h4>ID Front</h4>
                                    <img src="@verification.FrontImagePath" alt="ID Front" class="id-image front-image"
                                         onclick="openImageModal('@verification.Id', '@verification.User?.FirstName @verification.User?.LastName', '@verification.FrontImagePath', '@verification.BackImagePath', '@verification.FaceImagePath')">
                                </div>
                                <div class="id-image-container">
                                    <h4>ID Back</h4>
                                    <img src="@verification.BackImagePath" alt="ID Back" class="id-image back-image"
                                         onclick="openImageModal('@verification.Id', '@verification.User?.FirstName @verification.User?.LastName', '@verification.FrontImagePath', '@verification.BackImagePath', '@verification.FaceImagePath')">
                                </div>
                                <div class="id-image-container">
                                    <h4>Face Photo</h4>
                                    <img src="@verification.FaceImagePath" alt="Face Photo" class="id-image face-image"
                                         onclick="openImageModal('@verification.Id', '@verification.User?.FirstName @verification.User?.LastName', '@verification.FrontImagePath', '@verification.BackImagePath', '@verification.FaceImagePath')">
                                </div>
                            </div>

                            <p class="verification-date">Submitted: @(((DateTime)verification.CreatedAt).ToString("MMM dd, yyyy"))</p>

                            <div class="verification-actions">
                                <button class="btn-approve" onclick="approveVerification('@verification.Id')">Approve</button>
                                <button class="btn-reject" onclick="openRejectModal('@verification.Id')">Reject</button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Modal for enlarged image -->
    <div id="idModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeModal()">&times;</span>
            <div class="modal-header">
                <h3 id="modalUserName">User ID Verification</h3>
            </div>
            <div class="modal-images">
                <div class="modal-image-container">
                    <h4>ID Front</h4>
                    <img id="modalImageFront" class="modal-image" src="" alt="ID Front">
                </div>
                <div class="modal-image-container">
                    <h4>ID Back</h4>
                    <img id="modalImageBack" class="modal-image" src="" alt="ID Back">
                </div>
                <div class="modal-image-container">
                    <h4>Face Photo</h4>
                    <img id="modalImageFace" class="modal-image" src="" alt="Face Photo">
                </div>
            </div>
            <div class="modal-actions">
                <button id="modalApproveBtn" class="btn-approve" onclick="approveVerification()">Approve</button>
                <button id="modalRejectBtn" class="btn-reject" onclick="showRejectReasons()">Reject</button>
            </div>

            <!-- Reject reasons checklist -->
            <div id="rejectReasons" class="reject-reasons">
                <h3>Select Reason(s) for Rejection:</h3>
                <div class="reasons-checklist">
                    <div class="reason-item">
                        <input type="checkbox" id="reason1" name="reason" value="Image is blurry or unclear">
                        <label for="reason1">Image is blurry or unclear</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason2" name="reason" value="ID appears to be damaged or altered">
                        <label for="reason2">ID appears to be damaged or altered</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason3" name="reason" value="Information on ID doesn't match user account">
                        <label for="reason3">Information on ID doesn't match user account</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason4" name="reason" value="ID is expired">
                        <label for="reason4">ID is expired</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason5" name="reason" value="Document type not acceptable">
                        <label for="reason5">Document type not acceptable</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason6" name="reason" value="Both sides of ID not provided">
                        <label for="reason6">Both sides of ID not provided</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason7" name="reason" value="ID information not legible">
                        <label for="reason7">ID information not legible</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason8" name="reason" value="Security features not visible">
                        <label for="reason8">Security features not visible</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason9" name="reason" value="Photo on ID doesn't match face photo">
                        <label for="reason9">Photo on ID doesn't match face photo</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason10" name="reason" value="Face photo is not clear">
                        <label for="reason10">Face photo is not clear</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reason11" name="reason" value="Face photo appears to be altered">
                        <label for="reason11">Face photo appears to be altered</label>
                    </div>
                    <div class="reason-item">
                        <input type="checkbox" id="reasonOther" name="reason" value="Other">
                        <label for="reasonOther">Other</label>
                        <input type="text" id="otherReasonText" placeholder="Please specify..." style="display:none; margin-top:5px; width:100%; padding:5px;">
                    </div>
                </div>
                <button id="confirmRejectBtn" class="btn-confirm-reject" onclick="rejectVerification()">Confirm Rejection</button>
            </div>

            <!-- Approval message -->
            <div id="approvalMessage" class="approval-message">
                <p>ID verification has been approved successfully!</p>
            </div>
        </div>
    </div>

    <!-- User Profile Modal -->
    <div id="userProfileModal" class="modal">
        <div class="modal-content user-profile-content">
            <span class="close" onclick="closeUserProfileModal()">&times;</span>
            <div class="modal-header">
                <h2 id="profileModalUserName">User Profile</h2>
            </div>
            <div class="profile-header">
                <div class="profile-image-container">
                    <img id="profileModalUserImage" src="/images/user-placeholder.png" alt="User Profile">
                    <div id="profileModalVerificationBadge" class="verification-badge" style="display: none;">
                        <img src="/images/verified.png" alt="Verified" width="30" height="30" title="Verified User">
                    </div>
                </div>

                <div class="profile-details">
                    <div class="user-details-container">
                        <div class="detail-item">
                            <span class="detail-label">Name:</span>
                            <span id="profileModalUserFirstName" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Last Name:</span>
                            <span id="profileModalUserLastName" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Email:</span>
                            <span id="profileModalUserEmail" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Phone Number:</span>
                            <span id="profileModalUserPhone" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Registered:</span>
                            <span id="profileModalUserCreated" class="detail-value"></span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Verification Status:</span>
                            <span id="profileModalUserVerification" class="detail-value"></span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- User's Listings Section -->
            <div class="user-listings-section">
                <h2>User's Listings</h2>
                <div id="profileModalListingsContainer">
                    <div class="empty-listings">
                        <p>Loading listings...</p>
                    </div>
                </div>
            </div>

            <div class="modal-actions">
                <button id="viewVerificationBtn" class="btn-approve" style="background-color: #0066cc;">View ID Verification</button>
                <button id="closeProfileBtn" class="btn-reject" style="background-color: #6c757d;">Close</button>
            </div>
        </div>
    </div>

    <script>
        let currentVerificationId = null;
        let currentUserId = null;

        // Image modal functions
        function openImageModal(id, userName, frontImage, backImage, faceImage) {
            currentVerificationId = id;

            document.getElementById('modalUserName').textContent = userName + ' - ID Verification';
            document.getElementById('modalImageFront').src = frontImage;
            document.getElementById('modalImageBack').src = backImage;
            document.getElementById('modalImageFace').src = faceImage;
            document.getElementById('idModal').style.display = 'block';

            document.getElementById('rejectReasons').style.display = 'none';
            document.getElementById('approvalMessage').style.display = 'none';
            document.getElementById('modalApproveBtn').style.display = 'block';
            document.getElementById('modalRejectBtn').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('idModal').style.display = 'none';
            resetModalState();
        }

        function resetModalState() {
            document.getElementById('rejectReasons').style.display = 'none';
            document.getElementById('approvalMessage').style.display = 'none';
            document.getElementById('modalApproveBtn').style.display = 'block';
            document.getElementById('modalRejectBtn').style.display = 'block';

            // Reset checkboxes
            document.querySelectorAll('input[name="reason"]').forEach(checkbox => {
                checkbox.checked = false;
            });

            document.getElementById('otherReasonText').style.display = 'none';
            document.getElementById('otherReasonText').value = '';
        }

        function showRejectReasons() {
            document.getElementById('modalApproveBtn').style.display = 'none';
            document.getElementById('modalRejectBtn').style.display = 'none';
            document.getElementById('rejectReasons').style.display = 'block';
        }

        function openRejectModal(id) {
        const card = document.querySelector(`.verification-card[data-id="${id}"]`);
        if (!card) return;

        const userName = card.querySelector('.user-details h3').textContent;
        const frontImage = card.querySelector('.front-image').src;
        const backImage = card.querySelector('.back-image').src;
        const faceImage = card.querySelector('.face-image').src;

        openImageModal(id, userName, frontImage, backImage, faceImage);
        showRejectReasons();
        }

        // User Profile Modal Functions
        function openUserProfileModal(userId, userName) {
            currentUserId = userId;

            document.getElementById('profileModalUserName').textContent = userName + "'s Profile";
            document.getElementById('userProfileModal').style.display = 'block';

            // Clear previous data and show loading state
            document.getElementById('profileModalUserFirstName').textContent = "";
            document.getElementById('profileModalUserLastName').textContent = "";
            document.getElementById('profileModalUserEmail').textContent = "";
            document.getElementById('profileModalUserPhone').textContent = "Not provided";
            document.getElementById('profileModalUserCreated').textContent = "";
            document.getElementById('profileModalUserVerification').textContent = "Pending";
            document.getElementById('profileModalUserImage').src = "/images/user-placeholder.png";
            document.getElementById('profileModalVerificationBadge').style.display = 'none';

            // Set empty listings message
            document.getElementById('profileModalListingsContainer').innerHTML = `
                <div class="empty-listings">
                    <p>Loading listings...</p>
                </div>
            `;

            // Fetch user details
            fetchUserDetails(userId);

            // Set up verification button click handler
            document.getElementById('viewVerificationBtn').onclick = function() {
                const verificationId = document.querySelector(`.verification-card[data-user-id="${userId}"]`).getAttribute('data-id');
                const verificationCard = document.querySelector(`.verification-card[data-id="${verificationId}"]`);

                closeUserProfileModal();
                openImageModal(verificationId, userName,
                    verificationCard.querySelector('.front-image').src,
                    verificationCard.querySelector('.back-image').src,
                    verificationCard.querySelector('.face-image').src);
            };

            // Set up close button click handler
            document.getElementById('closeProfileBtn').onclick = closeUserProfileModal;
        }



        function fetchUserDetails(userId) {
            if (!userId) return;

            // Get the CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';

            fetch(`/Admin/GetUserDetails?userId=${userId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (!response.ok) {
                    console.error(`Server returned ${response.status}: ${response.statusText}`);
                    throw new Error('Failed to fetch user details');
                }
                return response.json();
            })
            .then(user => {
                console.log('User details received:', user);

                // Update the UI with the user details
                document.getElementById('profileModalUserFirstName').textContent = user.firstName || "";
                document.getElementById('profileModalUserLastName').textContent = user.lastName || "";
                document.getElementById('profileModalUserEmail').textContent = user.email || "";
                document.getElementById('profileModalUserPhone').textContent = user.phoneNumber || "Not provided";

                const createdDate = user.createdAt ? new Date(user.createdAt).toLocaleDateString() : "Unknown";
                document.getElementById('profileModalUserCreated').textContent = createdDate;

                document.getElementById('profileModalUserVerification').textContent =
                    user.isIdVerified ? "Verified" : "Pending";

                if (user.profileImagePath) {
                    document.getElementById('profileModalUserImage').src = user.profileImagePath;
                }

                // Show verification badge if user is verified
                if (user.isIdVerified) {
                    document.getElementById('profileModalVerificationBadge').style.display = 'block';
                } else {
                    document.getElementById('profileModalVerificationBadge').style.display = 'none';
                }

                // Fetch user listings after user details are loaded
                fetchUserListings(userId);
            })
            .catch(error => {
                console.error('Error fetching user details:', error);
                document.getElementById('profileModalUserFirstName').textContent = "Error loading data";
                document.getElementById('profileModalUserLastName').textContent = "";
                document.getElementById('profileModalUserEmail').textContent = "Please try again";
                document.getElementById('profileModalUserPhone').textContent = "";
                document.getElementById('profileModalUserCreated').textContent = "";
                document.getElementById('profileModalUserVerification').textContent = "Unknown";

                // We'll still try to fetch listings in case user details failed but listings might succeed
                fetchUserListings(userId);
            });
        }

        function closeUserProfileModal() {
            const modal = document.getElementById('userProfileModal');
            if (modal) {
                modal.style.display = 'none';
            }
        }

        function fetchUserListings(userId) {
            if (!userId) return;

            const listingsContainer = document.getElementById('profileModalListingsContainer');
            if (!listingsContainer) {
                console.error('Listings container not found in the DOM');
                return;
            }

            // Show loading state
            listingsContainer.innerHTML = `
                <div class="empty-listings">
                    <p>Loading listings...</p>
                </div>
            `;

            // Get the anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value || '';

            fetch(`/Admin/GetUserListings?userId=${userId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'RequestVerificationToken': token
                }
            })
            .then(response => {
                if (!response.ok) {
                    console.error(`Server returned ${response.status}: ${response.statusText}`);
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('User listings data received:', data);

                // Safely handle the response data
                let listings = [];

                if (Array.isArray(data)) {
                    listings = data;
                } else if (data && typeof data === 'object') {
                    // Handle possible object response with listings property
                    if (Array.isArray(data.listings)) {
                        listings = data.listings;
                    } else if (data.success === false) {
                        console.warn('API returned error:', data.message || 'Unknown error');
                        throw new Error(data.message || 'Failed to load listings');
                    }
                }

                if (listings.length === 0) {
                    listingsContainer.innerHTML = `
                        <div class="empty-listings">
                            <p>This user has no listings.</p>
                        </div>
                    `;
                    return;
                }

                // Build listings HTML
                let listingsHTML = '<div class="listings-grid">';

                listings.forEach(listing => {
                    // Safely extract the main image
                    let mainImage = "/images/placeholder.png";
                    if (listing.images && listing.images.length > 0) {
                        const mainImageObj = listing.images.find(img => img.isMainImage);
                        mainImage = mainImageObj ? mainImageObj.imagePath : listing.images[0].imagePath;
                    }

                    // Safely get status and convert to lowercase
                    const status = (listing.status || 'unknown').toLowerCase();

                    // Safe conversion for price
                    const price = typeof listing.price === 'number'
                        ? listing.price.toLocaleString()
                        : listing.price || '0';

                    // Build HTML with appropriate escaping
                    listingsHTML += `
                        <div class="listing-card ${status}">
                            <div class="listing-image">
                                <img src="${mainImage}" alt="${(listing.title || '').replace(/"/g, '&quot;')}">
                                <div class="listing-status ${status}">${listing.status || 'Unknown'}</div>
                            </div>
                            <div class="listing-details">
                                <h3>${listing.title || 'Untitled Listing'}</h3>
                                <p class="listing-price">₺${price}</p>
                                <p class="listing-date">Listed on ${new Date(listing.createdAt || Date.now()).toLocaleDateString()}</p>
                                <p>Category: ${listing.category || 'Unknown'}${listing.subCategory ? ` > ${listing.subCategory}` : ''}</p>
                                ${listing.status === 'Rejected' && listing.rejectionReason ?
                                    `<p class="rejection-reason"><strong>Rejection Reason:</strong> ${listing.rejectionReason}</p>` : ''}
                            </div>
                        </div>
                    `;
                });

                listingsHTML += '</div>';
                listingsContainer.innerHTML = listingsHTML;
            })
            .catch(error => {
                console.error('Error fetching user listings:', error);
                listingsContainer.innerHTML = `
                    <div class="empty-listings">
                        <p>Error loading listings. Please try again later.</p>
                        <p class="error-details">${error.message || 'Unknown error'}</p>
                    </div>
                `;
            });
        }

        function approveVerification(id = null) {
            const verificationId = id || currentVerificationId;
            if (!verificationId) return;

            // Show loading state
            const approveBtn = document.getElementById('modalApproveBtn');
            if (approveBtn) {
                approveBtn.textContent = 'Approving...';
                approveBtn.disabled = true;
            }

            fetch('/Admin/ApproveVerification', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `id=${verificationId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    if (approveBtn) {
                        document.getElementById('modalApproveBtn').style.display = 'none';
                        document.getElementById('modalRejectBtn').style.display = 'none';
                        document.getElementById('approvalMessage').style.display = 'block';

                        setTimeout(() => {
                            closeModal();
                            removeVerificationCard(verificationId);
                        }, 2000);
                    } else {
                        removeVerificationCard(verificationId);
                    }
                } else {
                    alert(data.message || 'Error approving verification. Please try again.');
                    if (approveBtn) {
                        approveBtn.textContent = 'Approve';
                        approveBtn.disabled = false;
                    }
                }
            })
            .catch(error => {
                console.error('Error approving verification:', error);
                alert('Error approving verification. Please try again.');
                if (approveBtn) {
                    approveBtn.textContent = 'Approve';
                    approveBtn.disabled = false;
                }
            });
        }

        function rejectVerification() {
            if (!currentVerificationId) return;

            // Get selected reasons
            const selectedReasons = [];
            document.querySelectorAll('input[name="reason"]:checked').forEach(checkbox => {
                if (checkbox.id === 'reasonOther') {
                    const otherReason = document.getElementById('otherReasonText').value.trim();
                    if (otherReason) {
                        selectedReasons.push(otherReason);
                    }
                } else {
                    selectedReasons.push(checkbox.value);
                }
            });

            if (selectedReasons.length === 0) {
                alert('Please select at least one rejection reason.');
                return;
            }

            // Show loading state
            const confirmRejectBtn = document.getElementById('confirmRejectBtn');
            confirmRejectBtn.textContent = 'Rejecting...';
            confirmRejectBtn.disabled = true;

            fetch('/Admin/RejectVerification', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `id=${currentVerificationId}&rejectionReason=${encodeURIComponent(selectedReasons.join(', '))}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    closeModal();
                    removeVerificationCard(currentVerificationId);
                } else {
                    alert(data.message || 'Error rejecting verification. Please try again.');
                    confirmRejectBtn.textContent = 'Confirm Rejection';
                    confirmRejectBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error rejecting verification:', error);
                alert('Error rejecting verification. Please try again.');
                confirmRejectBtn.textContent = 'Confirm Rejection';
                confirmRejectBtn.disabled = false;
            });
        }

        function removeVerificationCard(id) {
            const card = document.querySelector(`.verification-card[data-id="${id}"]`);
            if (card) {
                card.style.opacity = '0';
                card.style.transform = 'scale(0.8)';

                setTimeout(() => {
                    card.remove();

                    const remainingCards = document.querySelectorAll('.verification-card');
                    if (remainingCards.length === 0) {
                        document.querySelector('.dashboard-content').innerHTML = `
                            <div class="section-header">
                                <h1>Pending ID Verifications <span class="count-badge">0</span></h1>
                            </div>
                            <div class="empty-state">
                                <i class="fas fa-id-card"></i>
                                <p>No pending ID verifications to review!</p>
                            </div>
                        `;
                    }

                    // Update the counter
                    const countBadge = document.querySelector('.count-badge');
                    if (countBadge) {
                        const currentCount = parseInt(countBadge.textContent);
                        if (currentCount > 0) {
                            countBadge.textContent = currentCount - 1;
                        } else {
                            countBadge.textContent = 0;
                        }
                    }
                }, 300);
            }
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Toggle notification dropdown
            const notificationBell = document.getElementById('listingNotificationBell');
            const notificationDropdown = document.getElementById('listingNotificationDropdown');

            if (notificationBell && notificationDropdown) {
                notificationBell.addEventListener('click', function(e) {
                    e.stopPropagation();
                    notificationDropdown.style.display = notificationDropdown.style.display === 'block' ? 'none' : 'block';
                });

                document.addEventListener('click', function(event) {
                    if (!notificationDropdown.contains(event.target) && event.target !== notificationBell) {
                        notificationDropdown.style.display = 'none';
                    }
                });
            }

            // Toggle "Other" reason text input
            const reasonOther = document.getElementById('reasonOther');
            const otherReasonText = document.getElementById('otherReasonText');

            if (reasonOther && otherReasonText) {
                reasonOther.addEventListener('change', function() {
                    otherReasonText.style.display = this.checked ? 'block' : 'none';
                });
            }

            // Close modals when clicking outside
            window.addEventListener('click', function(event) {
                const idModal = document.getElementById('idModal');
                const userProfileModal = document.getElementById('userProfileModal');

                if (event.target === idModal) {
                    closeModal();
                }

                if (event.target === userProfileModal) {
                    closeUserProfileModal();
                }
            });
        });
                function openUserProfileModal(userId, userName) {
            if (!userId) {
                console.error("Cannot open user profile: userId is null or undefined");
                return;
            }

            // Show the modal
            const modal = document.getElementById('userProfileModal');
            if (!modal) {
                console.error("User profile modal element not found");
                return;
            }

            modal.style.display = 'block';

            // Set modal title with user name
            const titleEl = document.getElementById('profileModalUserName');
            if (titleEl) {
                titleEl.textContent = userName ? `${userName}'s Profile` : 'User Profile';
            }

            // Clear previous data and show loading indicators
            resetProfileModalData();

            // Fetch user details
            fetchUserDetails(userId);

            // Set up close button event handler
            const closeBtn = document.getElementById('closeProfileBtn');
            if (closeBtn) {
                closeBtn.onclick = closeUserProfileModal;
            }

            // Set up the view verification button if present
            const viewVerificationBtn = document.getElementById('viewVerificationBtn');
            if (viewVerificationBtn) {
                viewVerificationBtn.onclick = function() {
                    // Find the verification card for this user
                    const verificationCard = document.querySelector(`.verification-card[data-user-id="${userId}"]`);
                    if (verificationCard) {
                        const verificationId = verificationCard.getAttribute('data-id');
                        closeUserProfileModal();

                        // Determine which openImageModal function to call based on which page we're on
                        if (typeof openImageModal === 'function') {
                            // On the verification page
                            const frontImage = verificationCard.querySelector('.front-image')?.src;
                            const backImage = verificationCard.querySelector('.back-image')?.src;
                            openImageModal(verificationId, userName, frontImage, backImage);
                        }
                    } else {
                        console.warn("Could not find verification card for user:", userId);
                    }
                };
            }
        }

        function resetProfileModalData() {
            // Reset all user data fields with loading indicators
            document.getElementById('profileModalUserFirstName').textContent = "Loading...";
            document.getElementById('profileModalUserLastName').textContent = "Loading...";
            document.getElementById('profileModalUserEmail').textContent = "Loading...";
            document.getElementById('profileModalUserPhone').textContent = "Loading...";
            document.getElementById('profileModalUserCreated').textContent = "Loading...";
            document.getElementById('profileModalUserVerification').textContent = "Loading...";
            document.getElementById('profileModalUserImage').src = "/images/user-placeholder.png";
            document.getElementById('profileModalVerificationBadge').style.display = 'none';

            // Clear listings container with loading indicator
            const listingsContainer = document.getElementById('profileModalListingsContainer');
            if (listingsContainer) {
                listingsContainer.innerHTML = `
                    <div class="empty-listings">
                        <p>Loading user data...</p>
                    </div>
                `;
            }
        }

    </script>
</body>
</html>