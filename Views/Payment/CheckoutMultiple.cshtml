@model PrimeMarket.Models.ViewModel.MultipleCheckoutViewModel
@{
    ViewData["Title"] = "Checkout";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}

<div class="container" style="margin-top: 120px; margin-bottom: 50px;">
    <h1>Checkout</h1>

    <div class="checkout-container">
        <div class="checkout-summary">
            <h2>Order Summary</h2>

            @foreach (var item in Model.Items)
            {
                <div class="item-summary" data-bookmark-id="@item.BookmarkId" data-price="@item.Price">
                    <div class="item-image">
                        <img src="@item.ImageUrl" alt="@item.Title" width="80" height="80">
                    </div>
                    <div class="item-details">
                        <h3>@item.Title</h3>
                        <p class="seller">Seller: @item.SellerName</p>
                        <div class="quantity-wrapper">
                            <label>Quantity: </label>
                            <span class="quantity-display">@ViewData[$"Quantity_{item.BookmarkId}"] ?? 1</span>
                            <input type="hidden" name="quantities[@item.BookmarkId]"
                                   class="item-quantity"
                                   value="@(ViewData[$"Quantity_{item.BookmarkId}"] ?? 1)" />
                        </div>
                        <p class="price">
                            <span class="unit-price">@item.Price.ToString("C")</span> ×
                            <span class="quantity-text">@(ViewData[$"Quantity_{item.BookmarkId}"] ?? 1)</span> =
                            <span class="item-total">@((item.Price * (ViewData[$"Quantity_{item.BookmarkId}"] != null ? Convert.ToInt32(ViewData[$"Quantity_{item.BookmarkId}"]) : 1)).ToString("C"))</span>
                        </p>
                    </div>
                </div>
            }

            <div class="order-total">
                <div class="total-label">Total</div>
                <div class="total-amount" id="checkout-total">@Model.TotalPrice.ToString("C")</div>
            </div>
        </div>

        <div class="checkout-payment">
            <h2>Payment Details</h2>

            @if (TempData["ErrorMessage"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["ErrorMessage"]
                </div>
            }

            <form id="paymentForm" method="post" action="@Url.Action("ProcessMultiplePayment")">
                @Html.AntiForgeryToken()

                <div class="form-group">
                    <label for="cardholderName">Cardholder Name</label>
                    <input type="text" id="cardholderName" name="CardholderName" placeholder="Name on card" required>
                </div>

                <div class="form-group">
                    <label for="cardNumber">Card Number</label>
                    <input type="text" id="cardNumber" name="CardNumber" placeholder="1234 5678 9012 3456" required
                           maxlength="19" pattern="[0-9\s]{13,19}">
                </div>

                <div class="form-row">
                    <div class="form-group half">
                        <label for="expiryDate">Expiry Date</label>
                        <input type="text" id="expiryDate" name="ExpiryDate" placeholder="MM/YY" required
                               maxlength="5" pattern="(0[1-9]|1[0-2])\/[0-9]{2}">
                    </div>

                    <div class="form-group half">
                        <label for="cvv">CVV</label>
                        <input type="password" id="cvv" name="Cvv" placeholder="123" required
                               maxlength="4" pattern="[0-9]{3,4}">
                    </div>
                </div>

                <!-- Hidden fields for quantities -->
                <div id="quantities-container">
                    @foreach (var item in Model.Items)
                    {
                        <input type="hidden" name="quantities[@item.BookmarkId].BookmarkId" value="@item.BookmarkId" />
                        <input type="hidden" name="quantities[@item.BookmarkId].Quantity"
                               value="@(ViewData[$"Quantity_{item.BookmarkId}"] ?? 1)"
                               id="quantity-input-@item.BookmarkId" />
                    }
                </div>

                <div class="payment-actions">
                    <a href="@Url.Action("Cart")" class="btn-cancel">Cancel</a>
                    <button type="submit" class="btn-pay">Pay Now <span id="payment-amount">@Model.TotalPrice.ToString("C")</span></button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .checkout-container {
        display: flex;
        gap: 30px;
        margin-top: 30px;
    }

    .checkout-summary {
        flex: 0 0 40%;
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
    }

    .checkout-payment {
        flex: 0 0 55%;
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
    }

    .item-summary {
        display: flex;
        margin: 20px 0;
        padding-bottom: 20px;
        border-bottom: 1px solid #ddd;
    }

    .item-image {
        margin-right: 15px;
    }

        .item-image img {
            border-radius: 8px;
            object-fit: cover;
        }

    .item-details h3 {
        margin: 0 0 10px 0;
        font-size: 16px;
    }

    .seller {
        color: #666;
        margin-bottom: 5px;
        font-size: 14px;
    }

    .price {
        font-weight: bold;
        color: #0066cc;
    }

    .quantity-wrapper {
        margin: 10px 0;
        display: flex;
        align-items: center;
    }

    .quantity-control {
        display: flex;
        align-items: center;
        margin-left: 10px;
    }

    .quantity-btn {
        width: 25px;
        height: 25px;
        border-radius: 50%;
        border: 1px solid #ddd;
        background-color: #f8f9fa;
        font-size: 14px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .quantity-input {
        width: 40px;
        height: 25px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin: 0 5px;
        -moz-appearance: textfield;
    }

        .quantity-input::-webkit-inner-spin-button,
        .quantity-input::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

    .unit-price {
        color: #666;
    }

    .item-total {
        font-weight: bold;
        color: #28a745;
    }

    .order-total {
        display: flex;
        justify-content: space-between;
        padding-top: 15px;
        font-size: 18px;
        font-weight: bold;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-row {
        display: flex;
        gap: 20px;
    }

    .form-group.half {
        flex: 1;
    }

    label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
    }

    input[type="text"],
    input[type="password"],
    input[type="number"] {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
    }

    input:focus {
        border-color: #0066cc;
        outline: none;
    }

    .payment-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
    }

    .btn-cancel {
        padding: 12px 24px;
        background-color: #f0f0f0;
        color: #333;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        text-align: center;
    }

    .btn-pay {
        padding: 12px 24px;
        background-color: #0066cc;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
    }

        .btn-pay:hover {
            background-color: #0055b3;
        }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        padding: 10px 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }

    @@media (max-width: 768px) {
        .checkout-container {
            flex-direction: column;
        }

        .checkout-summary,
        .checkout-payment {
            flex: 0 0 100%;
        }

        .item-summary {
            flex-direction: column;
        }

        .item-image {
            margin-right: 0;
            margin-bottom: 10px;
            text-align: center;
        }

        .item-details {
            text-align: center;
        }

        .quantity-wrapper {
            justify-content: center;
        }
    }
</style>

        <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get all the elements we need
            const quantityInputs = document.querySelectorAll('.quantity-input');
            const decreaseButtons = document.querySelectorAll('.decrease-btn');
            const increaseButtons = document.querySelectorAll('.increase-btn');
            const checkoutTotal = document.getElementById('checkout-total');
            const paymentAmount = document.getElementById('payment-amount');

            // Calculate initial total
            updateTotalAmount();

            // Handle quantity changes
            quantityInputs.forEach(input => {
                input.addEventListener('change', function() {
                    const itemId = this.getAttribute('data-id');

                    // Validate input value
                    if (this.value < 1) this.value = 1;
                    if (this.value > 99) this.value = 99;

                    // Update hidden input
                    document.getElementById(`quantity-input-${itemId}`).value = this.value;

                    // Update quantity text
                    document.getElementById(`quantity-text-${itemId}`).textContent = this.value;

                    // Update item total
                    updateItemTotal(itemId);

                    // Update order total
                    updateTotalAmount();
                });
            });

            // Handle decrease button clicks
            decreaseButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-id');
                    const input = document.querySelector(`.quantity-input[data-id="${itemId}"]`);
                    const currentValue = parseInt(input.value);

                    if (currentValue > 1) {
                        input.value = currentValue - 1;

                        // Update hidden input
                        document.getElementById(`quantity-input-${itemId}`).value = input.value;

                        // Update quantity text
                        document.getElementById(`quantity-text-${itemId}`).textContent = input.value;

                        // Update item total
                        updateItemTotal(itemId);

                        // Update order total
                        updateTotalAmount();
                    }
                });
            });

            // Handle increase button clicks
            increaseButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const itemId = this.getAttribute('data-id');
                    const input = document.querySelector(`.quantity-input[data-id="${itemId}"]`);
                    const currentValue = parseInt(input.value);

                    if (currentValue < 99) {
                        input.value = currentValue + 1;

                        // Update hidden input
                        document.getElementById(`quantity-input-${itemId}`).value = input.value;

                        // Update quantity text
                        document.getElementById(`quantity-text-${itemId}`).textContent = input.value;

                        // Update item total
                        updateItemTotal(itemId);

                        // Update order total
                        updateTotalAmount();
                    }
                });
            });

            // Function to update item total
            function updateItemTotal(itemId) {
                const itemSummary = document.querySelector(`.item-summary[data-bookmark-id="${itemId}"]`);
                const price = parseFloat(itemSummary.getAttribute('data-price'));
                const quantity = parseInt(document.querySelector(`.quantity-input[data-id="${itemId}"]`).value);
                const itemTotal = document.getElementById(`item-total-${itemId}`);

                const total = price * quantity;
                itemTotal.textContent = formatCurrency(total);
            }

            // Function to update total amount
            function updateTotalAmount() {
                let total = 0;
                const itemSummaries = document.querySelectorAll('.item-summary');

                itemSummaries.forEach(item => {
                    const price = parseFloat(item.getAttribute('data-price'));
                    const bookmarkId = item.getAttribute('data-bookmark-id');
                    const quantity = parseInt(document.querySelector(`.quantity-input[data-id="${bookmarkId}"]`).value);

                    total += price * quantity;
                });

                checkoutTotal.textContent = formatCurrency(total);
                paymentAmount.textContent = formatCurrency(total);
            }

            // Function to format currency
            function formatCurrency(amount) {
                return new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(amount);
            }

            // Format card number with spaces
            const cardInput = document.getElementById('cardNumber');
            cardInput.addEventListener('input', function(e) {
                let value = e.target.value.replace(/\D/g, '');
                if (value.length > 0) {
                    value = value.match(/.{1,4}/g).join(' ');
                }
                e.target.value = value;
            });

            // Format expiry date with slash
            const expiryInput = document.getElementById('expiryDate');
            expiryInput.addEventListener('input', function(e) {
                let value = e.target.value.replace(/\D/g, '');
                if (value.length > 0) {
                    if (value.length > 2) {
                        value = value.substring(0, 2) + '/' + value.substring(2, 4);
                    }
                }
                e.target.value = value;
            });

            // Validate form on submit
            const paymentForm = document.getElementById('paymentForm');
            paymentForm.addEventListener('submit', function(e) {
                const cardNumber = cardInput.value.replace(/\s/g, '');
                const expiry = expiryInput.value;
                const cvv = document.getElementById('cvv').value;

                let isValid = true;

                // Validate card number (basic check)
                if (cardNumber.length < 13 || cardNumber.length > 19) {
                    alert('Please enter a valid card number');
                    isValid = false;
                }

                // Validate expiry date
                const expiryRegex = /^(0[1-9]|1[0-2])\/\d{2}$/;
                if (!expiryRegex.test(expiry)) {
                    alert('Please enter a valid expiry date in MM/YY format');
                    isValid = false;
                }

                // Validate CVV
                if (cvv.length < 3 || cvv.length > 4) {
                    alert('Please enter a valid CVV code');
                    isValid = false;
                }

                if (!isValid) {
                    e.preventDefault();
                }
            });
        });
        </script>