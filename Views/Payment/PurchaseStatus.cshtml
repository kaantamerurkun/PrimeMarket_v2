@model PrimeMarket.Models.ViewModel.PurchaseConfirmationViewModel
@{
    ViewData["Title"] = "Purchase Status";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}

<style>
    .item-info h2 {
        margin: 0 0 10px 0;
        font-size: 16px;
        word-break: break-word;
        overflow-wrap: break-word;
        white-space: normal;
        max-width: 100%;
    }

    .container {
        max-width: 1000px;
        margin: 120px auto 50px auto;
        padding: 0 15px;
    }

    .logo img {
        width: 120px;
        height: 50px;
        object-fit: cover;
        border-radius: 8px;
    }

    .purchase-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .purchase-id {
        font-size: 16px;
        color: #666;
    }

    .purchase-container {
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .item-details {
        display: flex;
        background-color: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        padding: 20px;
    }

    .item-image {
        flex: 0 0 150px;
        margin-right: 20px;
    }

        .item-image img {
            width: 100%;
            height: auto;
            border-radius: 5px;
            object-fit: cover;
        }

    .item-info {
        flex: 1;
    }

        .item-info h2 {
            margin-top: 0;
            margin-bottom: 15px;
            color: #333;
        }

    .item-price {
        font-weight: bold;
        color: #0066cc;
        margin-bottom: 10px;
        font-size: 18px;
    }

    .item-type {
        display: inline-block;
        background-color: #f0f0f0;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 14px;
        margin-bottom: 10px;
    }

    .tracking-info {
        background-color: #f8f9fa;
        padding: 10px 15px;
        border-radius: 5px;
        margin-top: 15px;
    }

    .status-progress {
        display: flex;
        justify-content: space-between;
        margin-bottom: 30px;
        position: relative;
    }

        .status-progress:after {
            content: '';
            position: absolute;
            top: 25px;
            left: 0;
            right: 0;
            height: 2px;
            background-color: #ddd;
            z-index: 1;
        }

    .status-step {
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        z-index: 2;
        flex: 1;
        text-align: center;
    }

    .step-number {
        width: 50px;
        height: 50px;
        background-color: #f0f0f0;
        color: #666;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .status-step.active .step-number {
        background-color: #0066cc;
        color: white;
    }

    .status-step.completed .step-number {
        background-color: #28a745;
        color: white;
    }

    .status-step.cancelled .step-number {
        background-color: #dc3545;
        color: white;
    }

    .step-label {
        font-weight: 500;
        margin-bottom: 5px;
    }

    .step-date {
        font-size: 12px;
        color: #666;
    }

    .action-buttons {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .seller-actions, .buyer-actions {
        margin-bottom: 20px;
    }

        .seller-actions h3, .buyer-actions h3 {
            margin-top: 0;
            margin-bottom: 10px;
            color: #333;
        }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 14px;
    }

    .confirmation-checkbox {
        display: flex;
        align-items: center;
        margin: 15px 0;
    }

        .confirmation-checkbox input[type="checkbox"] {
            margin-right: 10px;
        }

    .btn-confirm {
        padding: 10px 20px;
        background-color: #0066cc;
        color: white;
        border: none;
        border-radius: 50px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-right: 10px;
    }

        .btn-confirm:hover {
            background-color: #0055b3;
        }

        .btn-confirm:disabled {
            background-color: #99c1e5;
            cursor: not-allowed;
        }

    .btn-cancel {
        padding: 10px 20px;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 50px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-cancel:hover {
            background-color: #c82333;
        }

    .transaction-complete, .payment-pending, .transaction-cancelled {
        border-radius: 5px;
        padding: 15px;
    }

    .transaction-complete {
        background-color: #d4edda;
    }

        .transaction-complete h3 {
            color: #155724;
            margin-top: 0;
            margin-bottom: 10px;
        }

    .payment-pending {
        background-color: #fff3cd;
    }

        .payment-pending h3 {
            color: #856404;
            margin-top: 0;
            margin-bottom: 10px;
        }

    .transaction-cancelled {
        background-color: #f8d7da;
    }

        .transaction-cancelled h3 {
            color: #721c24;
            margin-top: 0;
            margin-bottom: 10px;
        }

    .button-group {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .cancel-section {
        background-color: #fff3cd;
        border-left: 4px solid #ffc107;
        padding: 15px;
        margin-top: 20px;
        border-radius: 5px;
    }

        .cancel-section h4 {
            color: #856404;
            margin-top: 0;
            margin-bottom: 10px;
        }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
    }

    .modal-content {
        background-color: white;
        margin: 15% auto;
        padding: 20px;
        border-radius: 10px;
        width: 90%;
        max-width: 500px;
        position: relative;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    .btn-modal-cancel, .btn-modal-confirm {
        padding: 10px 20px;
        border: none;
        border-radius: 50px;
        cursor: pointer;
    }

    .btn-modal-cancel {
        background-color: #f0f0f0;
        color: #333;
    }

    .btn-modal-confirm {
        background-color: #dc3545;
        color: white;
    }

    @@media (max-width: 768px) {
        .item-details

    {
        flex-direction: column;
    }

    .item-image {
        margin-right: 0;
        margin-bottom: 15px;
        flex: 0 0 auto;
    }

    .status-progress {
        flex-direction: column;
        gap: 20px;
    }

        .status-progress:after {
            top: 0;
            bottom: 0;
            left: 25px;
            right: auto;
            width: 2px;
            height: auto;
        }

    .status-step {
        flex-direction: row;
        text-align: left;
        align-items: flex-start;
    }

    .step-number {
        margin-right: 15px;
        margin-bottom: 0;
    }

    .button-group {
        flex-direction: column;
    }

    }
</style>

<div class="container" style="margin-top: 120px; margin-bottom: 50px;">
    <div class="purchase-header">
        <h1>Purchase Status</h1>
        <div class="purchase-id">Purchase #@Model.PurchaseId</div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="purchase-container">
        <div class="item-details">
            <div class="item-image">
                <img src="@Model.ListingImage" alt="@Model.ListingTitle">
            </div>
            <div class="item-info">
                <h2>@Model.ListingTitle</h2>
                <p class="item-price">
                    @if (Model.Quantity > 1)
                    {
                        <span>@Model.UnitPrice.ToString("C") × @Model.Quantity = @Model.Amount.ToString("C")</span>
                    }
                    else
                    {
                        <span>@Model.Amount.ToString("C")</span>
                    }
                </p>
                <p class="item-type">@(Model.IsFirstHand ? "First-hand item" : "Second-hand item")</p>
                <p>Purchase Date: @Model.PurchaseDate.ToString("MMM dd, yyyy")</p>
                <p>Seller: @Model.SellerName</p>
                <p>Buyer: @Model.BuyerName</p>
                <p>Quantity: @Model.Quantity</p>

                @if (!string.IsNullOrEmpty(Model.TrackingNumber))
                {
                    <div class="tracking-info">
                        <p><strong>Tracking Number:</strong> @Model.TrackingNumber</p>
                        <p><strong>Shipping Provider:</strong> @Model.ShippingProvider</p>
                    </div>
                }
            </div>
        </div>

        @if (Model.PaymentStatus != PrimeMarket.Models.Enum.PaymentStatus.Refunded)
        {
            <div class="status-progress">
                <div class="status-step @(Model.PaymentStatus == PrimeMarket.Models.Enum.PaymentStatus.Authorized ? "active" : (Model.PaymentStatus == PrimeMarket.Models.Enum.PaymentStatus.Completed ? "completed" : ""))">
                    <div class="step-number">1</div>
                    <div class="step-label">Payment Authorized</div>
                    <div class="step-date">@Model.PurchaseDate.ToString("MMM dd, yyyy")</div>
                </div>

                <div class="status-step @(Model.SellerShippedProduct ? "completed" : "")">
                    <div class="step-number">2</div>
                    <div class="step-label">Seller Shipped</div>
                    @if (Model.SellerShippedProduct)
                    {
                        <div class="step-date">@Model.ShippingConfirmedDate?.ToString("MMM dd, yyyy")</div>
                    }
                </div>

                <div class="status-step @(Model.BuyerReceivedProduct ? "completed" : "")">
                    <div class="step-number">3</div>
                    <div class="step-label">Buyer Received</div>
                    @if (Model.BuyerReceivedProduct)
                    {
                        <div class="step-date">@Model.ReceiptConfirmedDate?.ToString("MMM dd, yyyy")</div>
                    }
                </div>

                <div class="status-step @(Model.PaymentReleased ? "completed" : "")">
                    <div class="step-number">4</div>
                    <div class="step-label">Payment Released</div>
                    @if (Model.PaymentReleased)
                    {
                        <div class="step-date">@Model.PaymentReleasedDate?.ToString("MMM dd, yyyy")</div>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="status-progress">
                <div class="status-step cancelled">
                    <div class="step-number">✗</div>
                    <div class="step-label">Purchase Cancelled</div>
                    <div class="step-date">@Model.PurchaseDate.ToString("MMM dd, yyyy")</div>
                </div>
            </div>
        }

        <div class="action-buttons">
            @if (Model.PaymentStatus == PrimeMarket.Models.Enum.PaymentStatus.Refunded)
            {
                <div class="transaction-cancelled">
                    <h3>Purchase Cancelled</h3>
                    <p>This purchase has been cancelled. @(Model.IsFirstHand ? "Stock has been restored to the listing." : "The offer has been cancelled.")</p>
                    @if (Model.IsFirstHand)
                    {
                        <p>The seller's stock count has been increased by @Model.Quantity @(Model.Quantity > 1 ? "units" : "unit").</p>
                    }
                </div>
            }
            else if (Model.IsViewerSeller && !Model.SellerShippedProduct)
            {
                <div class="seller-actions">
                    <h3>Confirm Shipping</h3>
                    <p>Please confirm when you have shipped the item to the buyer.</p>
                    <p style="margin-top:10px;margin-bottom:10px"><span style="color:#2cb73a">Shipping Address:</span><span style="color:#ffb901">@Model.ShippingAddress</span></p>
                    <form method="post" action="@Url.Action("ConfirmShipping", "Payment")">
                        @Html.AntiForgeryToken()
                        <input style="border-radius:50px" type="hidden" name="purchaseId" value="@Model.PurchaseId" />

                        <div class="form-group">
                            <label for="trackingNumber">Tracking Number (optional)</label>
                            <input style="border-radius:50px" type="text" id="trackingNumber" name="trackingNumber" class="form-control"
                                   placeholder="Enter tracking number" />
                        </div>

                        <div class="form-group">
                            <label for="shippingProvider">Shipping Provider (optional)</label>
                            <input style="border-radius:50px" type="text" id="shippingProvider" name="shippingProvider" class="form-control"
                                   placeholder="Enter shipping provider" />
                        </div>

                        <div class="confirmation-checkbox">
                            <input type="checkbox" id="shippingConfirm" required />
                            <label for="shippingConfirm">I confirm that I have shipped @(Model.Quantity > 1 ? $"{Model.Quantity} units of " : "")this item to the buyer</label>
                        </div>

                        <div class="button-group">
                            <button type="submit" class="btn-confirm">Confirm Shipping</button>
                            <button type="button" class="btn-cancel" onclick="openCancelModal()">Cancel Purchase</button>
                        </div>
                    </form>
                </div>
            }
            else if (Model.IsViewerBuyer && Model.SellerShippedProduct && !Model.BuyerReceivedProduct)
            {
                <div class="buyer-actions">
                    <h3>Confirm Receipt</h3>
                    <p>Please confirm when you have received the item from the seller.</p>
                    <p style="margin-top:10px;margin-bottom:10px"><span style="color:#2cb73a">Shipping Address:</span><span style="color:#ffb901">@Model.ShippingAddress</span></p>
                    <form method="post" action="@Url.Action("ConfirmReceived", "Payment")">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="purchaseId" value="@Model.PurchaseId" />

                        <div class="confirmation-checkbox">
                            <input type="checkbox" id="receiptConfirm" required />
                            <label for="receiptConfirm">I confirm that I have received @(Model.Quantity > 1 ? $"{Model.Quantity} units of " : "")this item in good condition</label>
                        </div>

                        <button type="submit" class="btn-confirm">Confirm Receipt</button>
                    </form>
                </div>
            }
            else if (Model.IsViewerBuyer && !Model.SellerShippedProduct)
            {
                <div class="cancel-section">
                    <h4>Purchase Not Yet Shipped</h4>
                    <p>The seller has not yet shipped your item. You can cancel this purchase if needed.</p>
                    <button type="button" class="btn-cancel" onclick="openCancelModal()">Cancel Purchase</button>
                </div>
            }
            else if (Model.PaymentReleased)
            {
                <div class="transaction-complete">
                    <h3>Transaction Complete</h3>
                    <p>This transaction has been completed successfully. Payment has been released to the seller.</p>
                    <p>Thank you for using PrimeMarket!</p>
                </div>
            }
            else if (Model.BuyerReceivedProduct && !Model.PaymentReleased)
            {
                <div class="payment-pending">
                    <h3>Payment Processing</h3>
                    <p>The item has been received. Payment will be released to the seller shortly.</p>
                </div>
            }
        </div>
    </div>
</div>

<!-- Cancel Confirmation Modal -->
<div id="cancelModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeCancelModal()">&times;</span>
        <h2>Cancel Purchase</h2>
        <p>Are you sure you want to cancel this purchase?</p>
        @if (Model.IsFirstHand)
        {
            <p><strong>Note:</strong> Cancelling will restore @Model.Quantity @(Model.Quantity > 1 ? "units" : "unit") to the seller's stock.</p>
        }
        else
        {
            <p><strong>Note:</strong> Cancelling will make this item available for other offers again.</p>
        }
        <p>This action cannot be undone.</p>
        <div class="modal-actions">
            <button type="button" class="btn-modal-cancel" onclick="closeCancelModal()">Keep Purchase</button>
            <button type="button" class="btn-modal-confirm" onclick="confirmCancel()">Cancel Purchase</button>
        </div>
    </div>
</div>

<script>
    function openCancelModal() {
        document.getElementById('cancelModal').style.display = 'block';
    }

    function closeCancelModal() {
        document.getElementById('cancelModal').style.display = 'none';
    }

    function confirmCancel() {
        // Create a form to submit the cancellation
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '@Url.Action("CancelPurchase", "Payment")';

        // Add anti-forgery token
        const tokenInput = document.createElement('input');
        tokenInput.type = 'hidden';
        tokenInput.name = '__RequestVerificationToken';
        tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
        form.appendChild(tokenInput);

        // Add purchase ID
        const purchaseIdInput = document.createElement('input');
        purchaseIdInput.type = 'hidden';
        purchaseIdInput.name = 'purchaseId';
        purchaseIdInput.value = '@Model.PurchaseId';
        form.appendChild(purchaseIdInput);

        // Submit the form
        document.body.appendChild(form);
        form.submit();
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('cancelModal');
        if (event.target === modal) {
            closeCancelModal();
        }
    };
</script>