@model PrimeMarket.Models.ViewModel.PurchaseConfirmationViewModel
@{
    ViewData["Title"] = "Purchase Status";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}

<div class="container" style="margin-top: 120px; margin-bottom: 50px;">
    <div class="purchase-header">
        <h1>Purchase Status</h1>
        <div class="purchase-id">Purchase #@Model.PurchaseId</div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="purchase-container">
        <div class="item-details">
            <div class="item-image">
                <img src="@Model.ListingImage" alt="@Model.ListingTitle">
            </div>
            <div class="item-info">
                <h2>@Model.ListingTitle</h2>
                <p class="item-price">@Model.Amount.ToString("C")</p>
                <p class="item-type">@(Model.IsFirstHand ? "First-hand item" : "Second-hand item")</p>
                <p>Purchase Date: @Model.PurchaseDate.ToString("MMM dd, yyyy")</p>
                <p>Seller: @Model.SellerName</p>
                <p>Buyer: @Model.BuyerName</p>

                @if (!string.IsNullOrEmpty(Model.TrackingNumber))
                {
                    <div class="tracking-info">
                        <p><strong>Tracking Number:</strong> @Model.TrackingNumber</p>
                        <p><strong>Shipping Provider:</strong> @Model.ShippingProvider</p>
                    </div>
                }
            </div>
        </div>

        <div class="status-progress">
            <div class="status-step @(Model.PaymentStatus == PrimeMarket.Models.Enum.PaymentStatus.Authorized ? "active" : (Model.PaymentStatus == PrimeMarket.Models.Enum.PaymentStatus.Completed ? "completed" : ""))">
                <div class="step-number">1</div>
                <div class="step-label">Payment Authorized</div>
                <div class="step-date">@Model.PurchaseDate.ToString("MMM dd, yyyy")</div>
            </div>

            <div class="status-step @(Model.SellerShippedProduct ? "completed" : "")">
                <div class="step-number">2</div>
                <div class="step-label">Seller Shipped</div>
                @if (Model.SellerShippedProduct)
                {
                    <div class="step-date">@Model.ShippingConfirmedDate?.ToString("MMM dd, yyyy")</div>
                }
            </div>

            <div class="status-step @(Model.BuyerReceivedProduct ? "completed" : "")">
                <div class="step-number">3</div>
                <div class="step-label">Buyer Received</div>
                @if (Model.BuyerReceivedProduct)
                {
                    <div class="step-date">@Model.ReceiptConfirmedDate?.ToString("MMM dd, yyyy")</div>
                }
            </div>

            <div class="status-step @(Model.PaymentReleased ? "completed" : "")">
                <div class="step-number">4</div>
                <div class="step-label">Payment Released</div>
                @if (Model.PaymentReleased)
                {
                    <div class="step-date">@Model.PaymentReleasedDate?.ToString("MMM dd, yyyy")</div>
                }
            </div>
        </div>

        <div class="action-buttons">
            @if (Model.IsViewerSeller && !Model.SellerShippedProduct)
            {
                <div class="seller-actions">
                    <form method="post" action="@Url.Action("ConfirmShipping", "Payment")">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="purchaseId" value="@Model.PurchaseId" />

                        <div class="form-group">
                            <label for="trackingNumber">Tracking Number</label>
                            <input type="text" id="trackingNumber" name="trackingNumber" required
                                   class="form-control" placeholder="Enter tracking number">
                        </div>

                        <div class="form-group">
                            <label for="shippingProvider">Shipping Provider</label>
                            <input type="text" id="shippingProvider" name="shippingProvider" required
                                   class="form-control" placeholder="Enter shipping provider">
                        </div>

                        <button type="submit" class="btn-confirm-shipping">
                            Confirm Item Shipped
                        </button>
                    </form>
                </div>
            }
            else if (Model.IsViewerSeller && Model.SellerShippedProduct)
            {
                <div class="shipping-confirmed">
                    <p>You've confirmed shipping on @Model.ShippingConfirmedDate?.ToString("MMM dd, yyyy")</p>
                    <p>Tracking Number: @Model.TrackingNumber</p>
                    <p>Shipping Provider: @Model.ShippingProvider</p>
                </div>
            }

            @if (Model.IsViewerBuyer && Model.SellerShippedProduct && !Model.BuyerReceivedProduct)
            {
                <div class="buyer-actions">
                    <form method="post" action="@Url.Action("ConfirmReceived", "Payment")">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="purchaseId" value="@Model.PurchaseId" />
                        <p>The seller has shipped your item. Once you've received it, please confirm below:</p>
                        <button type="submit" class="btn-confirm-receipt">
                            Confirm Item Received
                        </button>
                    </form>
                </div>
            }
            else if (Model.IsViewerBuyer && Model.BuyerReceivedProduct)
            {
                <div class="receipt-confirmed">
                    <p>You've confirmed receipt on @Model.ReceiptConfirmedDate?.ToString("MMM dd, yyyy")</p>
                </div>
            }

            @if (Model.PaymentReleased)
            {
                <div class="payment-released">
                    <p>Payment was released to the seller on @Model.PaymentReleasedDate?.ToString("MMM dd, yyyy")</p>
                    <p>This transaction is now complete.</p>
                </div>
            }
            else if (Model.SellerShippedProduct && Model.BuyerReceivedProduct)
            {
                <div class="payment-pending-release">
                    <p>Payment is being processed and will be released to the seller shortly.</p>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .container {
        max-width: 900px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .purchase-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
    }

    .purchase-id {
        font-size: 18px;
        color: #666;
    }

    .alert {
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .purchase-container {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 30px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .item-details {
        display: flex;
        margin-bottom: 30px;
        border-bottom: 1px solid #ddd;
        padding-bottom: 30px;
    }

    .item-image {
        flex: 0 0 250px;
        margin-right: 30px;
    }

        .item-image img {
            width: 100%;
            height: auto;
            border-radius: 8px;
            object-fit: cover;
            max-height: 250px;
        }

    .item-info {
        flex: 1;
    }

        .item-info h2 {
            margin-top: 0;
            margin-bottom: 15px;
        }

    .item-price {
        font-size: 24px;
        font-weight: bold;
        color: #0066cc;
        margin-bottom: 10px;
    }

    .item-type {
        font-style: italic;
        color: #666;
        margin-bottom: 15px;
    }

    .tracking-info {
        margin-top: 15px;
        padding: 15px;
        background-color: #e2f0fd;
        border-radius: 8px;
    }

    .status-progress {
        display: flex;
        justify-content: space-between;
        margin-bottom: 40px;
        position: relative;
    }

        .status-progress::before {
            content: '';
            position: absolute;
            top: 25px;
            left: 30px;
            right: 30px;
            height: 4px;
            background-color: #ddd;
            z-index: 1;
        }

    .status-step {
        position: relative;
        z-index: 2;
        text-align: center;
        flex: 1;
    }

    .step-number {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background-color: #f0f0f0;
        color: #666;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 0 auto 10px;
        font-weight: bold;
        border: 4px solid #ddd;
    }

    .status-step.active .step-number {
        background-color: #0066cc;
        color: white;
        border-color: #0066cc;
    }

    .status-step.completed .step-number {
        background-color: #28a745;
        color: white;
        border-color: #28a745;
    }

    .step-label {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .step-date {
        font-size: 14px;
        color: #666;
    }

    .action-buttons {
        background-color: white;
        border-radius: 8px;
        padding: 20px;
        margin-top: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        font-size: 16px;
    }

    .btn-confirm-shipping, .btn-confirm-receipt {
        padding: 12px 25px;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

    .btn-confirm-shipping {
        background-color: #0066cc;
        color: white;
    }

    .btn-confirm-receipt {
        background-color: #28a745;
        color: white;
    }

    .btn-confirm-shipping:hover {
        background-color: #0055b3;
    }

    .btn-confirm-receipt:hover {
        background-color: #218838;
    }

    .shipping-confirmed, .receipt-confirmed, .payment-released, .payment-pending-release {
        padding: 15px;
        border-radius: 8px;
    }

    .shipping-confirmed {
        background-color: #e2f0fd;
        color: #0066cc;
    }

    .receipt-confirmed {
        background-color: #d4edda;
        color: #155724;
    }

    .payment-released {
        background-color: #d1ecf1;
        color: #0c5460;
    }

    .payment-pending-release {
        background-color: #fff3cd;
        color: #856404;
    }

    @media (max-width: 768px) {
        .item-details {
            flex-direction: column;
        }

        .item-image {
            flex: 0 0 100%;
            margin-right: 0;
            margin-bottom: 20px;
        }

        .status-progress {
            flex-direction: column;
        }

        .status-progress::before {
            display: none;
        }

        .status-step {
            margin-bottom: 20px;
            display: flex;
            align-items: center;
        }

        .step-number {
            margin: 0 15px 0 0;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // For nicer form validation feedback
        const forms = document.querySelectorAll('form');

        forms.forEach(form => {
            form.addEventListener('submit', function(event) {
                if (!form.checkValidity()) {
                    event.preventDefault();
                    event.stopPropagation();

                    // Find the first invalid input and focus it
                    const invalidInputs = form.querySelectorAll(':invalid');
                    if (invalidInputs.length > 0) {
                        invalidInputs[0].focus();
                    }
                }
                form.classList.add('was-validated');
            }, false);
        });
    });
</script>