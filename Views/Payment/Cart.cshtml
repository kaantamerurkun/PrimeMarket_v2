<style>
    .cart-container {
        margin-top: 30px;
    }

    .alert {
        padding: 12px 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .empty-cart {
        text-align: center;
        padding: 50px;
        background-color: #f8f9fa;
        border-radius: 10px;
    }

        .empty-cart i {
            color: #ddd;
            margin-bottom: 20px;
        }

        .empty-cart h2 {
            margin-bottom: 10px;
        }

        .empty-cart p {
            margin-bottom: 20px;
            color: #666;
        }

    .btn-browse {
        display: inline-block;
        padding: 10px 20px;
        background-color: #0066cc;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

        .btn-browse:hover {
            background-color: #0055b3;
        }

    .cart-items {
        margin-bottom: 20px;
    }

    .cart-item {
        display: flex;
        align-items: center;
        padding: 15px;
        margin-bottom: 15px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    .item-image {
        margin-right: 15px;
    }

        .item-image img {
            border-radius: 5px;
            object-fit: cover;
        }

    .item-details {
        flex: 1;
    }

        .item-details h3 {
            margin: 0 0 10px 0;
            font-size: 18px;
        }

    .seller {
        color: #666;
    }

    .stock-info {
        color: #28a745;
        font-size: 0.9em;
        margin-top: 5px;
    }

    .item-price {
        font-weight: bold;
        font-size: 18px;
        color: #0066cc;
        margin: 0 20px;
        min-width: 80px;
        text-align: center;
    }

    .item-quantity {
        display: flex;
        align-items: center;
        margin: 0 20px;
    }

    .quantity-btn {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 1px solid #ddd;
        background-color: #f8f9fa;
        font-size: 16px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
    }

        .quantity-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    .quantity-input {
        width: 40px;
        height: 30px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin: 0 5px;
        -moz-appearance: textfield;
    }

        .quantity-input::-webkit-inner-spin-button,
        .quantity-input::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

    .item-total {
        font-weight: bold;
        font-size: 18px;
        color: #28a745;
        margin: 0 20px;
        min-width: 80px;
        text-align: center;
    }

    .item-actions {
        display: flex;
        gap: 10px;
    }

    .btn-checkout {
        padding: 8px 15px;
        background-color: #0066cc;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
    }

        .btn-checkout:hover {
            background-color: #0055b3;
        }

    .btn-remove {
        padding: 8px 15px;
        background-color: #f0f0f0;
        color: #333;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-remove:hover {
            background-color: #e0e0e0;
        }

    .cart-summary {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
    }

    .summary-details {
        margin-bottom: 20px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }

        .summary-row.total {
            padding-top: 10px;
            border-top: 1px solid #ddd;
            font-weight: bold;
            font-size: 18px;
        }

    .btn-checkout-all {
        display: block;
        width: 100%;
        padding: 12px 0;
        background-color: #0066cc;
        color: white;
        text-align: center;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        font-weight: bold;
    }

        .btn-checkout-all:hover {
            background-color: #0055b3;
        }

    .error-message {
        color: #dc3545;
        font-size: 0.9em;
        margin-top: 5px;
        display: none;
    }

    @@media (max-width: 768px) {
        .cart-item {
            flex-direction: column;
            align-items: flex-start;
        }

        .item-image {
            margin-right: 0;
            margin-bottom: 10px;
        }

        .item-price, .item-quantity, .item-total {
            margin: 10px 0;
        }

        .item-actions {
            width: 100%;
            justify-content: space-between;
        }
    }
</style>
@model PrimeMarket.Models.ViewModel.CartViewModel
@{
    ViewData["Title"] = "Shopping Cart";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}

<div class="container" style="margin-top: 120px; margin-bottom: 50px;">
    <h1>Shopping Cart</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="cart-container">
        @if (Model.Items == null || Model.Items.Count == 0)
        {
            <div class="empty-cart">
                <i class="fas fa-shopping-cart fa-4x"></i>
                <h2>Your cart is empty</h2>
                <p>Browse listings and add items to your cart.</p>
                <a href="@Url.Action("User_MainPage", "User")" class="btn-browse">Browse Listings</a>
            </div>
        }
        else
        {
            <div class="cart-items">
                @foreach (var item in Model.Items)
                {
                    var initialQty = 1;          // if you store qty in session, pull it here

                    <div id="item-@item.BookmarkId"
                         class="cart-item"
                         data-id="@item.BookmarkId"
                         data-price="@item.Price"
                         data-max-stock="@(item.MaxStock ?? 0)">

                        <!-- thumbnail -->
                        <div class="item-image">
                            <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "/images/placeholder.png" : item.ImageUrl)"
                                 alt="@item.Title"
                                 width="100" height="100" />
                        </div>

                        <!-- title / seller -->
                        <div class="item-details flex-grow-1">
                            <h3>@item.Title</h3>
                            <p class="seller">Seller: @item.SellerName</p>
                            @if (item.MaxStock.HasValue)
                            {
                                <p class="stock-info">Available: @item.MaxStock</p>
                            }
                        </div>

                        <!-- unit price -->
                        <div class="item-price">@item.Price.ToString("C")</div>

                        <!-- quantity controls -->
                        <div class="item-quantity">
                            <button type="button"
                                    class="quantity-btn decrease-btn"
                                    data-id="@item.BookmarkId">
                                ‑
                            </button>

                            <span class="quantity-display">@initialQty</span>

                            <button type="button"
                                    class="quantity-btn increase-btn"
                                    data-id="@item.BookmarkId">
                                +
                            </button>
                        </div>

                        <!-- line total -->
                        <div class="item-total">
                            <span class="unit">@item.Price.ToString("C")</span>
                            × <span class="line-qty">@initialQty</span>
                            = <span class="line-total">@(@item.Price * initialQty).ToString("C")</span>
                        </div>

                        <!-- actions -->
                        <div class="item-actions">
                            <a class="btn-checkout"
                               href="@Url.Action("Checkout", new { listingId = item.ListingId, quantity = initialQty })">
                                Buy Now
                            </a>
                            <button type="button"
                                    class="btn-remove"
                                    data-id="@item.BookmarkId">
                                Remove
                            </button>
                        </div>

                        <!-- hidden qty for CheckoutMultiple POST -->
                        <input type="hidden"
                               name="Quantities"
                               value="@initialQty"
                               data-id="@item.BookmarkId" />
                    </div>
                }
            </div>


            <div class="cart-summary">
                <div class="summary-details">
                    <div class="summary-row">
                        <div class="summary-label">Subtotal (<span id="item-count">@Model.Items.Count</span> items)</div>
                        <div class="summary-value" id="subtotal">@Model.TotalPrice.ToString("C")</div>
                    </div>

                    <div class="summary-row total">
                        <div class="summary-label">Total</div>
                        <div class="summary-value" id="cart-total">@Model.TotalPrice.ToString("C")</div>
                    </div>
                </div>
                <a href="@Url.Action("CheckoutMultiple")" class="btn-checkout-all">Checkout All Items</a>
            </div>
        }
    </div>
</div>



<script>
    document.addEventListener('DOMContentLoaded', () => {

        const moneyFmt = new Intl.NumberFormat('tr-TR',
                        { style: 'currency', currency: 'TRY' });

        function recalcLine(row) {
            const unit   = parseFloat(row.dataset.price);
            const qty    = parseInt(row.querySelector('.quantity-display').textContent);
            const lineEl = row.querySelector('.line-total');
            const qtyEl  = row.querySelector('.line-qty');
            const hidden = row.querySelector('input[name="Quantities"]');

            const line = unit * qty;
            lineEl.textContent = moneyFmt.format(line);
            qtyEl.textContent  = qty;
            hidden.value       = qty;             // keep in sync for POST
        }

        function recalcCart() {
            let subtotal = 0, count = 0;
            document.querySelectorAll('.cart-item').forEach(row => {
                const unit = parseFloat(row.dataset.price);
                const qty  = parseInt(row.querySelector('.quantity-display').textContent);
                subtotal  += unit * qty;
                count     += qty;
            });

            document.getElementById('subtotal').textContent   = moneyFmt.format(subtotal);
            document.getElementById('cart-total').textContent = moneyFmt.format(subtotal);
            document.getElementById('item-count').textContent = count;
        }

        function clamp(row, qty) {
            const max = parseInt(row.dataset.maxStock);
            if (max && qty > max) return max;
            if (qty < 1) return 1;
            return qty;
        }

        // btn handlers
        document.querySelectorAll('.quantity-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const row  = document.getElementById('item-' + btn.dataset.id);
                const disp = row.querySelector('.quantity-display');
                let   qty  = parseInt(disp.textContent);

                qty += btn.classList.contains('increase-btn') ? 1 : -1;
                qty  = clamp(row, qty);

                disp.textContent = qty;
                recalcLine(row);
                recalcCart();
            });
        });

        // initialise
        document.querySelectorAll('.cart-item').forEach(recalcLine);
        recalcCart();

        /* ---- REMOVE BUTTON (unchanged) ---- */
        document.querySelectorAll('.btn-remove').forEach(btn => {
            btn.addEventListener('click', () => {
                const id   = btn.dataset.id;
                fetch('/Payment/RemoveFromCart', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `bookmarkId=${id}`
                })
                .then(r => r.json())
                .then(res => {
                    if (res.success) {
                        document.getElementById('item-' + id).remove();
                        recalcCart();
                        if (!document.querySelectorAll('.cart-item').length) location.reload();
                    } else alert(res.message);
                })
                .catch(() => alert('Error removing item.'));
            });
        });
    });
</script>
