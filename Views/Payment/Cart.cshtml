```csharp
@model PrimeMarket.Models.ViewModel.CartViewModel
@{
    ViewData["Title"] = "Shopping Cart";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}

<div class="container" style="margin-top: 120px; margin-bottom: 50px;">
    <h1>Shopping Cart</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="cart-container">
        @if (Model.Items == null || Model.Items.Count == 0)
        {
            <div class="empty-cart">
                <i class="fas fa-shopping-cart fa-4x"></i>
                <h2>Your cart is empty</h2>
                <p>Browse listings and add items to your cart.</p>
                <a href="@Url.Action("User_MainPage", "User")" class="btn-browse">Browse Listings</a>
            </div>
        }
        else
        {
            <div class="cart-items">
                @foreach (var item in Model.Items)
                {
                    <div class="cart-item" id="item-@item.BookmarkId" data-price="@item.Price">
                        <div class="item-image">
                            <img src="@(string.IsNullOrEmpty(item.ImageUrl) ? "/images/placeholder.png" : item.ImageUrl)"
                                 alt="@item.Title" width="100" height="100">
                        </div>
                        <div class="item-details">
                            <h3>@item.Title</h3>
                            <p class="seller">Seller: @item.SellerName</p>
                        </div>
                        <div class="item-price">@item.Price.ToString("C")</div>
                        <div class="item-quantity">
                            <button class="quantity-btn decrease-btn" data-id="@item.BookmarkId">-</button>
                            <input type="number" class="quantity-input" value="1" min="1" max="99" data-id="@item.BookmarkId">
                            <button class="quantity-btn increase-btn" data-id="@item.BookmarkId">+</button>
                        </div>
                        <div class="item-total">@item.Price.ToString("C")</div>
                        <div class="item-actions">
                            <a href="@Url.Action("Checkout", new { listingId = item.ListingId })" class="btn-checkout">
                                Buy Now
                            </a>
                            <button class="btn-remove" data-id="@item.BookmarkId">Remove</button>
                        </div>
                    </div>
                }
            </div>

            <div class="cart-summary">
                <div class="summary-details">
                    <div class="summary-row">
                        <div class="summary-label">Subtotal (@Model.Items.Count items)</div>
                        <div class="summary-value" id="subtotal">@Model.TotalPrice.ToString("C")</div>
                    </div>
                    <div class="summary-row total">
                        <div class="summary-label">Total</div>
                        <div class="summary-value" id="cart-total">@Model.TotalPrice.ToString("C")</div>
                    </div>
                </div>
                <a href="@Url.Action("CheckoutMultiple")" class="btn-checkout-all">Checkout All Items</a>
            </div>
        }
    </div>
</div>

<style>
    .cart-container {
        margin-top: 30px;
    }

    .alert {
        padding: 12px 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .empty-cart {
        text-align: center;
        padding: 50px;
        background-color: #f8f9fa;
        border-radius: 10px;
    }

        .empty-cart i {
            color: #ddd;
            margin-bottom: 20px;
        }

        .empty-cart h2 {
            margin-bottom: 10px;
        }

        .empty-cart p {
            margin-bottom: 20px;
            color: #666;
        }

    .btn-browse {
        display: inline-block;
        padding: 10px 20px;
        background-color: #0066cc;
        color: white;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

        .btn-browse:hover {
            background-color: #0055b3;
        }

    .cart-items {
        margin-bottom: 20px;
    }

    .cart-item {
        display: flex;
        align-items: center;
        padding: 15px;
        margin-bottom: 15px;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

    .item-image {
        margin-right: 15px;
    }

        .item-image img {
            border-radius: 5px;
            object-fit: cover;
        }

    .item-details {
        flex: 1;
    }

        .item-details h3 {
            margin: 0 0 10px 0;
            font-size: 18px;
        }

    .seller {
        color: #666;
    }

    .item-price {
        font-weight: bold;
        font-size: 18px;
        color: #0066cc;
        margin: 0 20px;
        min-width: 80px;
        text-align: center;
    }

    .item-quantity {
        display: flex;
        align-items: center;
        margin: 0 20px;
    }

    .quantity-btn {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        border: 1px solid #ddd;
        background-color: #f8f9fa;
        font-size: 16px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .quantity-input {
        width: 40px;
        height: 30px;
        text-align: center;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin: 0 5px;
        -moz-appearance: textfield;
    }

        .quantity-input::-webkit-inner-spin-button,
        .quantity-input::-webkit-outer-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

    .item-total {
        font-weight: bold;
        font-size: 18px;
        color: #28a745;
        margin: 0 20px;
        min-width: 80px;
        text-align: center;
    }

    .item-actions {
        display: flex;
        gap: 10px;
    }

    .btn-checkout {
        padding: 8px 15px;
        background-color: #0066cc;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
    }

        .btn-checkout:hover {
            background-color: #0055b3;
        }

    .btn-remove {
        padding: 8px 15px;
        background-color: #f0f0f0;
        color: #333;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .btn-remove:hover {
            background-color: #e0e0e0;
        }

    .cart-summary {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
    }

    .summary-details {
        margin-bottom: 20px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
    }

        .summary-row.total {
            padding-top: 10px;
            border-top: 1px solid #ddd;
            font-weight: bold;
            font-size: 18px;
        }

    .btn-checkout-all {
        display: block;
        width: 100%;
        padding: 12px 0;
        background-color: #0066cc;
        color: white;
        text-align: center;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        font-weight: bold;
    }

        .btn-checkout-all:hover {
            background-color: #0055b3;
        }

    @@media (max-width: 768px) {
        .cart-item

    {
        flex-direction: column;
        align-items: flex-start;
    }

    .item-image {
        margin-right: 0;
        margin-bottom: 10px;
    }

    .item-price, .item-quantity, .item-total {
        margin: 10px 0;
    }

    .item-actions {
        width: 100%;
        justify-content: space-between;
    }

    }</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize item quantities and totals
        const cartItems = document.querySelectorAll('.cart-item');
        let totalPrice = 0;

        cartItems.forEach(item => {
            updateItemTotal(item);
        });

        updateCartTotals();

        // Handle quantity changes
        const quantityInputs = document.querySelectorAll('.quantity-input');
        quantityInputs.forEach(input => {
            input.addEventListener('change', function() {
                const itemId = this.getAttribute('data-id');
                const cartItem = document.getElementById(`item-${itemId}`);

                // Validate input value
                if (this.value < 1) this.value = 1;
                if (this.value > 99) this.value = 99;

                updateItemTotal(cartItem);
                updateCartTotals();
            });
        });

        // Handle decrease button clicks
        const decreaseButtons = document.querySelectorAll('.decrease-btn');
        decreaseButtons.forEach(button => {
            button.addEventListener('click', function() {
                const itemId = this.getAttribute('data-id');
                const input = document.querySelector(`.quantity-input[data-id="${itemId}"]`);
                const currentValue = parseInt(input.value);

                if (currentValue > 1) {
                    input.value = currentValue - 1;
                    const cartItem = document.getElementById(`item-${itemId}`);
                    updateItemTotal(cartItem);
                    updateCartTotals();
                }
            });
        });

        // Handle increase button clicks
        const increaseButtons = document.querySelectorAll('.increase-btn');
        increaseButtons.forEach(button => {
            button.addEventListener('click', function() {
                const itemId = this.getAttribute('data-id');
                const input = document.querySelector(`.quantity-input[data-id="${itemId}"]`);
                const currentValue = parseInt(input.value);

                if (currentValue < 99) {
                    input.value = currentValue + 1;
                    const cartItem = document.getElementById(`item-${itemId}`);
                    updateItemTotal(cartItem);
                    updateCartTotals();
                }
            });
        });

        // Handle remove button clicks
        const removeButtons = document.querySelectorAll('.btn-remove');
        removeButtons.forEach(button => {
            button.addEventListener('click', function() {
                const bookmarkId = this.getAttribute('data-id');
                removeCartItem(bookmarkId);
            });
        });

        // Function to update an item's total price
        function updateItemTotal(item) {
            const price = parseFloat(item.getAttribute('data-price'));
            const quantityInput = item.querySelector('.quantity-input');
            const quantity = parseInt(quantityInput.value);
            const itemTotal = item.querySelector('.item-total');

            const total = price * quantity;
            itemTotal.textContent = formatCurrency(total);
        }

        // Function to update cart totals
        function updateCartTotals() {
            let subtotal = 0;
            let itemCount = 0;

            cartItems.forEach(item => {
                const price = parseFloat(item.getAttribute('data-price'));
                const quantityInput = item.querySelector('.quantity-input');
                const quantity = parseInt(quantityInput.value);

                subtotal += price * quantity;
                itemCount += quantity;
            });

            const subtotalElement = document.getElementById('subtotal');
            const totalElement = document.getElementById('cart-total');
            const summaryLabel = document.querySelector('.summary-row .summary-label');

            subtotalElement.textContent = formatCurrency(subtotal);
            totalElement.textContent = formatCurrency(subtotal);
            summaryLabel.textContent = `Subtotal (${itemCount} ${itemCount === 1 ? 'item' : 'items'})`;
        }

        // Function to remove item from cart
        function removeCartItem(bookmarkId) {
            fetch('/Payment/RemoveFromCart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `bookmarkId=${bookmarkId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Remove item from UI
                    const itemElement = document.getElementById(`item-${bookmarkId}`);
                    if (itemElement) {
                        itemElement.remove();
                    }

                    // Check if cart is empty
                    const remainingItems = document.querySelectorAll('.cart-item');
                    if (remainingItems.length === 0) {
                        // Show empty cart message
                        const cartContainer = document.querySelector('.cart-container');
                        cartContainer.innerHTML = `
                            <div class="empty-cart">
                                <i class="fas fa-shopping-cart fa-4x"></i>
                                <h2>Your cart is empty</h2>
                                <p>Browse listings and add items to your cart.</p>
                                <a href="/User/User_MainPage" class="btn-browse">Browse Listings</a>
                            </div>
                        `;
                    } else {
                        // Update total
                        updateCartTotals();
                    }
                } else {
                    alert(data.message);
                }
            })
            .catch(error => {
                console.error('Error removing item from cart:', error);
                alert('Error removing item from cart. Please try again.');
            });
        }

        // Function to format currency
        function formatCurrency(amount) {
            return new Intl.NumberFormat('tr-TR', { style: 'currency', currency: 'TRY' }).format(amount);
        }
    });
</script>