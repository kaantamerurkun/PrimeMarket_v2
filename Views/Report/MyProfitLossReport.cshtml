@model PrimeMarket.Models.ViewModel.ProfitLossReportViewModel
@using Newtonsoft.Json
@{
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
    ViewData["Title"] = "Profit & Loss Report";
}

<div class="container" style="margin-top: 120px; margin-bottom: 50px;">
    <div class="report-header">
        <h1>Profit & Loss Report</h1>
        <div class="report-actions">
            <div class="time-filter">
                <label for="timeRange">Time Range:</label>
                <select id="timeRange" onchange="changeTimeRange(this.value)">
                    <option value="all" selected="@(Model.TimeRange == "all")">All Time</option>
                    <option value="week" selected="@(Model.TimeRange == "week")">Last 7 Days</option>
                    <option value="month" selected="@(Model.TimeRange == "month")">Last 30 Days</option>
                    <option value="quarter" selected="@(Model.TimeRange == "quarter")">Last 3 Months</option>
                    <option value="year" selected="@(Model.TimeRange == "year")">Last 12 Months</option>
                </select>
            </div>
            <button id="refreshButton" class="btn-refresh" onclick="window.location.reload()">
                <i class="fas fa-sync-alt"></i> Refresh Data
            </button>
        </div>
    </div>

    <div class="period-label">
        <p>Showing data for: <strong>@Model.PeriodLabel</strong></p>
        <p class="last-updated">Last updated: <span id="lastUpdatedTime">@DateTime.Now.ToString("MMM dd, yyyy HH:mm:ss")</span></p>
    </div>

    <div class="summary-cards">
        <div class="card">
            <div class="card-title">Total Revenue</div>
            <div class="card-value positive">@Model.TotalRevenue.ToString("C")</div>
        </div>
        <div class="card">
            <div class="card-title">Total Items Sold</div>
            <div class="card-value neutral">@Model.TotalSales</div>
        </div>
        <div class="card">
            <div class="card-title">Average Price</div>
            <div class="card-value neutral">@Model.AveragePrice.ToString("C")</div>
        </div>
    </div>

    <div class="chart-container">
        <h2>Revenue Over Time</h2>
        <canvas id="revenueChart" width="1000" height="400"></canvas>
    </div>

    @if (Model.TopCategories != null && Model.TopCategories.Any())
    {
        <div class="top-categories">
            <h2>Top Selling Categories</h2>
            <div class="categories-grid">
                @foreach (var category in Model.TopCategories)
                {
                    <div class="category-card">
                        <h3>@category.Category</h3>
                        <p class="category-count">@category.Count items sold</p>
                        <p class="category-revenue">@category.Revenue.ToString("C")</p>
                        <div class="percentage-bar">
                            <div class="fill" style="width: @Math.Min(100, category.Percentage)%;"></div>
                        </div>
                        <p class="percentage">@category.Percentage.ToString("0.0")%</p>
                    </div>
                }
            </div>
        </div>
    }

    @if (Model.RecentSales != null && Model.RecentSales.Any())
    {
        <div class="recent-sales">
            <h2>Recent Sales</h2>
            <div class="table-responsive">
                <table class="sales-table">
                    <thead>
                        <tr>
                            <th>Listing</th>
                            <th>Date</th>
                            <th>Buyer</th>
                            <th>Quantity</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sale in Model.RecentSales)
                        {
                            <tr>
                                <td class="listing-info">
                                    <a href="@Url.Action("Details", "Listing", new { id = sale.ListingId })">
                                        @sale.Listing.Title
                                    </a>
                                </td>
                                <td>@(sale.CreatedAt?.ToString("MMM dd, yyyy") ?? "N/A")</td>
                                <td>@sale.Buyer.FirstName @sale.Buyer.LastName</td>
                                <td>@sale.Quantity</td>
                                <td class="amount">@sale.Amount.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="no-sales">
            <p>No sales data available for the selected time period.</p>
        </div>
    }
</div>

<style>
    .listing-info a {
        margin: 0 0 10px 0;
        font-size: 16px;
        word-break: break-word;
        overflow-wrap: break-word;
        white-space: normal;
        max-width: 100%;
    }

    .logo img {
        width: 120px;
        height: 50px;
        object-fit: cover;
        border-radius: 8px;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .report-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .report-actions {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .time-filter select {
        padding: 8px 16px;
        border: 1px solid #ddd;
        border-radius: 20px;
        outline: none;
        cursor: pointer;
    }

    .btn-refresh {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 8px 16px;
        border: 1px solid #0066cc;
        border-radius: 20px;
        background-color: #fff;
        color: #0066cc;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

        .btn-refresh:hover {
            background-color: #0066cc;
            color: #fff;
        }

    .period-label {
        margin-bottom: 20px;
        font-size: 16px;
        color: #666;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .last-updated {
        font-size: 14px;
        color: #888;
    }

    .summary-cards {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        flex: 1;
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        text-align: center;
    }

    .card-title {
        font-size: 16px;
        color: #666;
        margin-bottom: 10px;
    }

    .card-value {
        font-size: 24px;
        font-weight: bold;
    }

    .positive {
        color: #28a745;
    }

    .negative {
        color: #dc3545;
    }

    .neutral {
        color: #0066cc;
    }

    .chart-container {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        margin-bottom: 30px;
    }

        .chart-container h2 {
            margin-top: 0;
            margin-bottom: 20px;
            text-align: center;
            font-size: 20px;
        }

    .top-categories {
        margin-bottom: 30px;
    }

        .top-categories h2 {
            margin-bottom: 20px;
            font-size: 20px;
        }

    .categories-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 20px;
    }

    .category-card {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

        .category-card h3 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
        }

    .category-count {
        color: #666;
        margin-bottom: 5px;
        font-size: 14px;
    }

    .category-revenue {
        color: #0066cc;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .percentage-bar {
        height: 10px;
        background-color: #f0f0f0;
        border-radius: 5px;
        overflow: hidden;
        margin-bottom: 5px;
    }

    .fill {
        height: 100%;
        background-color: #0066cc;
    }

    .percentage {
        text-align: right;
        font-size: 12px;
        color: #666;
    }

    .recent-sales {
        margin-bottom: 30px;
    }

        .recent-sales h2 {
            margin-bottom: 20px;
            font-size: 20px;
        }

    .table-responsive {
        overflow-x: auto;
    }

    .sales-table {
        width: 100%;
        border-collapse: collapse;
    }

        .sales-table th, .sales-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #f0f0f0;
        }

        .sales-table th {
            background-color: #f8f9fa;
            font-weight: bold;
            color: #333;
        }

        .sales-table tbody tr:hover {
            background-color: #f8f9fa;
        }

    .listing-info a {
        color: #0066cc;
        text-decoration: none;
    }

        .listing-info a:hover {
            text-decoration: underline;
        }

    .amount {
        font-weight: bold;
        color: #0066cc;
    }

    .no-sales {
        background-color: #f8f9fa;
        padding: 30px;
        text-align: center;
        border-radius: 10px;
        color: #666;
    }

    @@media (max-width: 768px) {
        .summary-cards

    {
        flex-direction: column;
        gap: 10px;
    }

    .categories-grid {
        grid-template-columns: 1fr;
    }

    .report-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
    }

    .report-actions {
        width: 100%;
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }

    .time-filter {
        width: 100%;
    }

        .time-filter select {
            width: 100%;
        }

    .btn-refresh {
        width: 100%;
        justify-content: center;
    }

    .period-label {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
    }

    }

    .chart-container canvas {
        width: 100%;
        display: block;
    }
</style>

<script>
    function changeTimeRange(range) {
        window.location.href = '@Url.Action("MyProfitLossReport", "Report")?timeRange=' + range;
    }

    document.addEventListener('DOMContentLoaded', function () {
        const rawChartData = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.ChartData ?? new List<PrimeMarket.Models.ViewModel.ChartDataPoint>()).Replace("'", "\\'"))');

        if (!Array.isArray(rawChartData)) {
            console.error("Chart data is not an array:", rawChartData);
            return;
        }

        const labels = rawChartData.map(d => d.Label);
        const values = rawChartData.map(d => d.Value);

        if (!labels.length || !values.length) {
            const canvas = document.getElementById('revenueChart');
            const ctx = canvas.getContext('2d');
            ctx.font = "16px Arial";
            ctx.fillStyle = "#888";
            ctx.fillText("No chart data available", 20, 50);
            return;
        }

        // Handle edge cases - ensure we have at least 2 data points for line chart
        if (labels.length === 1) {
            // If only one data point, duplicate it to create a flat line
            labels.push(labels[0] + " (copy)");
            values.push(values[0]);
        }

        const canvas = document.getElementById('revenueChart');
        const ctx = canvas.getContext('2d');
        const width = canvas.width = canvas.offsetWidth;
        const height = canvas.height = 400;

        const margin = { top: 40, right: 30, bottom: 50, left: 60 };
        const chartWidth = width - margin.left - margin.right;
        const chartHeight = height - margin.top - margin.bottom;

        // Handle case where all values are zero
        const maxValue = Math.max(...values) || 1; // Use 1 as default if all are zero
        const stepX = chartWidth / Math.max(1, (values.length - 1)); // Avoid division by zero
        const stepY = chartHeight / maxValue;

        ctx.clearRect(0, 0, width, height);

        // Axes
        ctx.beginPath();
        ctx.moveTo(margin.left, margin.top);
        ctx.lineTo(margin.left, height - margin.bottom);
        ctx.lineTo(width - margin.right, height - margin.bottom);
        ctx.strokeStyle = "#888";
        ctx.lineWidth = 1;
        ctx.stroke();

        // Y axis labels
        ctx.fillStyle = "#444";
        ctx.textAlign = "right";
        ctx.font = "12px sans-serif";
        const numTicks = 5;
        for (let i = 0; i <= numTicks; i++) {
            const yVal = maxValue * (i / numTicks);
            const y = height - margin.bottom - yVal * stepY;
            ctx.beginPath();
            ctx.moveTo(margin.left - 5, y);
            ctx.lineTo(margin.left, y);
            ctx.stroke();
            ctx.fillText("₺" + yVal.toFixed(0), margin.left - 10, y + 4);
        }

        // X axis labels - limit labels if there are too many
        ctx.textAlign = "center";
        const maxVisibleLabels = 12;
        const labelStep = labels.length > maxVisibleLabels ? Math.ceil(labels.length / maxVisibleLabels) : 1;

        for (let i = 0; i < labels.length; i += labelStep) {
            const x = margin.left + i * stepX;
            const y = height - margin.bottom + 15;
            // Rotate labels if they might overlap
            if (labels.length > 6) {
                ctx.save();
                ctx.translate(x, y + 10);
                ctx.rotate(Math.PI / 6); // 30 degrees
                ctx.fillText(labels[i], 0, 0);
                ctx.restore();
            } else {
                ctx.fillText(labels[i], x, y + 10);
            }
        }

        // Line
        if (values.length > 0) {
            ctx.beginPath();
            for (let i = 0; i < values.length; i++) {
                const x = margin.left + i * stepX;
                const y = height - margin.bottom - (values[i] * stepY || 0); // Protect against NaN
                if (i === 0) ctx.moveTo(x, y);
                else ctx.lineTo(x, y);
            }
            ctx.strokeStyle = "#0066cc";
            ctx.lineWidth = 2;
            ctx.stroke();

            // Points
            ctx.fillStyle = "#0066cc";
            for (let i = 0; i < values.length; i++) {
                const x = margin.left + i * stepX;
                const y = height - margin.bottom - (values[i] * stepY || 0); // Protect against NaN
                ctx.beginPath();
                ctx.arc(x, y, 4, 0, 2 * Math.PI);
                ctx.fill();
            }
        } else {
            // No data message
            ctx.font = "16px Arial";
            ctx.fillStyle = "#888";
            ctx.textAlign = "center";
            ctx.fillText("No revenue data available for this period", width / 2, height / 2);
        }
    });
</script>