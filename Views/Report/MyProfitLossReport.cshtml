@model PrimeMarket.Models.ViewModel.ProfitLossReportViewModel
@using Newtonsoft.Json
@{
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
    ViewData["Title"] = "Profit & Loss Report";
}

<div class="container" style="margin-top: 120px; margin-bottom: 50px;">
    <div class="report-header">
        <h1>Profit & Loss Report</h1>
        <div class="report-actions">
            <div class="time-filter">
                <label for="timeRange">Time Range:</label>
                <select id="timeRange" onchange="changeTimeRange(this.value)">
                    <option value="all">All Time</option>
                    <option value="week">Last 7 Days</option>
                    <option value="month">Last 30 Days</option>
                    <option value="quarter">Last 3 Months</option>
                    <option value="year">Last 12 Months</option>
                </select>
            </div>
            <button id="refreshButton" class="btn-refresh" onclick="refreshData()">
                <i class="fas fa-sync-alt"></i> Refresh Data
            </button>
        </div>
    </div>

    <div class="period-label">
        <p>Showing data for: <strong>@Model.PeriodLabel</strong></p>
        <p class="last-updated">Last updated: <span id="lastUpdatedTime">@DateTime.Now.ToString("MMM dd, yyyy HH:mm:ss")</span></p>
    </div>

    <div class="summary-cards">
        <div class="card">
            <div class="card-title">Total Revenue</div>
            <div class="card-value positive">@Model.TotalRevenue.ToString("C")</div>
        </div>
        <div class="card">
            <div class="card-title">Total Items Sold</div>
            <div class="card-value neutral">@Model.TotalSales</div>
        </div>
        <div class="card">
            <div class="card-title">Average Price</div>
            <div class="card-value neutral">@Model.AveragePrice.ToString("C")</div>
        </div>
    </div>

    <div class="chart-container">
        <h2>Revenue Over Time</h2>
        <canvas id="revenueChart" width="1000" height="400"></canvas>
    </div>

    @if (Model.TopCategories != null && Model.TopCategories.Any())
    {
        <div class="top-categories">
            <h2>Top Selling Categories</h2>
            <div class="categories-grid">
                @foreach (var category in Model.TopCategories)
                {
                    <div class="category-card">
                        <h3>@category.Category</h3>
                        <p class="category-count">@category.Count items sold</p>
                        <p class="category-revenue">@category.Revenue.ToString("C")</p>
                        <div class="percentage-bar">
                            <div class="fill" style="width: @Math.Min(100, category.Percentage)%;"></div>
                        </div>
                        <p class="percentage">@category.Percentage.ToString("0.0")%</p>
                    </div>
                }
            </div>
        </div>
    }

    @if (Model.RecentSales != null && Model.RecentSales.Any())
    {
        <div class="recent-sales">
            <h2>Recent Sales</h2>
            <div class="table-responsive">
                <table class="sales-table">
                    <thead>
                        <tr>
                            <th>Listing</th>
                            <th>Date</th>
                            <th>Buyer</th>
                            <th>Quantity</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sale in Model.RecentSales)
                        {
                            <tr>
                                <td class="listing-info">
                                    <a href="@Url.Action("Details", "Listing", new { id = sale.ListingId })">
                                        @sale.Listing.Title
                                    </a>
                                </td>
                                <td>@(sale.CreatedAt?.ToString("MMM dd, yyyy") ?? "N/A")</td>
                                <td>@sale.Buyer.FirstName @sale.Buyer.LastName</td>
                                <td>@sale.Quantity</td>
                                <td class="amount">@sale.Amount.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
    else
    {
        <div class="no-sales">
            <p>No sales data available for the selected time period.</p>
        </div>
    }
</div>

<style>
    .listing-info a {
        margin: 0 0 10px 0;
        font-size: 16px;
        word-break: break-word;
        overflow-wrap: break-word;
        white-space: normal;
        max-width: 100%;
    }

    .logo img {
        width: 120px;
        height: 50px;
        object-fit: cover;
        border-radius: 8px;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .report-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .report-actions {
        display: flex;
        align-items: center;
        gap: 15px;
    }

    .time-filter select {
        padding: 8px 16px;
        border: 1px solid #ddd;
        border-radius: 20px;
        outline: none;
        cursor: pointer;
    }

    .btn-refresh {
        display: flex;
        align-items: center;
        gap: 6px;
        padding: 8px 16px;
        border: 1px solid #0066cc;
        border-radius: 20px;
        background-color: #fff;
        color: #0066cc;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }

        .btn-refresh:hover {
            background-color: #0066cc;
            color: #fff;
        }

    .period-label {
        margin-bottom: 20px;
        font-size: 16px;
        color: #666;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .last-updated {
        font-size: 14px;
        color: #888;
    }

    .summary-cards {
        display: flex;
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        flex: 1;
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        text-align: center;
    }

    .card-title {
        font-size: 16px;
        color: #666;
        margin-bottom: 10px;
    }

    .card-value {
        font-size: 24px;
        font-weight: bold;
    }

    .positive {
        color: #28a745;
    }

    .negative {
        color: #dc3545;
    }

    .neutral {
        color: #0066cc;
    }

    .chart-container {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        margin-bottom: 30px;
    }

        .chart-container h2 {
            margin-top: 0;
            margin-bottom: 20px;
            text-align: center;
            font-size: 20px;
        }

    .top-categories {
        margin-bottom: 30px;
    }

        .top-categories h2 {
            margin-bottom: 20px;
            font-size: 20px;
        }

    .categories-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 20px;
    }

    .category-card {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }

        .category-card h3 {
            margin-top: 0;
            margin-bottom: 10px;
            font-size: 16px;
        }

    .category-count {
        color: #666;
        margin-bottom: 5px;
        font-size: 14px;
    }

    .category-revenue {
        color: #0066cc;
        font-weight: bold;
        margin-bottom: 10px;
    }

    .percentage-bar {
        height: 10px;
        background-color: #f0f0f0;
        border-radius: 5px;
        overflow: hidden;
        margin-bottom: 5px;
    }

    .fill {
        height: 100%;
        background-color: #0066cc;
    }

    .percentage {
        text-align: right;
        font-size: 12px;
        color: #666;
    }

    .recent-sales {
        margin-bottom: 30px;
    }

        .recent-sales h2 {
            margin-bottom: 20px;
            font-size: 20px;
        }

    .table-responsive {
        overflow-x: auto;
    }

    .sales-table {
        width: 100%;
        border-collapse: collapse;
    }

        .sales-table th, .sales-table td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #f0f0f0;
        }

        .sales-table th {
            background-color: #f8f9fa;
            font-weight: bold;
            color: #333;
        }

        .sales-table tbody tr:hover {
            background-color: #f8f9fa;
        }

    .listing-info a {
        color: #0066cc;
        text-decoration: none;
    }

        .listing-info a:hover {
            text-decoration: underline;
        }

    .amount {
        font-weight: bold;
        color: #0066cc;
    }

    .no-sales {
        background-color: #f8f9fa;
        padding: 30px;
        text-align: center;
        border-radius: 10px;
        color: #666;
    }

    /* Ensure chart is responsive */
    .chart-container {
        position: relative;
        width: 100%;
        height: auto;
    }

        .chart-container canvas {
            width: 100% !important;
            height: auto !important;
            display: block;
        }

    @@media (max-width: 768px) {
        .summary-cards {
            flex-direction: column;
            gap: 10px;
        }

        .categories-grid {
            grid-template-columns: 1fr;
        }

        .report-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 15px;
        }

        .report-actions {
            width: 100%;
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        .time-filter {
            width: 100%;
        }

            .time-filter select {
                width: 100%;
            }

        .btn-refresh {
            width: 100%;
            justify-content: center;
        }

        .period-label {
            flex-direction: column;
            align-items: flex-start;
            gap: 5px;
        }
    }
</style>

<script>
    // This function updates the time range and loads fresh data
    function changeTimeRange(range) {
        // Show loading indicator or disable the select while loading
        document.getElementById('timeRange').disabled = true;
        document.getElementById('refreshButton').disabled = true;

        // Add a small visual cue to show loading
        document.getElementById('lastUpdatedTime').textContent = "Loading...";

        // Make the HTTP request to get fresh data
        window.location.href = '@Url.Action("MyProfitLossReport", "Report")?timeRange=' + range;
    }

    // This function refreshes the current time range
    function refreshData() {
        const currentTimeRange = document.getElementById('timeRange').value;
        document.getElementById('refreshButton').disabled = true;
        document.getElementById('lastUpdatedTime').textContent = "Loading...";

        // Make the HTTP request with cache-busting parameter
        window.location.href = '@Url.Action("MyProfitLossReport", "Report")?timeRange=' + currentTimeRange + '&t=' + new Date().getTime();
    }

    // Function to handle window resize events
    function handleResize() {
        const canvas = document.getElementById('revenueChart');
        if (!canvas) return;

        // Clear previous chart
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Redraw chart with new dimensions
        drawChart();
    }

    // Function to draw the chart
    function drawChart() {
        const canvas = document.getElementById('revenueChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');

        // Get the container width for responsive sizing
        const containerWidth = canvas.parentElement.clientWidth;
        // Set canvas dimensions based on container size
        canvas.width = containerWidth - 40; // Subtract padding
        // Maintain a reasonable aspect ratio
        canvas.height = Math.min(400, Math.max(250, containerWidth * 0.4));

        const width = canvas.width; // Define width here to use throughout the function
        const height = canvas.height; // Define height here to use throughout the function

        const rawChartData = JSON.parse('@Html.Raw(JsonConvert.SerializeObject(Model.ChartData ?? new List<PrimeMarket.Models.ViewModel.ChartDataPoint>()).Replace("'", "\\'"))');

        if (!Array.isArray(rawChartData) || rawChartData.length === 0) {
            // No data case
            ctx.font = "16px Calibri";
            ctx.fillStyle = "#888";
            ctx.textAlign = "center";
            ctx.fillText("No revenue data available for this period", width / 2, height / 2);
            return;
        }

        const labels = rawChartData.map(d => d.Label);
        const values = rawChartData.map(d => d.Value);

        // Dynamic margin calculation based on data and canvas size
        const margin = calculateMargins(canvas, labels, values);

        const chartWidth = width - margin.left - margin.right;
        const chartHeight = height - margin.top - margin.bottom;

        // Calculate step sizes based on data density
        const stepX = calculateStepX(chartWidth, labels.length);

        // Find max value with padding for better visualization
        const maxValue = calculateMaxValue(values);
        const stepY = chartHeight / maxValue;

        // Clear canvas
        ctx.clearRect(0, 0, width, height);

        // Draw axes
        drawAxes(ctx, margin, height, width);

        // Draw Y axis labels and grid lines
        drawYAxisLabels(ctx, margin, height, maxValue);

        // Draw X axis labels
        drawXAxisLabels(ctx, margin, height, labels, stepX);

        // Draw data line and points
        drawDataLine(ctx, margin, height, values, labels, stepX, stepY);
    }

    // Calculate dynamic margins based on data and canvas size
    function calculateMargins(canvas, labels, values) {
        // Base margins
        const margin = { top: 30, right: 30, bottom: 50, left: 60 };

        // Adjust left margin based on maximum value (for y-axis labels)
        const maxValue = Math.max(...values, 1);
        const maxValueDigits = Math.floor(Math.log10(maxValue)) + 1;
        margin.left = Math.max(60, 40 + (maxValueDigits * 8)); // More digits = more space

        // Adjust bottom margin based on label length
        const maxLabelLength = Math.max(...labels.map(l => l.length));
        const isRotated = labels.length > 6 || maxLabelLength > 8;
        margin.bottom = isRotated ? 70 : 50; // More space for rotated labels

        return margin;
    }

    // Calculate step size for X axis based on canvas width and number of points
    function calculateStepX(chartWidth, numPoints) {
        // If only one point, place it in the middle
        if (numPoints <= 1) return chartWidth;

        return chartWidth / (numPoints - 1);
    }

    // Calculate maximum value for Y axis with some padding for better visualization
    function calculateMaxValue(values) {
        // Find the maximum value
        const rawMax = Math.max(...values, 1); // Default to 1 if all values are 0 or array is empty

        // Add 10% padding to the top for better visualization
        const withPadding = rawMax * 1.1;

        // Round to a nice number for better tick marks
        const magnitude = Math.pow(10, Math.floor(Math.log10(withPadding)));
        return Math.ceil(withPadding / magnitude) * magnitude;
    }

    // Draw X and Y axes
    function drawAxes(ctx, margin, height, width) {
        ctx.beginPath();
        ctx.moveTo(margin.left, margin.top);
        ctx.lineTo(margin.left, height - margin.bottom);
        ctx.lineTo(width - margin.right, height - margin.bottom);
        ctx.strokeStyle = "#888";
        ctx.lineWidth = 1;
        ctx.stroke();
    }

    // Draw Y axis labels and grid lines
    function drawYAxisLabels(ctx, margin, height, maxValue) {
        const width = ctx.canvas.width; // Get width from canvas context

        ctx.fillStyle = "#444";
        ctx.textAlign = "right";
        ctx.font = "12px sans-serif";

        // Determine optimal number of ticks based on chart height
        const chartHeight = height - margin.top - margin.bottom;
        const pixelsPerTick = 40; // Aim for approximately this many pixels between ticks
        const numTicks = Math.max(2, Math.min(10, Math.floor(chartHeight / pixelsPerTick)));

        // Draw y-axis ticks and grid lines
        for (let i = 0; i <= numTicks; i++) {
            const yVal = maxValue * (i / numTicks);
            const y = height - margin.bottom - (yVal / maxValue) * (height - margin.top - margin.bottom);

            // Draw tick mark
            ctx.beginPath();
            ctx.moveTo(margin.left - 5, y);
            ctx.lineTo(margin.left, y);
            ctx.stroke();

            // Draw grid line
            ctx.beginPath();
            ctx.moveTo(margin.left, y);
            ctx.lineTo(width - margin.right, y);
            ctx.strokeStyle = "#f0f0f0";
            ctx.stroke();
            ctx.strokeStyle = "#888"; // Reset for ticks

            // Draw label
            // Format currency with appropriate number of decimal places
            const formatted = new Intl.NumberFormat('tr-TR', {
                style: 'currency',
                currency: 'TRY',
                minimumFractionDigits: 0,
                maximumFractionDigits: yVal < 10 ? 2 : yVal < 100 ? 1 : 0
            }).format(yVal);

            ctx.fillText(formatted, margin.left - 10, y + 4);
        }
    }

    // Draw X axis labels
    function drawXAxisLabels(ctx, margin, height, labels, stepX) {
        const width = ctx.canvas.width; // Get width from canvas context

        ctx.textAlign = "center";
        ctx.fillStyle = "#444";

        // Determine optimal label frequency
        const maxVisibleLabels = Math.min(labels.length, Math.floor((width - margin.left - margin.right) / 80));
        const labelStep = labels.length > maxVisibleLabels ? Math.ceil(labels.length / maxVisibleLabels) : 1;

        // Check if we need to rotate labels (if they're long or there are many)
        const needsRotation = labels.length > 6 || labels.some(label => label.length > 8);

        for (let i = 0; i < labels.length; i += labelStep) {
            const x = margin.left + i * stepX;
            const y = height - margin.bottom + 15;

            // Draw tick mark
            ctx.beginPath();
            ctx.moveTo(x, height - margin.bottom);
            ctx.lineTo(x, height - margin.bottom + 5);
            ctx.strokeStyle = "#888";
            ctx.stroke();

            // Draw label
            if (needsRotation) {
                ctx.save();
                ctx.translate(x, y + 10);
                ctx.rotate(Math.PI / 6); // 30 degrees
                ctx.fillText(labels[i], 0, 0);
                ctx.restore();
            } else {
                ctx.fillText(labels[i], x, y + 10);
            }
        }
    }

    // Draw the data line and points
    function drawDataLine(ctx, margin, height, values, labels, stepX, stepY) {
        const width = ctx.canvas.width; // Get width from canvas context

        if (values.length <= 0) return;

        // Draw line connecting data points
        ctx.beginPath();

        for (let i = 0; i < values.length; i++) {
            const x = margin.left + i * stepX;
            const y = height - margin.bottom - (values[i] * stepY || 0); // Protect against NaN

            if (i === 0) ctx.moveTo(x, y);
            else ctx.lineTo(x, y);
        }

        ctx.strokeStyle = "#0066cc";
        ctx.lineWidth = 2;
        ctx.stroke();

        // Add gradient fill under the line
        ctx.lineTo(margin.left + (values.length - 1) * stepX, height - margin.bottom);
        ctx.lineTo(margin.left, height - margin.bottom);
        ctx.closePath();

        // Create gradient
        const gradient = ctx.createLinearGradient(0, margin.top, 0, height - margin.bottom);
        gradient.addColorStop(0, "rgba(0, 102, 204, 0.2)");
        gradient.addColorStop(1, "rgba(0, 102, 204, 0.05)");
        ctx.fillStyle = gradient;
        ctx.fill();

        // Draw data points
        ctx.fillStyle = "#0066cc";

        for (let i = 0; i < values.length; i++) {
            const x = margin.left + i * stepX;
            const y = height - margin.bottom - (values[i] * stepY || 0);

            // Draw point
            ctx.beginPath();
            ctx.arc(x, y, 4, 0, 2 * Math.PI);
            ctx.fill();

            // Optional: Add stroke to data points for better visibility
            ctx.strokeStyle = "#fff";
            ctx.lineWidth = 1.5;
            ctx.stroke();
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Set the correct selected option based on the current model
        const timeRangeSelect = document.getElementById('timeRange');
        const currentTimeRange = '@Model.TimeRange';
        if (timeRangeSelect && currentTimeRange) {
            // Set the selected option
            for (let i = 0; i < timeRangeSelect.options.length; i++) {
                if (timeRangeSelect.options[i].value === currentTimeRange) {
                    timeRangeSelect.options[i].selected = true;
                    break;
                }
            }
        }

        // Initial draw
        drawChart();

        // Add resize listener to redraw chart when window size changes
        window.addEventListener('resize', handleResize);
    });
</script>