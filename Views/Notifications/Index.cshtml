@Html.AntiForgeryToken()
@model List<PrimeMarket.Models.Notification>
@{
    ViewData["Title"] = "All Notifications";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}
<div class="center-wrapper">
    <div class="container" style="margin-top: 120px; margin-bottom: 50px;">
        <div class="notifications-header">
            <h1>All Notifications</h1>
            <div class="notifications-actions">
                <button id="markAllReadBtn" class="btn-mark-all">Mark All as Read</button>
                <button id="clearAllBtn" class="btn-clear-all">Clear All</button>
            </div>
        </div>

        <div class="notifications-container">
            @if (Model == null || Model.Count == 0)
            {
                <div class="empty-notifications">
                    <i class="fas fa-bell-slash"></i>
                    <p>You don't have any notifications</p>
                </div>
            }
            else
            {
                <div class="notifications-list">
                    @foreach (var notification in Model)
                    {
                        <div class="notification-item @(notification.IsRead ? "read" : "unread")" id="notification-@notification.Id">
                            <div class="notification-icon">
                                @switch (notification.Type)
                                {
                                    case PrimeMarket.Models.Enum.NotificationType.ListingApproved:
                                        <i class="fas fa-check-circle" style="color: #28a745;"></i>
                                        break;
                                    case PrimeMarket.Models.Enum.NotificationType.ListingRejected:
                                        <i class="fas fa-times-circle" style="color: #dc3545;"></i>
                                        break;
                                    case PrimeMarket.Models.Enum.NotificationType.NewMessage:
                                        <i class="fas fa-envelope" style="color: #0066cc;"></i>
                                        break;
                                    case PrimeMarket.Models.Enum.NotificationType.NewOffer:
                                        <i class="fas fa-tag" style="color: #fd7e14;"></i>
                                        break;
                                    case PrimeMarket.Models.Enum.NotificationType.OfferAccepted:
                                        <i class="fas fa-handshake" style="color: #28a745;"></i>
                                        break;
                                    case PrimeMarket.Models.Enum.NotificationType.OfferRejected:
                                        <i class="fas fa-ban" style="color: #dc3545;"></i>
                                        break;
                                    case PrimeMarket.Models.Enum.NotificationType.VerificationApproved:
                                        <i class="fas fa-id-card" style="color: #28a745;"></i>
                                        break;
                                    case PrimeMarket.Models.Enum.NotificationType.VerificationRejected:
                                        <i class="fas fa-id-card" style="color: #dc3545;"></i>
                                        break;
                                    case PrimeMarket.Models.Enum.NotificationType.PurchaseCompleted:
                                        <i class="fas fa-shopping-cart" style="color: #28a745;"></i>
                                        break;
                                    default:
                                        <i class="fas fa-bell" style="color: #0066cc;"></i>
                                        break;
                                }
                            </div>
                            <div class="notification-content">
                                <p>@notification.Message</p>
                                <span class="notification-time">@(((DateTime)notification.CreatedAt).ToString("MMM dd, yyyy HH:mm"))</span>
                            </div>
                            <div class="notification-actions">
                                @if (!notification.IsRead)
                                {
                                    <button class="btn-mark-read" data-id="@notification.Id">Mark as Read</button>
                                }
                                <button class="btn-delete" data-id="@notification.Id">Delete</button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .center-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        width: 100%;
        max-width: 100%;
    }

    .container {
        width: 100%;
        max-width: 960px;
        margin: 120px auto 50px;
    }

    .logo img {
        width: 120px;
        height: 50px;
        object-fit: cover;
        border-radius: 8px;
    }

    .notifications-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .notifications-actions {
        display: flex;
        gap: 10px;
    }

    /* Make all buttons have 50px border radius */
    button,
    .btn-mark-all,
    .btn-clear-all,
    .btn-mark-read,
    .btn-delete {
        border-radius: 50px !important;
        border: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .btn-mark-all,
    .btn-clear-all {
        padding: 8px 15px;
        background-color: #f0f0f0;
        color: #333;
    }

        .btn-mark-all:hover,
        .btn-clear-all:hover {
            background-color: #e0e0e0;
        }

    .empty-notifications {
        text-align: center;
        padding: 50px;
        background-color: #f8f9fa;
        border-radius: 10px;
        margin: 0 auto;
    }

        .empty-notifications i {
            font-size: 50px;
            color: #ddd;
            margin-bottom: 20px;
        }

        .empty-notifications p {
            color: #666;
            font-size: 18px;
        }

    .notifications-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
        width: 100%;
    }

    .notification-item {
        display: flex;
        align-items: flex-start;
        padding: 15px 25px;
        background-color: white;
        border-radius: 50px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        transition: background-color 0.3s ease;
        width: 100%;
        overflow: hidden;
    }

        .notification-item.unread {
            border-left: 3px solid #0066cc;
            background-color: #f0f7ff;
        }

    .notification-icon {
        margin-right: 15px;
        font-size: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 40px;
        height: 40px;
        flex-shrink: 0;
    }

    .notification-content {
        flex: 1;
        min-width: 0; /* Important for text wrapping */
        overflow-wrap: break-word;
        word-wrap: break-word;
        word-break: break-word;
    }

        .notification-content p {
            margin: 0 0 5px 0;
            white-space: normal;
            overflow-wrap: break-word;
            word-wrap: break-word;
            hyphens: auto;
        }

    .notification-time {
        color: #888;
        font-size: 14px;
    }

    .notification-actions {
        display: flex;
        flex-direction: column;
        gap: 5px;
        margin-left: 15px;
        flex-shrink: 0;
    }

    .btn-mark-read,
    .btn-delete {
        padding: 5px 10px;
        background-color: #f0f0f0;
        color: #333;
        font-size: 14px;
        white-space: nowrap;
        min-width: 80px;
        text-align: center;
    }

        .btn-mark-read:hover,
        .btn-delete:hover {
            background-color: #e0e0e0;
        }

    .btn-delete {
        color: #dc3545;
    }

    /* Custom notification styling */
    .custom-notification {
        position: fixed;
        bottom: 20px;
        right: 20px;
        color: white;
        padding: 10px 20px;
        border-radius: 50px;
        z-index: 9999;
        opacity: 1;
        transition: opacity 0.5s ease;
    }

        .custom-notification.success {
            background-color: #28a745;
        }

        .custom-notification.error {
            background-color: #dc3545;
        }

    @@media (max-width: 768px) {
        .notifications-header

    {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }

    .notification-item {
        flex-direction: column;
        padding: 15px 20px;
    }

    .notification-icon {
        margin-bottom: 10px;
    }

    .notification-content {
        width: 100%;
        margin-bottom: 10px;
    }

    .notification-actions {
        margin-left: 0;
        flex-direction: row;
        width: 100%;
        justify-content: space-between;
    }

    .btn-mark-read,
    .btn-delete {
        flex: 1;
        text-align: center;
        max-width: 48%;
    }

    }</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Mark single notification as read
        const markReadButtons = document.querySelectorAll('.btn-mark-read');
        markReadButtons.forEach(button => {
            button.addEventListener('click', function() {
                const notificationId = this.getAttribute('data-id');
                markAsRead(notificationId);
            });
        });

        // Delete single notification
        const deleteButtons = document.querySelectorAll('.btn-delete');
        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                const notificationId = this.getAttribute('data-id');
                deleteNotification(notificationId);
            });
        });

        // Mark all as read
        const markAllReadBtn = document.getElementById('markAllReadBtn');
        if (markAllReadBtn) {
            markAllReadBtn.addEventListener('click', markAllAsRead);
        }

        // Clear all notifications
        const clearAllBtn = document.getElementById('clearAllBtn');
        if (clearAllBtn) {
            clearAllBtn.addEventListener('click', clearAll);
        }

        // Handle notification clicks to navigate
        const notificationItems = document.querySelectorAll('.notification-item');
        notificationItems.forEach(item => {
            item.addEventListener('click', function(event) {
                // Don't navigate if clicking on a button
                if (event.target.tagName === 'BUTTON') {
                    return;
                }

                const notificationId = this.id.split('-')[1];
                const notification = @Html.Raw(Json.Serialize(Model));
                const notificationData = notification.find(n => n.Id == notificationId);

                if (notificationData) {
                    handleNotificationClick(notificationData);
                }
            });
        });

        function markAsRead(notificationId) {
            fetch('/Notifications/MarkAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `notificationId=${notificationId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const notificationItem = document.getElementById(`notification-${notificationId}`);
                    if (notificationItem) {
                        notificationItem.classList.remove('unread');
                        notificationItem.classList.add('read');

                        const markReadBtn = notificationItem.querySelector('.btn-mark-read');
                        if (markReadBtn) {
                            markReadBtn.remove();
                        }
                    }
                }
            })
            .catch(error => {
                console.error('Error marking notification as read:', error);
            });
        }

        function deleteNotification(notificationId) {
            if (!confirm('Are you sure you want to delete this notification?')) {
                return;
            }

            fetch('/Notifications/DeleteNotification', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `notificationId=${notificationId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const notificationItem = document.getElementById(`notification-${notificationId}`);
                    if (notificationItem) {
                        notificationItem.style.height = notificationItem.offsetHeight + 'px';
                        notificationItem.style.opacity = '0';
                        notificationItem.style.marginTop = '0';
                        notificationItem.style.marginBottom = '0';
                        notificationItem.style.padding = '0';

                        setTimeout(() => {
                            notificationItem.style.height = '0';

                            setTimeout(() => {
                                notificationItem.remove();

                                // Check if all notifications are gone
                                const remainingNotifications = document.querySelectorAll('.notification-item');
                                if (remainingNotifications.length === 0) {
                                    document.querySelector('.notifications-container').innerHTML = `
                                        <div class="empty-notifications">
                                            <i class="fas fa-bell-slash"></i>
                                            <p>You don't have any notifications</p>
                                        </div>
                                    `;
                                }
                            }, 300);
                        }, 300);
                    }
                }
            })
            .catch(error => {
                console.error('Error deleting notification:', error);
            });
        }

        function markAllAsRead() {
            const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('/Notifications/MarkAllAsRead', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': csrfToken
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const unreadNotifications = document.querySelectorAll('.notification-item.unread');
                    unreadNotifications.forEach(item => {
                        item.classList.remove('unread');
                        item.classList.add('read');

                        const markReadBtn = item.querySelector('.btn-mark-read');
                        if (markReadBtn) {
                            markReadBtn.remove();
                        }
                    });

                    // Optional: Provide user feedback
                    showNotification('All notifications marked as read');
                } else {
                    showNotification(data.message || 'Error marking notifications as read', true);
                }
            })
            .catch(error => {
                console.error('Error marking all notifications as read:', error);
                showNotification('An error occurred', true);
            });
        }

        // Improved notification function
        function showNotification(message, isError = false) {
            const notification = document.createElement('div');
            notification.textContent = message;
            notification.className = `custom-notification ${isError ? 'error' : 'success'}`;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => document.body.removeChild(notification), 500);
            }, 3000);
        }

        function clearAll() {
            if (!confirm('Are you sure you want to delete all notifications?')) {
                return;
            }

            fetch('/Notifications/ClearAll', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.querySelector('.notifications-container').innerHTML = `
                        <div class="empty-notifications">
                            <i class="fas fa-bell-slash"></i>
                            <p>You don't have any notifications</p>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error clearing all notifications:', error);
            });
        }

        function handleNotificationClick(notification) {
            // Mark as read first
            markAsRead(notification.Id);

            // Navigate based on notification type
            switch (notification.Type) {
                case 0: // ListingApproved
                case 1: // ListingRejected
                    window.location.href = `/User/MyListing?id=${notification.RelatedEntityId}`;
                    break;
                case 2: // NewMessage
                    window.location.href = `/Message/Conversations`;
                    break;
                case 3: // NewOffer
                case 4: // OfferAccepted
                case 5: // OfferRejected
                    window.location.href = `/User/MyListing?id=${notification.RelatedEntityId}`;
                    break;
                case 6: // VerificationApproved
                case 7: // VerificationRejected
                    window.location.href = `/User/MyProfilePage`;
                    break;
                case 8: // PurchaseCompleted
                    window.location.href = `/Payment/PurchaseComplete?purchaseId=${notification.RelatedEntityId}`;
                    break;
                default:
                    // Do nothing or stay on the page
                    break;
            }
        }
    });
</script>