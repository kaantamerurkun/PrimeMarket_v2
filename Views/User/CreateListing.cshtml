@using PrimeMarket.Models.ViewModel
@model ListingViewModel
@{
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
    ViewData["Title"] = "Create Listing";

    // Pull whatever you stored when the user signed‑in.
    var userIdInSession = Context.Session.GetInt32("UserId");

    @if (userIdInSession is null)
    {
        <div style="position:fixed;top:0;right:0;background:#ffebee;
                        color:#c62828;padding:6px 10px;font-size:.85rem;
                        border:1px solid #c62828;z-index:9999">
            <strong>DEBUG:</strong> No <code>UserId</code> in session 😱
        </div>
    }
    else
    {
        <div style="position:fixed;top:0;right:0;background:#e8f5e9;
                        color:#2e7d32;padding:6px 10px;font-size:.85rem;
                        border:1px solid #2e7d32;z-index:9999">
            <strong>DEBUG:</strong> <code>UserId</code> in session =&nbsp;@userIdInSession
        </div>
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="/css/CreateListing.css" />
</head>
<body>
    <center>
        <main class="container" style="margin-top: 100px;">
            <div id="categoryHeaderWrapper">
                <h2>Choose the Category</h2>
            </div>

            <div id="backToCategory" style="display:none; text-align:center; margin-bottom: 20px;">
                <button class="btn-back" type="button">← Back to Category Selection</button>
            </div>

            <div class="selection-grid">
                <div class="selection-column" id="conditions">
                    <div class="selection-item" data-value="First-Hand">First-Hand</div>
                    <div class="selection-item" data-value="Second-Hand">Second-Hand</div>
                </div>
                <div class="selection-column" id="categories" style="visibility:hidden;"></div>
                <div class="selection-column" id="subcategories" style="visibility:hidden;"></div>
                <div class="selection-column" id="details" style="visibility:hidden;"></div>
            </div>

            <div style="text-align: center;">
                <button id="continueBtn" class="btn-continue" type="button">Continue to Details</button>
            </div>

            <div id="detailsForm" style="display:none; margin-top: 50px;">
                <div class="form-wrapper">
                    <h2>Enter Details of the Item</h2>

                    @if (!string.IsNullOrEmpty(TempData["ErrorMessage"]?.ToString()))
                    {
                        <div class="alert alert-danger">
                            @TempData["ErrorMessage"]
                        </div>
                    }

                    <form id="listingForm" enctype="multipart/form-data" method="post" asp-controller="Listing" asp-action="CreateListing">
                        @Html.AntiForgeryToken()
                        <input type="hidden" id="hiddenCondition" asp-for="Condition" />
                        <input type="hidden" id="hiddenCategory" asp-for="Category" />
                        <input type="hidden" id="hiddenSubcategory" asp-for="SubCategory" />
                        <input type="hidden" id="hiddenDetail" asp-for="DetailCategory" />

                        <label>Images:</label>
                        <input style="border-radius:50px" type="file" id="images" asp-for="Images" multiple accept="image/*" required />
                        <div id="imagePreview" style="display:flex; gap:10px; margin-top:10px;"></div>

                        <label for="title">Title:</label>
                        <input style="border-radius:50px" type="text" id="title" asp-for="Title" placeholder="Enter item title" required />

                        <label for="price">Price (TL):</label>
                        <input style="border-radius:50px" type="number" id="price" asp-for="Price" placeholder="e.g. 100" required min="0" inputmode="decimal" step="0.01" />

                        <label for="description">Description:</label>
                        <textarea style="border-radius:20px" id="description" asp-for="Description" rows="4" placeholder="Describe your item..." required></textarea>

                        <!-- Dynamic fields will be added here -->
                        <div id="dynamicFields"></div>

                        <label for="location">Location:</label>
                        <select style="border-radius:50px" id="location" asp-for="Location" required>
                            <option value="">Select Location</option>
                            <option value="Istanbul">Istanbul</option>
                            <option value="Ankara">Ankara</option>
                            <option value="Izmir">Izmir</option>
                            <option value="Bursa">Bursa</option>
                            <option value="Antalya">Antalya</option>
                            <option value="Other">Other</option>
                        </select>

                        <button type="submit" class="submit-btn">List the Item</button>
                    </form>
                </div>
            </div>
        </main>
    </center>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const allCategories = {
                "Phone": ["IOS Phone", "Android Phone", "Other Phones", "Spare Parts", "Phone Accessories"],
                "Tablets": ["IOS Tablets", "Android Tablets", "Other Tablets", "Tablet Accessories"],
                "Electronics": {
                    "Computer": ["Laptops", "Desktops", "Computer Accessories", "Computer Components", "Monitors"],
                    "White Goods": ["Fridges", "Washers", "Dishwashers", "Stoves", "Ovens", "Microwave Ovens"],
                    "Electrical Domestic Appliances": ["Vacuum Cleaner", "Beverage Preparation", "Food Preparation", "Iron", "Sewing Machine"],
                    "Televisions": [],
                    "Heating & Cooling": [],
                    "Cameras": [],
                    "Computer Accessories": ["Keyboards", "Speakers", "Headphones & Earphones", "Webcams", "Microphones", "Mouse", "Computer Bags"]
                }
            };

            // Definition of fields for each category/subcategory
            const categoryFields = {
                // Computers
                "Laptops": [
                    { name: "ram", label: "RAM", type: "text", placeholder: "e.g. 16GB" },
                    { name: "ramType", label: "RAM Type", type: "text", placeholder: "e.g. DDR4" },
                    { name: "hdmi", label: "HDMI", type: "select", options: ["Yes", "No"] },
                    { name: "gpuMemory", label: "GPU Memory", type: "text", placeholder: "e.g. 4GB" },
                    { name: "gpu", label: "Graphics Card", type: "text", placeholder: "e.g. NVIDIA GTX 1650" },
                    { name: "memorySpeed", label: "Memory Speed", type: "text", placeholder: "e.g. 3200MHz" },
                    { name: "keyboard", label: "Keyboard", type: "text", placeholder: "e.g. Backlit" },
                    { name: "screenSize", label: "Screen Size", type: "text", placeholder: "e.g. 15.6 inch" },
                    { name: "processor", label: "Processor", type: "text", placeholder: "e.g. Intel i7-12700H" },
                    { name: "operatingSystem", label: "Operating System", type: "text", placeholder: "e.g. Windows 11" },
                    { name: "storage", label: "HDD/SSD", type: "text", placeholder: "e.g. 512GB SSD" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 2 years" }
                ],
                "Desktops": [
                    { name: "ram", label: "RAM", type: "text", placeholder: "e.g. 32GB" },
                    { name: "ramType", label: "RAM Type", type: "text", placeholder: "e.g. DDR4" },
                    { name: "hdmi", label: "HDMI", type: "select", options: ["Yes", "No"] },
                    { name: "gpuMemory", label: "GPU Memory", type: "text", placeholder: "e.g. 8GB" },
                    { name: "gpu", label: "Graphics Card", type: "text", placeholder: "e.g. NVIDIA RTX 3080" },
                    { name: "memorySpeed", label: "Memory Speed", type: "text", placeholder: "e.g. 3600MHz" },
                    { name: "keyboard", label: "Keyboard", type: "text", placeholder: "e.g. Mechanical" },
                    { name: "screenSize", label: "Screen Size", type: "text", placeholder: "e.g. 27 inch" },
                    { name: "processor", label: "Processor", type: "text", placeholder: "e.g. AMD Ryzen 9" },
                    { name: "operatingSystem", label: "Operating System", type: "text", placeholder: "e.g. Windows 11" },
                    { name: "storage", label: "HDD/SSD", type: "text", placeholder: "e.g. 1TB SSD + 2TB HDD" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 2 years" }
                ],
                // Phones
                "IOS Phone": [
                    { name: "faceRecognition", label: "Face Recognition", type: "select", options: ["Yes", "No"] },
                    { name: "camera", label: "Camera", type: "text", placeholder: "e.g. 12MP triple camera" },
                    { name: "batteryPower", label: "Battery Power", type: "text", placeholder: "e.g. 3200mAh" },
                    { name: "screenSize", label: "Screen Size", type: "text", placeholder: "e.g. 6.1 inch" },
                    { name: "chargingPort", label: "Charging Port", type: "text", placeholder: "e.g. Lightning, USB-C" },
                    { name: "ram", label: "RAM", type: "text", placeholder: "e.g. 4GB" },
                    { name: "storage", label: "Storage", type: "text", placeholder: "e.g. 128GB" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 1 year" }
                ],
                "Android Phone": [
                    { name: "faceRecognition", label: "Face Recognition", type: "select", options: ["Yes", "No"] },
                    { name: "camera", label: "Camera", type: "text", placeholder: "e.g. 108MP quad camera" },
                    { name: "batteryPower", label: "Battery Power", type: "text", placeholder: "e.g. 5000mAh" },
                    { name: "screenSize", label: "Screen Size", type: "text", placeholder: "e.g. 6.7 inch" },
                    { name: "chargingPort", label: "Charging Port", type: "text", placeholder: "e.g. USB-C" },
                    { name: "ram", label: "RAM", type: "text", placeholder: "e.g. 8GB" },
                    { name: "storage", label: "Storage", type: "text", placeholder: "e.g. 256GB" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 2 years" }
                ],
                "Other Phones": [
                    { name: "faceRecognition", label: "Face Recognition", type: "select", options: ["Yes", "No"] },
                    { name: "camera", label: "Camera", type: "text", placeholder: "e.g. 13MP" },
                    { name: "batteryPower", label: "Battery Power", type: "text", placeholder: "e.g. 4000mAh" },
                    { name: "screenSize", label: "Screen Size", type: "text", placeholder: "e.g. 6.5 inch" },
                    { name: "chargingPort", label: "Charging Port", type: "text", placeholder: "e.g. USB-C" },
                    { name: "ram", label: "RAM", type: "text", placeholder: "e.g. 6GB" },
                    { name: "storage", label: "Storage", type: "text", placeholder: "e.g. 128GB" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 1 year" }
                ],
                // Tablets
                "IOS Tablets": [
                    { name: "faceRecognition", label: "Face Recognition", type: "select", options: ["Yes", "No"] },
                    { name: "camera", label: "Camera", type: "text", placeholder: "e.g. 12MP" },
                    { name: "batteryPower", label: "Battery Power", type: "text", placeholder: "e.g. 8000mAh" },
                    { name: "screenSize", label: "Screen Size", type: "text", placeholder: "e.g. 10.9 inch" },
                    { name: "chargingPort", label: "Charging Port", type: "text", placeholder: "e.g. USB-C" },
                    { name: "ram", label: "RAM", type: "text", placeholder: "e.g. 8GB" },
                    { name: "storage", label: "Storage", type: "text", placeholder: "e.g. 256GB" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 1 year" }
                ],
                "Android Tablets": [
                    { name: "faceRecognition", label: "Face Recognition", type: "select", options: ["Yes", "No"] },
                    { name: "camera", label: "Camera", type: "text", placeholder: "e.g. 8MP" },
                    { name: "batteryPower", label: "Battery Power", type: "text", placeholder: "e.g. 7000mAh" },
                    { name: "screenSize", label: "Screen Size", type: "text", placeholder: "e.g. 10.4 inch" },
                    { name: "chargingPort", label: "Charging Port", type: "text", placeholder: "e.g. USB-C" },
                    { name: "ram", label: "RAM", type: "text", placeholder: "e.g. 4GB" },
                    { name: "storage", label: "Storage", type: "text", placeholder: "e.g. 64GB" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 2 years" }
                ],
                "Other Tablets": [
                    { name: "faceRecognition", label: "Face Recognition", type: "select", options: ["Yes", "No"] },
                    { name: "camera", label: "Camera", type: "text", placeholder: "e.g. 5MP" },
                    { name: "batteryPower", label: "Battery Power", type: "text", placeholder: "e.g. 6000mAh" },
                    { name: "screenSize", label: "Screen Size", type: "text", placeholder: "e.g. 8 inch" },
                    { name: "chargingPort", label: "Charging Port", type: "text", placeholder: "e.g. Micro USB" },
                    { name: "ram", label: "RAM", type: "text", placeholder: "e.g. 3GB" },
                    { name: "storage", label: "Storage", type: "text", placeholder: "e.g. 32GB" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 1 year" }
                ],
                // White Goods
                "Washers": [
                    { name: "energyClass", label: "Energy Class", type: "text", placeholder: "e.g. A++" },
                    { name: "dimensions", label: "Product Dimensions", type: "text", placeholder: "e.g. 60x85x60 cm" },
                    { name: "color", label: "Color", type: "text", placeholder: "e.g. White" },
                    { name: "capacity", label: "Washing Capacity", type: "text", placeholder: "e.g. 8 kg" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 3 years" }
                ],
                "Dishwashers": [
                    { name: "energyClass", label: "Energy Class", type: "text", placeholder: "e.g. A++" },
                    { name: "dimensions", label: "Product Dimensions", type: "text", placeholder: "e.g. 60x85x60 cm" },
                    { name: "color", label: "Color", type: "text", placeholder: "e.g. Silver" },
                    { name: "capacity", label: "Washing Capacity", type: "text", placeholder: "e.g. 12 place settings" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 2 years" }
                ],
                "Fridges": [
                    { name: "energyClass", label: "Energy Class", type: "text", placeholder: "e.g. A++" },
                    { name: "dimensions", label: "Product Dimensions", type: "text", placeholder: "e.g. 70x180x65 cm" },
                    { name: "color", label: "Color", type: "text", placeholder: "e.g. Silver" },
                    { name: "volume", label: "Volume", type: "text", placeholder: "e.g. 350L" },
                    { name: "freezer", label: "Freezer", type: "select", options: ["Yes", "No"] },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 3 years" }
                ],
                "Ovens": [
                    { name: "energyClass", label: "Energy Class", type: "text", placeholder: "e.g. A+" },
                    { name: "dimensions", label: "Product Dimensions", type: "text", placeholder: "e.g. 60x60x55 cm" },
                    { name: "color", label: "Color", type: "text", placeholder: "e.g. Black" },
                    { name: "timer", label: "Timer", type: "select", options: ["Yes", "No"] },
                    { name: "volume", label: "Volume", type: "text", placeholder: "e.g. 65L" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 2 years" }
                ],
                // Electrical Domestic Appliances
                "Vacuum Cleaner": [
                    { name: "cableLength", label: "Cable Length", type: "text", placeholder: "e.g. 7m" },
                    { name: "waterContainer", label: "Water Container", type: "select", options: ["Yes", "No"] },
                    { name: "weight", label: "Weight", type: "text", placeholder: "e.g. 4.5 kg" },
                    { name: "power", label: "Power", type: "text", placeholder: "e.g. 900W" },
                    { name: "dustContainer", label: "Dust Container", type: "text", placeholder: "e.g. 2L" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 2 years" }
                ],
                // Televisions
                "Televisions": [
                    { name: "screenSize", label: "Screen Size", type: "text", placeholder: "e.g. 55 inch" },
                    { name: "smartTV", label: "Smart TV", type: "select", options: ["Yes", "No"] },
                    { name: "hdmi", label: "HDMI", type: "text", placeholder: "e.g. 3 ports" },
                    { name: "resolution", label: "Resolution", type: "text", placeholder: "e.g. 4K UHD" },
                    { name: "displayTechnology", label: "Display Technology", type: "text", placeholder: "e.g. OLED" },
                    { name: "warranty", label: "Warranty Period", type: "text", placeholder: "e.g. 2 years" }
                ]
            };

            let selectedCondition = "", selectedCategory = "", selectedSubcategory = "", selectedDetail = "";

            const conditions = document.getElementById("conditions");
            const categories = document.getElementById("categories");
            const subcategories = document.getElementById("subcategories");
            const details = document.getElementById("details");
            const continueBtn = document.getElementById("continueBtn");
            const formContainer = document.getElementById("detailsForm");
            const dynamicFields = document.getElementById("dynamicFields");
            const listingForm = document.getElementById("listingForm");

            function highlight(section, el) {
                document.querySelectorAll(`#${section} .selection-item`).forEach(i => i.classList.remove("selected"));
                el.classList.add("selected");
            }

            function createItem(text) {
                const div = document.createElement("div");
                div.className = "selection-item";
                div.textContent = text;
                div.dataset.value = text;
                return div;
            }

            function loadCategories() {
                categories.innerHTML = "";
                Object.keys(allCategories).forEach(cat => {
                    categories.appendChild(createItem(cat));
                });
            }

            function loadSubcategories() {
                subcategories.innerHTML = "";
                details.innerHTML = "";
                continueBtn.style.display = "none";
                const sub = allCategories[selectedCategory];
                if (Array.isArray(sub)) {
                    sub.forEach(item => subcategories.appendChild(createItem(item)));
                    subcategories.style.visibility = "visible";
                    details.style.visibility = "hidden";
                } else {
                    Object.keys(sub).forEach(key => subcategories.appendChild(createItem(key)));
                    subcategories.style.visibility = "visible";
                }
            }

            function loadDetails() {
                details.innerHTML = "";
                continueBtn.style.display = "none";
                const deep = allCategories[selectedCategory][selectedSubcategory];
                if (Array.isArray(deep) && deep.length > 0) {
                    deep.forEach(item => details.appendChild(createItem(item)));
                    details.style.visibility = "visible";
                } else {
                    details.style.visibility = "hidden";
                    continueBtn.style.display = "inline-block";
                }
            }

            function generateDynamicFields() {
                dynamicFields.innerHTML = "";

                // Define which category to get fields for
                let fieldsToShow = [];

                // Look up in our field definitions based on selection
                if (selectedDetail && categoryFields[selectedDetail]) {
                    fieldsToShow = categoryFields[selectedDetail];
                } else if (selectedSubcategory && categoryFields[selectedSubcategory]) {
                    fieldsToShow = categoryFields[selectedSubcategory];
                }

                if (fieldsToShow.length === 0) {
                    return;
                }

                // Create a heading for the specific fields
                const heading = document.createElement("h3");
                heading.textContent = "Item Specific Details";
                heading.style.marginTop = "20px";
                heading.style.marginBottom = "10px";
                dynamicFields.appendChild(heading);

                // Generate fields based on definition
                fieldsToShow.forEach(field => {
                    const fieldContainer = document.createElement("div");

                    const label = document.createElement("label");
                    label.setAttribute("for", field.name);
                    label.textContent = field.label;
                    fieldContainer.appendChild(label);

                    if (field.type === "select") {
                        const select = document.createElement("select");
                        select.id = field.name;
                        select.name = `DynamicProperties[${field.name}]`;
                        select.style.borderRadius = "50px";

                        // Add empty option
                        const emptyOption = document.createElement("option");
                        emptyOption.value = "";
                        emptyOption.textContent = `Select ${field.label}`;
                        select.appendChild(emptyOption);

                        // Add options from definition
                        field.options.forEach(option => {
                            const optionEl = document.createElement("option");
                            optionEl.value = option;
                            optionEl.textContent = option;
                            select.appendChild(optionEl);
                        });

                        fieldContainer.appendChild(select);
                    } else {
                        const input = document.createElement("input");
                        input.type = field.type;
                        input.id = field.name;
                        input.name = `DynamicProperties[${field.name}]`;
                        input.placeholder = field.placeholder || "";
                        input.style.borderRadius = "50px";
                        fieldContainer.appendChild(input);
                    }

                    dynamicFields.appendChild(fieldContainer);
                });
            }

            conditions.addEventListener("click", e => {
                if (e.target.classList.contains("selection-item")) {
                    selectedCondition = e.target.dataset.value;
                    highlight("conditions", e.target);

                    selectedCategory = "";
                    selectedSubcategory = "";
                    selectedDetail = "";

                    categories.innerHTML = "";
                    subcategories.innerHTML = "";
                    details.innerHTML = "";
                    subcategories.style.visibility = "hidden";
                    details.style.visibility = "hidden";
                    continueBtn.style.display = "none";

                    categories.style.visibility = "visible";
                    loadCategories();
                }
            });

            categories.addEventListener("click", e => {
                if (e.target.classList.contains("selection-item")) {
                    selectedCategory = e.target.dataset.value;
                    highlight("categories", e.target);
                    loadSubcategories();
                }
            });

            subcategories.addEventListener("click", e => {
                if (e.target.classList.contains("selection-item")) {
                    selectedSubcategory = e.target.dataset.value;
                    highlight("subcategories", e.target);
                    const deep = allCategories[selectedCategory][selectedSubcategory];
                    if (Array.isArray(deep) && deep.length > 0) {
                        loadDetails();
                    } else {
                        selectedDetail = "";
                        details.style.visibility = "hidden";
                        continueBtn.style.display = "inline-block";
                    }
                }
            });

            details.addEventListener("click", e => {
                if (e.target.classList.contains("selection-item")) {
                    selectedDetail = e.target.dataset.value;
                    highlight("details", e.target);
                    continueBtn.style.display = "inline-block";
                }
            });

            continueBtn.addEventListener("click", () => {
                if (
                    !selectedCondition ||
                    !selectedCategory ||
                    (subcategories.style.visibility === "visible" && !selectedSubcategory) ||
                    (details.style.visibility === "visible" && details.childElementCount > 0 && !selectedDetail)
                ) {
                    alert("Please make sure to select all category levels before continuing.");
                    return;
                }

                document.querySelector(".selection-grid").style.display = "none";
                document.getElementById("categoryHeaderWrapper").style.display = "none";
                continueBtn.style.display = "none";
                formContainer.style.display = "block";
                document.getElementById("backToCategory").style.display = "block";

                document.getElementById("hiddenCondition").value = selectedCondition;
                document.getElementById("hiddenCategory").value = selectedCategory;
                document.getElementById("hiddenSubcategory").value = selectedSubcategory;
                document.getElementById("hiddenDetail").value = selectedDetail;

                // Generate the dynamic fields based on selection
                generateDynamicFields();
            });

            document.querySelector(".btn-back").addEventListener("click", () => {
                document.querySelector(".selection-grid").style.display = "grid";
                document.getElementById("categoryHeaderWrapper").style.display = "block";
                formContainer.style.display = "none";
                document.getElementById("backToCategory").style.display = "none";
                continueBtn.style.display = "inline-block";
            });

            // Image preview functionality
            document.getElementById('images').addEventListener('change', function() {
                const preview = document.getElementById('imagePreview');
                preview.innerHTML = "";

                if (this.files && this.files.length > 0) {
                    Array.from(this.files).forEach(file => {
                        const img = document.createElement('img');
                        img.src = URL.createObjectURL(file);
                        img.style.width = "60px";
                        img.style.height = "60px";
                        img.style.borderRadius = "4px";
                        img.style.objectFit = "cover";
                        preview.appendChild(img);
                    });
                }
            });

            // Form submission
            listingForm.addEventListener('submit', function(e) {
                // Basic validation before submit
                const title = document.getElementById('title').value;
                const price = document.getElementById('price').value;
                const description = document.getElementById('description').value;
                const images = document.getElementById('images').files;
                const location = document.getElementById('location').value;

                if (!title || !price || !description || images.length === 0 || !location) {
                    e.preventDefault();
                    alert('Please fill in all required fields and upload at least one image.');
                    return false;
                }

                // Set button to loading state
                const submitButton = this.querySelector('button[type="submit"]');
                submitButton.disabled = true;
                submitButton.textContent = 'Creating listing...';
            });
        });
    </script>
</body>
</html>