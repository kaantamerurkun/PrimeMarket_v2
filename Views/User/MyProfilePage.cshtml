```cshtml
@model PrimeMarket.Models.ViewModel.UserProfileViewModel
@{
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
    var isVerified = Model.User.IsIdVerified;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/MyProfilePage.css" />
    <title>My Profile</title>
    <style>
        /* Main container with proper header spacing */
        .main-content {
            margin-top: 80px; /* Adjust this value based on your header height */
            padding-top: 20px;
            min-height: calc(100vh - 80px);
        }

        .logo img {
            width: 120px;
            height: 50px;
            object-fit: cover;
            border-radius: 8px;
        }

        .verified-badge {
            display: inline-flex;
            align-items: center;
            margin-left: 5px;
        }

            .verified-badge img {
                width: 20px;
                height: 20px;
            }

        .user-verified-status {
            display: flex;
            align-items: center;
            margin-top: 10px;
            color: #0066cc;
        }

        .profile-image-container {
            position: relative;
        }

        .verification-badge {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background-color: #fff;
            border-radius: 50%;
            padding: 3px;
            box-shadow: rgba(67, 71, 85, 0.27) 0px 0px 0.25em, rgba(90, 125, 188, 0.05) 0px 0.25em 1em;
        }

        /* User details styling */
        .user-details-container {
            background-color: #f0f8ff;
            margin-top: 0; /* Changed from 12% to 0 */
            width: 50%;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .detail-item {
            display: flex;
            text-align: left;
            padding: 10px 0;
            border-bottom: 1px solid #f0f0f0;
        }

        .detail-label {
            font-weight: bold;
            color: #555;
        }

        .detail-value {
            color: #333;
            text-align: right;
        }

        /* Listings section styling */
        .my-listings-section {
            margin-top: 40px;
            margin-bottom: 40px;
        }

        .listings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .btn-new-listing {
            padding: 10px 20px;
            background-color: #0066cc;
            color: white;
            border: none;
            border-radius: 5px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .listings-filter {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 8px 15px;
            background-color: #f0f0f0;
            color: #333;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            .filter-btn.active {
                background-color: #0066cc;
                color: white;
            }

        .listings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
        }

        .listing-card {
            background-color: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

            .listing-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }

        .listing-image {
            position: relative;
            height: 180px;
        }

            .listing-image img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

        .listing-status {
            position: absolute;
            top: 10px;
            right: 10px;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            font-weight: bold;
            text-transform: uppercase;
        }

            .listing-status.pending {
                background-color: #ffc107;
                color: #212529;
            }

            .listing-status.active {
                background-color: #28a745;
                color: white;
            }

            .listing-status.rejected {
                background-color: #dc3545;
                color: white;
            }

            .listing-status.sold {
                background-color: #17a2b8;
                color: white;
            }

        .listing-details {
            padding: 15px;
        }

            .listing-details h3 {
                margin: 0 0 10px 0;
                font-size: 16px;
                white-space: nowrap;
                overflow: hidden;
                text-overflow: ellipsis;
            }

        .listing-price {
            font-weight: bold;
            font-size: 16px;
            color: #0066cc;
            margin-bottom: 5px;
        }

        .listing-date {
            color: #666;
            font-size: 12px;
            margin-bottom: 10px;
        }

        .rejection-reason {
            background-color: #fff3cd;
            border-left: 3px solid #ffc107;
            padding: 8px;
            margin-top: 8px;
            font-size: 12px;
        }

        .listing-actions {
            display: flex;
            gap: 5px;
            padding: 0 15px 15px 15px;
        }

        .btn-view, .btn-edit, .btn-delete {
            flex: 1;
            padding: 6px 0;
            text-align: center;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            font-size: 13px;
        }

        .btn-view {
            background-color: #f0f0f0;
            color: #333;
        }

        .btn-edit {
            background-color: #17a2b8;
            color: white;
        }

        .btn-delete {
            background-color: #dc3545;
            color: white;
        }

        .empty-listings {
            text-align: center;
            padding: 30px;
            background-color: #f8f9fa;
            border-radius: 10px;
        }

            .empty-listings i {
                font-size: 40px;
                color: #ddd;
                margin-bottom: 15px;
            }

            .empty-listings p {
                color: #666;
                font-size: 16px;
                margin-bottom: 15px;
            }

        .btn-create-first {
            display: inline-block;
            padding: 10px 20px;
            background-color: #0066cc;
            color: white;
            text-decoration: none;
            border-radius: 5px;
        }

        /* Delete confirmation modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 15% auto;
            padding: 20px;
            border-radius: 10px;
            width: 90%;
            max-width: 500px;
            position: relative;
        }

        .close {
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
            margin-top: 20px;
        }

        .btn-cancel, .btn-confirm {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .btn-cancel {
            background-color: #f0f0f0;
            color: #333;
        }

        .btn-confirm {
            background-color: #dc3545;
            color: white;
            border-radius: 50px;
        }

        .profile-image-container {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .profile-image-wrapper {
            position: relative;
            width: 100%;
        }

        .profile-image {
            width: 350px;
            height: 350px;
            max-width: 100%;
            object-fit: cover;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }

        .user-details-container {
            background-color: #f0f8ff;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            margin-top: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        /* No listings message */
        .no-listings-message {
            text-align: center;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 10px;
            margin-top: 20px;
            display: none;
        }

        /* Responsive styles */
        @@media (max-width: 1024px) {
            .profile-section-wrapper

        {
            flex-direction: column;
            align-items: center;
        }

        .profile-image {
            width: 300px;
            height: 300px;
        }

        .user-details-container {
            width: 100%;
            max-width: 600px;
        }

        }

        @@media (max-width: 768px) {
            .main-content

        {
            margin-top: 60px; /* Adjust for smaller header on mobile */
        }

        .profile-section-wrapper {
            padding: 10px;
        }

        .profile-image {
            width: 250px;
            height: 250px;
        }

        .detail-item {
            flex-direction: column;
            gap: 5px;
        }

        .detail-value {
            text-align: left !important;
        }

        }

        @@media (max-width: 480px) {
            .profile-image

        {
            width: 200px;
            height: 200px;
        }

        .user-details-container {
            padding: 15px;
        }

        }

        /* Success message styling */
        .success-message {
            position: relative;
            z-index: 1000;
            background-color: #d4edda;
            color: #155724;
            padding: 10px;
            border-radius: 4px;
            margin-bottom: 15px;
        }
    </style>
</head>

<body>
    <div class="main-content">
        <div style="display: flex; align-items: flex-start; justify-content: center; width: 100%; margin: 0 auto; padding: 20px;">
            <div class="profile-section-wrapper" style="display: flex; align-items: stretch; gap: 20px; max-width: 1200px; width: 100%;">
                <div class="profile-image-container" style="flex: 0 0 auto;">
                    <div class="profile-image-wrapper" style="height: 100%; display: flex; align-items: center;">
                        <img class="profile-image" src="@(string.IsNullOrEmpty(Model.User.ProfileImagePath) ? "/images/placeholder.png" : Model.User.ProfileImagePath)" alt="Profile Pic" />
                        @if (isVerified)
                        {
                            <div class="verification-badge">
                                <img src="/images/verified.png" alt="Verified" width="30" height="30" title="Verified User">
                            </div>
                        }
                    </div>
                </div>

                <div style="flex: 1; text-align: left">
                    <div class="user-details-container">
                        <div class="detail-item">
                            <span class="detail-label">Name:</span>
                            <span class="detail-value">@Model.User.FirstName</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Last Name:</span>
                            <span class="detail-value">@Model.User.LastName</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Email:</span>
                            <span class="detail-value">@Model.User.Email</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Phone Number:</span>
                            <span class="detail-value">@(string.IsNullOrEmpty(Model.User.PhoneNumber) ? "Not provided" : Model.User.PhoneNumber)</span>
                        </div>
                    </div>

                    @if (isVerified)
                    {
                        <div class="user-verified-status">
                            <img src="/images/verified.png" alt="Verified" width="16" height="16" style="margin-right: 5px;">
                            <span>Your account is verified</span>
                        </div>
                    }
                    else
                    {
                        <div class="user-verified-status" style="color: #dc3545;">
                            <span>Your account is not verified. Please verify your ID in Edit Profile.</span>
                        </div>
                    }
                    <br />

                    @if (TempData["SuccessMessage"] != null)
                    {
                        <div class="success-message" id="successMessage">
                            @TempData["SuccessMessage"]
                        </div>
                    }
                </div>
            </div>
        </div>
        <!-- Add this code to MyProfilePage.cshtml after the user details container and before the buttons div -->
        <div style="display: flex; justify-content: center; align-items: center; flex-direction: column;">
            @if (Model.TotalRatings >= 0)
            {
                <div class="user-rating-container" style="background-color: #f0f8ff; width: 50%; border-radius: 10px; padding: 15px; margin-top: 20px;">
                    <div class="rating-info" style="display: flex; align-items: center; justify-content: center;">
                        <span style="font-weight: bold; margin-right: 10px;">Your Seller Rating:</span>
                        <div class="stars" style="color: #ffa500; margin-right: 10px;">
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= Model.AverageRating)
                                {
                                    <span>★</span>
                                }
                                else if (i - 0.5 <= Model.AverageRating)
                                {
                                    <span>☆</span>
                                }
                                else
                                {
                                    <span style="color: #ddd;">★</span>
                                }
                            }
                        </div>
                        <span>@Model.AverageRating.ToString("0.0")/5 (@Model.TotalRatings reviews)</span>
                    </div>
                </div>
            }
            else
            {
                <div class="user-rating-container" style="background-color: #f0f8ff; width: 50%; border-radius: 10px; padding: 15px; margin-top: 20px; text-align: center;">
                    <span>You haven't received any seller ratings yet.</span>
                </div>
            }
        </div>


        <br>
        <br>
        <br>

        <div style="display: flex; justify-content: center;">
            <a asp-controller="User" asp-action="EditProfile">
                <button class="btn-editprofile">Edit Profile</button>
            </a>
            <a asp-controller="User" asp-action="MyBookmarks">
                <button style="margin-left:100px" class="btn-mybookmark">My Bookmarks</button>
            </a>
            <a asp-controller="Report" asp-action="MyProfitLossReport">
                <button style="margin-left:100px" class="btn-profitlossreport">Profit & Loss Report</button>
            </a>
        </div>

        <br />

        <!-- My Listings Section -->
        <div class="my-listings-section container" style="max-width: 85%; margin: 0 auto; text-align: center;">
            <div class="listings-header">
                <h2 style="text-align: center; width: 100%;">My Listings</h2>
                <a href="@Url.Action("CreateListing", "User")" class="btn-new-listing" style="border-radius: 50px;">
                    <i class="fas fa-plus"></i> Create New Listing
                </a>
            </div>

            <div class="listings-filter" style="justify-content: center;">
                <button class="filter-btn active" data-filter="all" style="border-radius: 50px;">All</button>
                <button class="filter-btn" data-filter="pending" style="border-radius: 50px;">Pending</button>
                <button class="filter-btn" data-filter="active" style="border-radius: 50px;">Active</button>
                <button class="filter-btn" data-filter="rejected" style="border-radius: 50px;">Rejected</button>
                <button class="filter-btn" data-filter="sold" style="border-radius: 50px;">Sold</button>
            </div>

            <div class="my-listings-container">
                <div id="noListingsMessage" class="no-listings-message" style="display: none;">
                    <i class="fas fa-filter"></i>
                    <p>No listings match the current filter</p>
                    <button class="btn-show-all filter-btn" data-filter="all" style="border-radius: 50px; background-color: #0066cc; color: white; padding: 8px 15px; border: none; cursor: pointer;">Show All Listings</button>
                </div>

                @if (Model.Listings == null || Model.Listings.Count == 0)
                {
                    <div class="empty-listings">
                        <i class="fas fa-list-alt"></i>
                        <p>You don't have any listings yet</p>
                        <a href="@Url.Action("CreateListing", "User")" class="btn-create-first" style="border-radius: 50px;">Create Your First Listing</a>
                    </div>
                }
                else
                {
                    <div class="listings-grid" style="max-width: 95%; margin: 0 auto;">
                        @foreach (var listing in Model.Listings)
                        {
                            string statusClass = listing.Status.ToString().ToLower();
                            string mainImage = listing.Images != null && listing.Images.Any()
                            ? (listing.Images.FirstOrDefault(i => i.IsMainImage)?.ImagePath ?? listing.Images.First().ImagePath)
                            : "/images/placeholder.png";

                            <div class="listing-card" data-status="@listing.Status.ToString().ToLower()" data-id="@listing.Id">
                                <div class="listing-image">
                                    <img src="@mainImage" alt="@listing.Title">
                                    <div class="listing-status @statusClass" style="border-radius: 50px;">@listing.Status.ToString()</div>
                                </div>
                                <div class="listing-details">
                                    <h3>@listing.Title</h3>
                                    <p class="listing-price">@listing.Price.ToString("C")</p>
                                    <p class="listing-date">Listed on @(((DateTime)listing.CreatedAt).ToString("MMM dd, yyyy"))</p>

                                    @if (listing.Status == PrimeMarket.Models.Enum.ListingStatus.Rejected)
                                    {
                                        <div class="rejection-reason" style="border-radius: 50px;">
                                            <p><strong>Rejection Reason:</strong> @listing.RejectionReason</p>
                                        </div>
                                    }
                                </div>
                                <div class="listing-actions">
                                    <a href="@Url.Action("MyListing", "User", new { id = listing.Id })" class="btn-view" style="border-radius: 50px;">View</a>

                                    @if (listing.Status != PrimeMarket.Models.Enum.ListingStatus.Sold)
                                    {
                                        <a href="@Url.Action("EditListing", "Listing", new { id = listing.Id })" class="btn-edit" style="border-radius: 50px;">Edit</a>
                                        <button class="btn-delete" data-id="@listing.Id" style="border-radius: 50px;">Delete</button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <!-- Delete Confirmation Modal -->
        <div id="deleteModal" class="modal">
            <div class="modal-content" style="border-radius: 50px;">
                <span class="close">&times;</span>
                <h2>Confirm Deletion</h2>
                <p>Are you sure you want to delete this listing?</p>
                <p>This action cannot be undone.</p>
                <div class="modal-actions">
                    <button id="cancelDelete" class="btn-cancel" style="border-radius: 50px;">Cancel</button>
                    <button id="confirmDelete" class="btn-confirm" style="border-radius: 50px;">Delete</button>
                </div>
            </div>
        </div>
    </div>

    @* Include CSRF token for AJAX request *@
    @Html.AntiForgeryToken()

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Success message timer
            setTimeout(function () {
                var msg = document.getElementById('successMessage');
                if (msg) {
                    msg.style.opacity = '0';
                    msg.style.transition = 'opacity 0.5s ease';
                    setTimeout(function() {
                        msg.style.display = 'none';
                    }, 500);
                }
            }, 3000); // 3 seconds

            // Filter buttons functionality
            const filterButtons = document.querySelectorAll('.filter-btn');
            const listingCards = document.querySelectorAll('.listing-card');
            const noListingsMessage = document.getElementById('noListingsMessage');
            const listingsGrid = document.querySelector('.listings-grid');
            const emptyListings = document.querySelector('.empty-listings');

            // Initial check - if no listings at all, show the empty state
            if (listingCards.length === 0 && emptyListings) {
                emptyListings.style.display = 'block';
                if (listingsGrid) listingsGrid.style.display = 'none';
            }

            // Filter functionality
            function applyFilter(filterValue) {
                let visibleCount = 0;

                listingCards.forEach(card => {
                    const status = card.getAttribute('data-status');

                    if (filterValue === 'all' || status === filterValue) {
                        card.style.display = 'block';
                        visibleCount++;
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Show/hide no results message
                if (visibleCount === 0 && listingCards.length > 0) {
                    noListingsMessage.style.display = 'block';
                    if (listingsGrid) listingsGrid.style.display = 'none';
                } else {
                    noListingsMessage.style.display = 'none';
                    if (listingsGrid && listingCards.length > 0) listingsGrid.style.display = 'grid';
                }

                // Update active button
                filterButtons.forEach(btn => {
                    if (btn.getAttribute('data-filter') === filterValue) {
                        btn.classList.add('active');
                    } else {
                        btn.classList.remove('active');
                    }
                });
            }

            // Add click event to all filter buttons
            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const filter = this.getAttribute('data-filter');
                    applyFilter(filter);
                });
            });

            // Add click event to "Show All Listings" button in no results message
            document.querySelector('.btn-show-all').addEventListener('click', function() {
                applyFilter('all');
            });

            // Delete listing functionality
            const deleteButtons = document.querySelectorAll('.btn-delete');
            const deleteModal = document.getElementById('deleteModal');
            const closeModal = document.querySelector('.close');
            const cancelDelete = document.getElementById('cancelDelete');
            const confirmDelete = document.getElementById('confirmDelete');
            let listingToDelete = null;

            deleteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    listingToDelete = this.getAttribute('data-id');
                    deleteModal.style.display = 'block';
                });
            });

            closeModal.addEventListener('click', function() {
                deleteModal.style.display = 'none';
            });

            cancelDelete.addEventListener('click', function() {
                deleteModal.style.display = 'none';
            });

            window.addEventListener('click', function(event) {
                if (event.target === deleteModal) {
                    deleteModal.style.display = 'none';
                }
            });

            confirmDelete.addEventListener('click', function() {
                if (listingToDelete) {
                    deleteListing(listingToDelete);
                }
            });

            function deleteListing(listingId) {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                fetch('/Listing/DeleteListing', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': token
                    },
                    body: `id=${listingId}&__RequestVerificationToken=${token}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        deleteModal.style.display = 'none';

                        // Remove the listing card with animation
                        const listingCard = document.querySelector(`.listing-card[data-id="${listingId}"]`);
                        if (listingCard) {
                            listingCard.style.opacity = '0';
                            listingCard.style.transform = 'scale(0.8)';
                            listingCard.style.transition = 'opacity 0.3s ease, transform 0.3s ease';

                            setTimeout(() => {
                                listingCard.remove();

                                // Check if there are any listings left
                                const remainingListings = document.querySelectorAll('.listing-card');
                                if (remainingListings.length === 0) {
                                    // If no listings left at all, show empty state
                                    if (emptyListings) {
                                        emptyListings.style.display = 'block';
                                    } else {
                                        // Create empty state if it doesn't exist
                                        const emptyDiv = document.createElement('div');
                                        emptyDiv.className = 'empty-listings';
                                        emptyDiv.innerHTML = `
                                            <i class="fas fa-list-alt"></i>
                                            <p>You don't have any listings yet</p>
                                            <a href="/User/CreateListing" class="btn-create-first" style="border-radius: 50px;">Create Your First Listing</a>
                                        `;
                                        document.querySelector('.my-listings-container').appendChild(emptyDiv);
                                    }

                                    if (listingsGrid) listingsGrid.style.display = 'none';
                                    if (noListingsMessage) noListingsMessage.style.display = 'none';
                                } else {
                                    // Re-apply current filter to update the view
                                    const activeFilter = document.querySelector('.filter-btn.active').getAttribute('data-filter');
                                    applyFilter(activeFilter);
                                }
                            }, 300);
                        }

                        // Show success message
                        const successAlert = document.createElement('div');
                        successAlert.className = 'success-message';
                        successAlert.textContent = 'Listing deleted successfully';

                        const listingsHeader = document.querySelector('.listings-header');
                        listingsHeader.parentNode.insertBefore(successAlert, listingsHeader.nextSibling);

                        // Remove alert after 3 seconds
                        setTimeout(() => {
                            successAlert.style.opacity = '0';
                            successAlert.style.transition = 'opacity 0.3s ease';
                            setTimeout(() => successAlert.remove(), 300);
                        }, 3000);
                    } else {
                        // Show error message
                        alert(data.message || 'Error deleting listing. Please try again.');
                        deleteModal.style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Error deleting listing:', error);
                    alert('Error deleting listing. Please try again.');
                    deleteModal.style.display = 'none';
                });
            }
        });
    </script>
</body>

</html>