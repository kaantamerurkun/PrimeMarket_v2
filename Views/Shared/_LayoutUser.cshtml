@using PrimeMarket.Data
@{
    var userName = Context.Session.GetString("UserName") ?? "Guest";
    var isVerified = Context.Session.GetString("IsUserVerified") == "true";
    int? uid = Context.Session.GetInt32("UserId");
    IEnumerable<Notification> notifications = Enumerable.Empty<Notification>();
    int unreadCount = 0;
    string userProfileImagePath = Context.Session.GetString("UserProfileImagePath") ?? "/images/placeholder.png";

    if (uid.HasValue)
    {
        using var scope = Context.RequestServices.CreateScope();
        var db = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
        notifications = db.Notifications
                          .Where(n => n.UserId == uid && !n.IsRead)
                          .OrderByDescending(n => n.CreatedAt)
                          .Take(5)
                          .ToList();
        unreadCount = notifications.Count();
        // Get user profile image
        var user = db.Users.FirstOrDefault(u => u.Id == uid.Value);
        if (user != null && !string.IsNullOrEmpty(user.ProfileImagePath))
        {
            userProfileImagePath = user.ProfileImagePath;
        }
    }
}

<!DOCTYPE html>
<html>
<head>
    <link rel="icon" type="image/x-icon" href="~/images/PrimeMarket_Logo_V2.png" />
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" href="/css/UserLayout.css" />
    <link rel="stylesheet" href="/css/notificationstyle.css" />
    <link rel="stylesheet" href="/css/messagenotifications.css" />

    <title>@ViewBag.Title</title>
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        .page-container {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .content-wrap {
            flex: 1;
        }

        footer {
            text-align: center;
            padding: 20px;
            background-color: #333;
            color: white;
            margin-top: 40px;
        }
        .verified-badge {
        display: inline-flex;
        align-items: center;
        margin-left: 5px;
        }

        .verified-badge img {
        width: 16px;
        height: 16px;
        }

        .search-box {
        position: relative;
        width: 300px;
        }

        .search-box input {
        width: 100%;
        padding: 8px 40px 8px 16px;
        border: 1px solid #ddd;
        border-radius: 50px;
        outline: none;
        transition: border-color 0.3s ease;
        }

        .search-box input:focus {
        border-color: #0066cc;
        }

        .search-button {
        position: absolute;
        right: 5px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        cursor: pointer;
        padding: 8px;
        }

        /* User dropdown styles */
        .user-dropdown-wrapper {
        position: relative;
        display: inline-block;
        }

        .user-dropdown-trigger {
        display: flex;
        align-items: center;
        gap: 5px;
        cursor: pointer;
        padding: 5px 10px;
        border-radius: 5px;
        text-decoration: none;
        color: inherit;
        transition: background-color 0.2s ease;
        }

        .user-dropdown-trigger:hover {
        background-color: #f0f0f0;
        }

        .dropdown-arrow {
        width: 0;
        height: 0;
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 5px solid #333;
        margin-left: 5px;
        transition: transform 0.3s ease;
        }

        .user-dropdown-wrapper.open .dropdown-arrow {
        transform: rotate(180deg);
        }

        .user-dropdown-menu {
        display: none;
        position: absolute;
        right: 0;
        top: 100%;
        margin-top: 10px;
        width: 250px;
        background-color: white;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        border-radius: 8px;
        z-index: 1000;
        padding: 10px;
        }

        .user-dropdown-wrapper.open .user-dropdown-menu {
        display: block;
        }

        .dropdown-item {
        display: flex;
        align-items: center;
        gap: 10px;
        padding: 10px;
        color: #333;
        text-decoration: none;
        border-radius: 5px;
        transition: background-color 0.2s ease;
        cursor: pointer;
        width: 100%;
        background: none;
        border: none;
        font-size: 14px;
        text-align: left;
        }

        .dropdown-item:hover {
        background-color: #f0f0f0;
        }

        .dropdown-item img {
        width: 20px;
        height: 20px;
        }

        .dropdown-divider {
        height: 1px;
        background-color: #eee;
        margin: 5px 0;
        }

        .dropdown-item.notification-item {
        position: relative;
        }

        .notification-badge {
        position: absolute;
        top: 5px;
        right: 10px;
        background-color: #dc3545;
        color: white;
        font-size: 10px;
        font-weight: bold;
        min-width: 15px;
        height: 15px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 3px;
        }

        /* Notification submenu */
        .notification-submenu {
        display: none;
        position: absolute;
        left: 100%;
        top: 0;
        width: 350px;
        background-color: white;
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        border-radius: 8px;
        z-index: 1001;
        padding: 10px;
        max-height: 400px;
        overflow-y: auto;
        }

        .notification-item.active .notification-submenu {
        display: block;
        }

        .notification-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
        margin-bottom: 10px;
        }

        .notification-header h3 {
        margin: 0;
        font-size: 16px;
        }

        .mark-all-read {
        background: none;
        border: none;
        color: #0066cc;
        cursor: pointer;
        font-size: 14px;
        padding: 0;
        }

        .notification-list-item {
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease;
        border-left: 3px solid transparent;
        }

        .notification-list-item:hover {
        background-color: #f8f9fa;
        }

        .notification-list-item.unread {
        background-color: #f0f7ff;
        border-left-color: #0066cc;
        }

        .notification-content {
        margin-bottom: 5px;
        }

        .notification-time {
        font-size: 12px;
        color: #888;
        }

        .notification-footer {
        text-align: center;
        padding-top: 10px;
        border-top: 1px solid #eee;
        }

        .view-all-link {
        color: #0066cc;
        text-decoration: none;
        font-size: 14px;
        }

        .view-all-link:hover {
        text-decoration: underline;
        }

        /* Style for searchpagestyle.css */
        .search-body {
        font-family: Calibri, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f9f9f9;
        }

        .search-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 70vh;
        }

        .search-bar {
        display: flex;
        width: 60%;
        max-width: 800px;
        margin: 0 auto;
        transition: all 0.3s ease;
        }

        .search-bar.focused {
        width: 70%;
        }

        .search-bar input {
        flex: 1;
        padding: 15px 20px;
        border: 1px solid #ddd;
        border-radius: 50px 0 0 50px;
        font-size: 18px;
        outline: none;
        transition: border-color 0.3s ease;
        }

        .search-bar input:focus {
        border-color: #0066cc;
        }

        .search-bar button {
        padding: 15px 30px;
        background-color: #0066cc;
        color: white;
        border: none;
        border-radius: 0 50px 50px 0;
        cursor: pointer;
        font-weight: bold;
        transition: background-color 0.3s ease;
        }

        .search-bar button:hover {
        background-color: #0055b3;
        }
    </style>
</head>
<body>
    <div class="page-container">
    <header class="main-header">
        <div class="header-content">
            <a asp-action="User_MainPage" asp-controller="User" class="logo">
                <img style="height: 50px; width: 100px; background-color: #f0f8ff" src="/images/PrimeMarket_Logo_V2.png" alt="PrimeMarket Logo" />
            </a>
            <div class="header-actions">
                <div class="search-box">
                    <form action="@Url.Action("Search", "Listing")" method="get" id="header-search-form">
                        <input type="text" name="query" id="header-search-input" placeholder="Search by title, category or #ID..." />
                        <button type="submit" class="search-button">Search</button>
                    </form>
                </div>

                <!-- User dropdown menu -->
                <div class="user-dropdown-wrapper" id="userDropdown">
                    <div class="user-dropdown-trigger">
                        <span style="display: flex; align-items: center; gap: 5px;">
                            @userName
                            @if (isVerified)
                            {
                                <span class="verified-badge" style="display: inline-flex; vertical-align: middle;">
                                    <img src="/images/verified.png" alt="Verified" title="Verified User" style="width: 16px; height: 16px;" />
                                </span>
                            }
                        </span>
                        <span class="dropdown-arrow"></span>
                    </div>

                    <div class="user-dropdown-menu">
                        <a href="@Url.Action("MyProfilePage", "User")" class="dropdown-item">
                            <img src=@userProfileImagePath alt="Profile" />
                            My Profile
                        </a>

                        <div class="dropdown-item notification-item" id="notificationDropdownItem">
                            <img src="/images/NotificationBell.png" alt="Notifications" />
                            <a asp-action="Index" asp-controller="Notifications" style="text-decoration:none">
                            Notifications
                            </a>
                            @if (unreadCount > 0)
                            {
                                <span class="notification-badge">@(unreadCount > 9 ? "9+" : unreadCount.ToString())</span>
                            }

                            <!-- Notification submenu -->
                            <div class="notification-submenu" id="notificationSubmenu">
                                <div class="notification-header">
                                    <h3>Notifications</h3>
                                    <button class="mark-all-read" id="markAllReadBtn">Mark all as read</button>
                                </div>
                                <div id="notificationsList">
                                    @if (!notifications.Any())
                                    {
                                        <div class="no-notifications" style="text-align: center; padding: 20px;">
                                            <p>No notifications to display</p>
                                        </div>
                                    }
                                    else
                                    {
                                        foreach (var notification in notifications)
                                        {
                                            <div class="notification-list-item @(!notification.IsRead ? "unread" : "")"
                                                 data-id="@notification.Id"
                                                 data-type="@notification.Type"
                                                 data-entity-id="@notification.RelatedEntityId">
                                                <div class="notification-content">@notification.Message</div>
                                                <div class="notification-time">@(((DateTime)notification.CreatedAt).ToString("MMM dd, yyyy HH:mm"))</div>
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="notification-footer">
                                    <a href="@Url.Action("Index", "Notifications")" class="view-all-link">View all notifications</a>
                                </div>
                            </div>
                        </div>

                        <a href="@Url.Action("Conversations", "Message")" class="dropdown-item">
                            <img src="/images/MessagesIcon.png" alt="Messages" />
                            Messages
                        </a>

                        <a href="@Url.Action("MyBookmarks", "User")" class="dropdown-item">
                            <img src="/images/bookmark-button.png" alt="Bookmarks" />
                            My Bookmarks
                        </a>
                            <a href="@Url.Action("MyPurchase", "Payment")" class="dropdown-item">
                                <img src="/images/order_history_icon.png" alt="Shopping Cart" />
                                My Purchases History
                            </a>
                            <a href="@Url.Action("MySales", "Payment")" class="dropdown-item">
                                <img src="/images/sales.png" alt="Shopping Cart" />
                                My Sales History
                            </a>

                        <div class="dropdown-divider"></div>

                        <form asp-action="Logout" asp-controller="User" method="post" style="display: inline; width: 100%;">
                            <button type="submit" class="dropdown-item" style="color: #dc3545;">
                                <img src="/images/logout-icon.png" alt="Logout" style="width: 20px; height: 20px;" />
                                Logout
                            </button>
                        </form>
                    </div>

                </div>
                    <a href="@Url.Action("Cart", "Payment")">
                        <img src="/images/shopping_cart_icon.png" style="width:20px;height:20px;" alt="Shopping Cart" />
                    </a>
                <a asp-action="CreateListing" asp-controller="User"><button class="btn-list">List an Item</button></a>
            </div>
        </div>
    </header>

    <main class="content-wrap">
        @RenderBody()
    </main>

    <script src="/js/category-filtering.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // User dropdown functionality
            const userDropdown = document.getElementById('userDropdown');
            const userDropdownTrigger = userDropdown.querySelector('.user-dropdown-trigger');

            userDropdownTrigger.addEventListener('click', function(e) {
                e.stopPropagation();
                userDropdown.classList.toggle('open');
            });

            // Close dropdown when clicking outside
            document.addEventListener('click', function(e) {
                if (!userDropdown.contains(e.target)) {
                    userDropdown.classList.remove('open');
                }
            });

            // Notification submenu functionality
            const notificationDropdownItem = document.getElementById('notificationDropdownItem');
            const notificationSubmenu = document.getElementById('notificationSubmenu');
            const markAllReadBtn = document.getElementById('markAllReadBtn');
            const notificationItems = document.querySelectorAll('.notification-list-item');

            // Show/hide notification submenu
            notificationDropdownItem.addEventListener('mouseenter', function() {
                this.classList.add('active');
            });

            notificationDropdownItem.addEventListener('mouseleave', function() {
                this.classList.remove('active');
            });

            // Prevent notification submenu from closing dropdown
            notificationSubmenu.addEventListener('click', function(e) {
                e.stopPropagation();
            });

            // Mark all as read
            if (markAllReadBtn) {
                markAllReadBtn.addEventListener('click', function() {
                    fetch('/Notifications/MarkAllAsRead', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update UI
                            document.querySelectorAll('.notification-list-item.unread').forEach(item => {
                                item.classList.remove('unread');
                            });
                            // Remove badge
                            const badge = document.querySelector('.notification-badge');
                            if (badge) badge.style.display = 'none';
                        }
                    })
                    .catch(error => {
                        console.error('Error marking all as read:', error);
                    });
                });
            }

            // Handle notification click
            notificationItems.forEach(item => {
                item.addEventListener('click', function() {
                    const notificationId = this.getAttribute('data-id');
                    const notificationType = this.getAttribute('data-type');
                    const entityId = this.getAttribute('data-entity-id');

                    // Mark as read
                    fetch('/Notifications/MarkAsRead', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `notificationId=${notificationId}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.classList.remove('unread');

                            // Navigate based on notification type
                            window.location.href = `/Notifications/Details?id=${notificationId}`;
                        }
                    })
                    .catch(error => {
                        console.error('Error marking notification as read:', error);
                    });
                });
            });

            // Enhanced search form handling to prevent layout issues
            const searchForm = document.getElementById('header-search-form');
            const searchInput = document.getElementById('header-search-input');

            if (searchForm && searchInput) {
                // Preserve form state during submission to prevent layout shifts
                searchForm.addEventListener('submit', function (e) {
                    const query = searchInput.value.trim();

                    // If query is empty, prevent submission
                    if (query === '') {
                        e.preventDefault();
                        return false;
                    }

                    // If query is just a number without a # prefix, show modal
                    if (/^\d+$/.test(query)) {
                        e.preventDefault();

                        // Show the ID search format modal
                        showIdSearchModal();

                        // Suggest the correct format
                        searchInput.value = '#' + query;
                        return false;
                    }

                    // Add a loading state to prevent perception of layout shift
                    document.body.classList.add('searching');

                    // Continue with normal submission
                    return true;
                });

                // Focus/blur events to maintain consistent sizing
                searchInput.addEventListener('focus', function () {
                    this.parentNode.classList.add('focus');
                });

                searchInput.addEventListener('blur', function () {
                    this.parentNode.classList.remove('focus');
                });
            }

            // Function to show ID search modal
            function showIdSearchModal() {
                // Check if modal already exists
                let modal = document.getElementById('idSearchModal');

                // If not, create it
                if (!modal) {
                    modal = document.createElement('div');
                    modal.id = 'idSearchModal';
                    modal.className = 'modal';
                    modal.style.display = 'flex';
                    modal.style.position = 'fixed';
                    modal.style.top = '0';
                    modal.style.left = '0';
                    modal.style.width = '100%';
                    modal.style.height = '100%';
                    modal.style.backgroundColor = 'rgba(0,0,0,0.5)';
                    modal.style.zIndex = '1000';
                    modal.style.justifyContent = 'center';
                    modal.style.alignItems = 'center';

                    modal.innerHTML = `
                        <div style="background-color: white; padding: 30px; border-radius: 10px; max-width: 400px; width: 100%; text-align: center;">
                            <h2 style="margin-top: 0; color: #0066cc;">ID Search Format</h2>
                            <p>When searching for a listing by ID, please add a # symbol before the number.</p>
                            <p>Example: <strong>#123</strong></p>
                            <div style="margin-top: 20px;">
                                <button id="closeModal" style="padding: 8px 16px; border-radius: 5px; cursor: pointer; border: none; font-weight: bold; background-color: #0066cc; color: white;">Got it</button>
                            </div>
                        </div>
                    `;

                    document.body.appendChild(modal);

                    // Add event listener to close button
                    document.getElementById('closeModal').addEventListener('click', function () {
                        modal.style.display = 'none';
                    });

                    // Close modal if clicked outside
                    modal.addEventListener('click', function (e) {
                        if (e.target === modal) {
                            modal.style.display = 'none';
                        }
                    });
                } else {
                    // Show existing modal
                    modal.style.display = 'flex';
                }
            }
        });
    </script>

        <footer>
    <div class="footer-content">
        <p style="text-align:center;">&copy; 2025 PrimeMarket. All rights reserved.</p>
        <ul class="footer-links" style="color:white; list-style-type:none; display:flex; justify-content:center; gap:20px; padding:0; margin:10px 0;">
            <li><a style="color:white; text-decoration:none;" href="/Privacy">Privacy Policy</a></li>
            <li><a style="color:white; text-decoration:none;" href="/Terms">Terms of Service</a></li>
            <li><a style="color:white; text-decoration:none;" href="/Contact">Contact Us</a></li>
        </ul>
    </div>
</footer>
    </div>
</body>
</html>