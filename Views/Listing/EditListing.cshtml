@model PrimeMarket.Models.ViewModel.ListingViewModel
@using PrimeMarket.Helpers
@{
    ViewData["Title"] = "Edit Listing";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";

    // Get dynamic fields using the helper class
    var productFields = ProductFieldHelper.GetProductFields(Model.Category, Model.SubCategory, Model.DetailCategory);
}

<div class="center-wrapper">
<div class="page-wrapper">
    <div class="container" style="margin-top: 120px; margin-bottom: 50px;">
        <div class="edit-listing-header">
            <h1>Edit Listing</h1>
            <a asp-action="MyProfilePage" asp-controller="User" class="btn-back">
                <i class="fas fa-arrow-left"></i> Back to My Listings
            </a>
        </div>

        @if (!ViewData.ModelState.IsValid)
        {
            <div class="alert alert-danger">
                <ul>
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <li>@error.ErrorMessage</li>
                    }
                </ul>
            </div>
        }

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                @TempData["ErrorMessage"]
            </div>
        }

        <div class="alert alert-info">
            <strong>Note:</strong> Editing an already approved listing will require admin review again.
        </div>

        <div class="edit-form-container">
            <form id="editListingForm" method="post" action="@Url.Action("EditListing")" enctype="multipart/form-data">
                @Html.AntiForgeryToken()
                <input type="hidden" asp-for="Id" value="@Model.Id" />
                <input type="hidden" asp-for="Category" value="@Model.Category" />
                <input type="hidden" asp-for="SubCategory" value="@Model.SubCategory" />
                <input type="hidden" asp-for="DetailCategory" value="@(Model.DetailCategory ?? "")" />
                <input type="hidden" asp-for="Condition" value="@Model.Condition" />

                <div class="form-section">
                    <h2>Basic Information</h2>

                    <div class="form-group">
                        <label asp-for="Title">Title <span class="required">*</span></label>
                        <input type="text" asp-for="Title" class="form-control" required />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="Price">Price (TL) <span class="required">*</span></label>
                        <input type="number" asp-for="Price" class="form-control" step="0.01" min="0" required />
                        <span asp-validation-for="Price" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="Description">Description <span class="required">*</span></label>
                        <textarea asp-for="Description" class="form-control" rows="5" required></textarea>
                        <span asp-validation-for="Description" class="text-danger"></span>
                    </div>

                    <div class="form-group">
                        <label asp-for="Location">Location <span class="required">*</span></label>
                        <select asp-for="Location" class="form-control" required>
                            <option value="">Select Location</option>
                            <option value="Istanbul">Istanbul</option>
                            <option value="Ankara">Ankara</option>
                            <option value="Izmir">Izmir</option>
                            <option value="Bursa">Bursa</option>
                            <option value="Antalya">Antalya</option>
                            <option value="Other">Other</option>
                        </select>
                        <span asp-validation-for="Location" class="text-danger"></span>
                    </div>
                </div>

                <div class="form-section">
                    <h2>Images</h2>
                    <p class="info-text">At least one image is required. You can delete existing images and/or add new ones.</p>

                    <div id="imagesErrorContainer" class="alert alert-danger" style="display: none;">
                        <p>At least one image is required. Please upload a new image or keep at least one existing image.</p>
                    </div>

                    @if (Model.Images != null && Model.Images.Count > 0)
                    {
                        <div class="current-images">
                            <h3>Current Images</h3>
                            <div class="image-gallery" id="currentImagesGallery">
                                @foreach (var image in Model.Images)
                                {
                                    <div class="image-item" data-id="@image.Id">
                                        <div class="image-container">
                                            <img src="@image.ImagePath" alt="Listing Image">
                                            @if (image.IsMainImage)
                                            {
                                                <span class="main-image-badge">Main Image</span>
                                            }
                                            <button type="button" class="delete-image-btn" onclick="deleteImage(@image.Id, this)">&times;</button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        <label for="newImages">Add New Images</label>
                        <input type="file" id="newImages" name="newImages" multiple accept="image/*" class="form-control" />
                        <small class="form-text text-muted">You can select multiple images at once.</small>
                        <div id="image-preview" class="image-preview"></div>
                    </div>

                    <div id="deletedImagesContainer">
                        <!-- Hidden inputs for deleted images will be added here by JavaScript -->
                    </div>
                </div>

                @if (productFields.Any())
                {
                    <div class="form-section">
                        <h2>Specific Details</h2>
                        <p class="category-info">Category: @Model.Category > @Model.SubCategory @(!string.IsNullOrEmpty(Model.DetailCategory) ? $"> {Model.DetailCategory}" : "")</p>

                        <div class="dynamic-fields">
                            @foreach (var field in productFields)
                            {
                                <div class="form-group">
                                    <label for="@field.Name">@field.Label @(field.IsRequired ? Html.Raw("<span class=\"required\">*</span>") : "")</label>
                                    
                                    @{
                                        // Get existing value for this field
                                        var existingValue = "";
                                        if (Model.DynamicProperties != null)
                                        {
                                            // Try exact match first
                                            Model.DynamicProperties.TryGetValue(field.Name, out existingValue);
                                            
                                            // If no exact match, try case-insensitive
                                            if (string.IsNullOrEmpty(existingValue))
                                            {
                                                var matchedKey = Model.DynamicProperties.Keys
                                                    .FirstOrDefault(k => string.Equals(k, field.Name, StringComparison.OrdinalIgnoreCase));
                                                if (matchedKey != null)
                                                {
                                                    existingValue = Model.DynamicProperties[matchedKey];
                                                }
                                            }
                                        }
                                    }

                                    @if (field.Type == "select" && field.Options != null && field.Options.Any())
                                    {
                                        <select id="@field.Name" name="DynamicProperties[@field.Name]" class="form-control" @(field.IsRequired ? Html.Raw("required") : Html.Raw(""))>
                                            <option value="">Select @field.Label</option>
                                            @foreach (var option in field.Options)
                                            {
                                                var isSelected = false;
                                                if (!string.IsNullOrEmpty(existingValue))
                                                {
                                                    isSelected = string.Equals(option, existingValue, StringComparison.OrdinalIgnoreCase) ||
                                                                 (existingValue == "True" && option == "Yes") ||
                                                                 (existingValue == "False" && option == "No");
                                                }
                                                    @if (isSelected)
                                                    {
                                                        <option value="@option" selected>@option</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@option">@option</option>
                                                    }                                            }
                                        </select>
                                    }
                                    else if (field.Type == "number")
                                    {
                                        <input type="number" id="@field.Name" name="DynamicProperties[@field.Name]" 
                                               class="form-control" placeholder="@field.Placeholder" 
                                               value="@existingValue" step="any" min="0"
                                               @(field.IsRequired ? Html.Raw("required") : Html.Raw("")) />
                                    }
                                    else
                                    {
                                        <input type="text" id="@field.Name" name="DynamicProperties[@field.Name]" 
                                               class="form-control" placeholder="@field.Placeholder" 
                                               value="@existingValue"
                                               @(field.IsRequired ? Html.Raw("required") : Html.Raw("")) />
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-section">
                        <h2>Specific Details</h2>
                        <p class="category-info">Category: @Model.Category > @Model.SubCategory @(!string.IsNullOrEmpty(Model.DetailCategory) ? $"> {Model.DetailCategory}" : "")</p>
                        <p>No specific details available for this category.</p>
                    </div>
                }

                <div class="form-actions">
                    <a asp-action="MyProfilePage" asp-controller="User" class="btn-cancel">Cancel</a>
                    <button type="submit" class="btn-save" id="submitBtn">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
</div>

<style>
    .center-wrapper {
        display: flex;
        justify-content: center;
        padding-top: 60px;
        padding-bottom: 60px;
    }

    .logo img {
        width: 120px;
        height: 50px;
        object-fit: cover;
        border-radius: 8px;
    }

    .page-wrapper {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .container {
        width: 100%;
    }

    .required {
        color: red;
    }

    .image-item.marked-for-deletion {
        opacity: 0.5;
        position: relative;
    }

    .image-item.marked-for-deletion::after {
        content: "Will be deleted";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(220, 53, 69, 0.9);
        color: white;
        padding: 5px 10px;
        border-radius: 3px;
        font-size: 12px;
    }

    .alert-info {
        background-color: #d1ecf1;
        border-color: #bee5eb;
        color: #0c5460;
        padding: 10px;
        border-radius: 50px;
        margin-bottom: 20px;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        padding: 12px 15px;
        border-radius: 50px;
        margin-bottom: 20px;
    }

    .alert-danger ul {
        margin: 0;
        padding-left: 20px;
    }

    .edit-listing-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .btn-back {
        display: inline-flex;
        align-items: center;
        gap: 5px;
        padding: 8px 15px;
        background-color: #f0f0f0;
        color: #333;
        border-radius: 50px;
        text-decoration: none;
    }

    .edit-form-container {
        background-color: #ffffff;
        border-radius: 20px;
        padding: 30px;
    }

    .form-section {
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 1px solid #ddd;
    }

    .form-section:last-child {
        border-bottom: none;
        margin-bottom: 0;
        padding-bottom: 0;
    }

    .form-section h2 {
        margin-bottom: 20px;
        color: #333;
        font-size: 22px;
        text-align: center;
    }

    .info-text {
        color: #666;
        margin-bottom: 15px;
        text-align: center;
    }

    .category-info {
        background-color: #e2f0fd;
        padding: 10px 15px;
        border-radius: 50px;
        margin-bottom: 20px;
        color: #0066cc;
        text-align: center;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 10px 20px;
        border: 1px solid #ddd;
        border-radius: 50px;
        font-size: 16px;
    }

    textarea.form-control {
        resize: vertical;
        min-height: 120px;
        border-radius: 25px;
        padding: 15px 20px;
    }

    input[type="file"].form-control {
        padding: 10px 20px;
        border-radius: 50px;
    }

    select.form-control {
        border-radius: 50px;
        padding: 10px 20px;
        appearance: none;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 20px center;
        background-size: 16px 12px;
        padding-right: 40px;
    }

    .form-control:focus {
        border-color: #0066cc;
        outline: none;
        box-shadow: 0 0 0 3px rgba(0, 102, 204, 0.1);
    }

    .text-danger {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
        display: block;
    }

    .current-images h3 {
        margin-bottom: 10px;
        font-size: 18px;
        text-align: center;
    }

    .image-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 10px;
        margin-bottom: 20px;
        justify-items: center;
    }

    .image-item {
        position: relative;
        border-radius: 15px;
        overflow: hidden;
        height: 150px;
        width: 100%;
        max-width: 150px;
    }

    .image-container {
        position: relative;
        width: 100%;
        height: 100%;
    }

    .image-item img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .main-image-badge {
        position: absolute;
        top: 10px;
        left: 10px;
        background-color: #0066cc;
        color: white;
        padding: 3px 8px;
        border-radius: 50px;
        font-size: 12px;
    }

    .delete-image-btn {
        position: absolute;
        top: 5px;
        right: 5px;
        width: 25px;
        height: 25px;
        background-color: rgba(220, 53, 69, 0.8);
        color: white;
        border: none;
        border-radius: 50%;
        font-size: 16px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
    }

    .delete-image-btn:hover {
        background-color: #dc3545;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 50px;
        padding: 8px 15px;
        cursor: pointer;
        margin-bottom: 15px;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }

    .image-preview {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 10px;
        justify-content: center;
    }

    .image-preview img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 15px;
    }

    .dynamic-fields {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 15px;
    }

    .form-actions {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 30px;
    }

    .btn-cancel {
        padding: 10px 30px;
        background-color: #f0f0f0;
        color: #333;
        border-radius: 50px;
        cursor: pointer;
        text-decoration: none;
        border: none;
        font-size: 16px;
    }

    .btn-save {
        padding: 10px 30px;
        background-color: #0066cc;
        color: white;
        border: none;
        border-radius: 50px;
        cursor: pointer;
        font-size: 16px;
    }

    .btn-save:hover {
        background-color: #0055b3;
        color: white;
    }

    .btn-cancel:hover {
        background-color: #dc5454;
        color: white;
    }

    @@media (max-width: 768px) {
        .page-wrapper {
            padding: 0 15px;
        }

        .edit-listing-header {
            flex-direction: column;
            align-items: center;
            gap: 10px;
            text-align: center;
        }

        .dynamic-fields {
            grid-template-columns: 1fr;
        }

        .form-actions {
            flex-direction: column;
            align-items: center;
        }

        .btn-cancel, .btn-save {
            width: 100%;
            max-width: 300px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Track deleted image IDs
        const deletedImageIds = [];
        const newImagesInput = document.getElementById('newImages');
        const deletedImagesContainer = document.getElementById('deletedImagesContainer');
        const imagesErrorContainer = document.getElementById('imagesErrorContainer');

        // Image preview functionality
        const previewContainer = document.getElementById('image-preview');

        newImagesInput.addEventListener('change', function() {
            previewContainer.innerHTML = '';
            updateImagesValidation();

            if (this.files) {
                Array.from(this.files).forEach(file => {
                    if (!file.type.match('image.*')) return;

                    const reader = new FileReader();

                    reader.onload = function(e) {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.alt = file.name;
                        previewContainer.appendChild(img);
                    };

                    reader.readAsDataURL(file);
                });
            }
        });

        // Delete single image
        window.deleteImage = function(imageId, buttonElement) {
            const imageItem = buttonElement.closest('.image-item');

            // Check if this would remove all images
            const currentImageCount = document.querySelectorAll('.image-item').length;
            const hasNewImages = newImagesInput.files.length > 0;

            if (currentImageCount <= 1 && !hasNewImages) {
                imagesErrorContainer.style.display = 'block';
                return;
            }

            // Add to deleted IDs array
            deletedImageIds.push(imageId);

            // Create hidden input for the server
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'DeletedImageIds';
            hiddenInput.value = imageId;
            deletedImagesContainer.appendChild(hiddenInput);

            // Remove from UI
            imageItem.remove();

            // Hide error message if it was showing
            imagesErrorContainer.style.display = 'none';

            // Check if all images are now deleted
            updateImagesUI();
        };

        // Helper function to update the images UI
        function updateImagesUI() {
            const imageItems = document.querySelectorAll('.image-item');
            const currentImages = document.querySelector('.current-images');

            if (imageItems.length === 0 && currentImages) {
                currentImages.innerHTML = '<p>All current images will be deleted. New uploaded images will be used instead.</p>';
            }
        }

        // Helper function to check image validation state
        function updateImagesValidation() {
            const imageItems = document.querySelectorAll('.image-item');
            const hasExistingImages = imageItems.length > 0;
            const hasNewImages = newImagesInput.files.length > 0;

            if (!hasExistingImages && !hasNewImages) {
                imagesErrorContainer.style.display = 'block';
            } else {
                imagesErrorContainer.style.display = 'none';
            }
        }

        // Form submission validation
        document.getElementById('editListingForm').addEventListener('submit', function(e) {
            const imageItems = document.querySelectorAll('.image-item');
            const hasExistingImages = imageItems.length > 0;
            const hasNewImages = newImagesInput.files.length > 0;

            if (!hasExistingImages && !hasNewImages) {
                e.preventDefault();
                imagesErrorContainer.style.display = 'block';

                // Scroll to the error message
                imagesErrorContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
                return false;
            }
        });
    });
</script>