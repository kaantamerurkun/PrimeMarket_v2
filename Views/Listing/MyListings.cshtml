@model List<PrimeMarket.Models.Listing>
@{
    ViewData["Title"] = "My Listings";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}

<div class="container" style="margin-top: 120px; margin-bottom: 50px;">
    <div class="my-listings-header">
        <h1>My Listings</h1>
        <a href="@Url.Action("CreateListing", "User")" class="btn-new-listing">
            <i class="fas fa-plus"></i> Create New Listing
        </a>
    </div>
    
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="listings-filter">
        <button class="filter-btn active" data-filter="all">All</button>
        <button class="filter-btn" data-filter="pending">Pending</button>
        <button class="filter-btn" data-filter="approved">Approved</button>
        <button class="filter-btn" data-filter="rejected">Rejected</button>
        <button class="filter-btn" data-filter="sold">Sold</button>
    </div>

    <div class="my-listings-container">
        @if (Model == null || Model.Count == 0)
        {
            <div class="empty-listings">
                <i class="fas fa-list-alt"></i>
                <p>You don't have any listings yet</p>
                <a href="@Url.Action("CreateListing", "User")" class="btn-create-first">Create Your First Listing</a>
            </div>
        }
        else
        {
            <div class="listings-grid">
                @foreach (var listing in Model)
                {
                    string statusClass = listing.Status.ToString().ToLower();
                    string mainImage = listing.Images != null && listing.Images.Any()
                    ? (listing.Images.FirstOrDefault(i => i.IsMainImage)?.ImagePath ?? listing.Images.First().ImagePath)
                    : "/images/placeholder.png";

                    <div class="listing-card @statusClass" data-status="@listing.Status.ToString().ToLower()">
                        <div class="listing-image">
                            <img src="@mainImage" alt="@listing.Title">
                            <div class="listing-status @statusClass">@listing.Status.ToString()</div>
                        </div>
                        <div class="listing-details">
                            <h3>@listing.Title</h3>
                            <p class="listing-price">@listing.Price.ToString("C")</p>
                            <p class="listing-date">Listed on @(((DateTime)listing.CreatedAt).ToString("MMM dd, yyyy"))</p>

                            @if (listing.Status == PrimeMarket.Models.Enum.ListingStatus.Rejected)
                            {
                                <div class="rejection-reason">
                                    <p><strong>Rejection Reason:</strong> @listing.RejectionReason</p>
                                </div>
                            }
                        </div>
                        <div class="listing-actions">
                            <a href="@Url.Action("User_Listing_Details", "User", new { id = listing.Id })" class="btn-view">View</a>

                            @if (listing.Status != PrimeMarket.Models.Enum.ListingStatus.Sold)
                            {
                                <a href="@Url.Action("EditListing", new { id = listing.Id })" class="btn-edit">Edit</a>
                                <button class="btn-delete" data-id="@listing.Id">Delete</button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Confirm Deletion</h2>
        <p>Are you sure you want to delete this listing?</p>
        <p>This action cannot be undone.</p>
        <div class="modal-actions">
            <button id="cancelDelete" class="btn-cancel">Cancel</button>
            <button id="confirmDelete" class="btn-confirm">Delete</button>
        </div>
    </div>
</div>

<style>
    .my-listings-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .btn-new-listing {
        padding: 10px 20px;
        background-color: #0066cc;
        color: white;
        border: none;
        border-radius: 5px;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

        .btn-new-listing:hover {
            background-color: #0055b3;
        }

    .alert {
        padding: 12px 15px;
        border-radius: 5px;
        margin-bottom: 20px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .listings-filter {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .filter-btn {
        padding: 8px 15px;
        background-color: #f0f0f0;
        color: #333;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

        .filter-btn.active {
            background-color: #0066cc;
            color: white;
        }

    .empty-listings {
        text-align: center;
        padding: 50px;
        background-color: #f8f9fa;
        border-radius: 10px;
    }

        .empty-listings i {
            font-size: 50px;
            color: #ddd;
            margin-bottom: 20px;
        }

        .empty-listings p {
            color: #666;
            font-size: 18px;
            margin-bottom: 20px;
        }

    .btn-create-first {
        display: inline-block;
        padding: 10px 20px;
        background-color: #0066cc;
        color: white;
        text-decoration: none;
        border-radius: 5px;
    }

    .listings-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }

    .listing-card {
        background-color: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .listing-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

    .listing-image {
        position: relative;
        height: 200px;
    }

        .listing-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .listing-status {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 5px 10px;
        border-radius: 15px;
        font-size: 12px;
        font-weight: bold;
        text-transform: uppercase;
    }

        .listing-status.pending {
            background-color: #ffc107;
            color: #212529;
        }

        .listing-status.approved {
            background-color: #28a745;
            color: white;
        }

        .listing-status.rejected {
            background-color: #dc3545;
            color: white;
        }

        .listing-status.sold {
            background-color: #17a2b8;
            color: white;
        }

    .listing-details {
        padding: 15px;
    }

        .listing-details h3 {
            margin: 0 0 10px 0;
            font-size: 18px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    .listing-price {
        font-weight: bold;
        font-size: 18px;
        color: #0066cc;
        margin-bottom: 5px;
    }

    .listing-date {
        color: #666;
        font-size: 14px;
        margin-bottom: 10px;
    }

    .rejection-reason {
        background-color: #fff3cd;
        border-left: 3px solid #ffc107;
        padding: 10px;
        margin-top: 10px;
        font-size: 14px;
    }

    .listing-actions {
        display: flex;
        gap: 5px;
        padding: 0 15px 15px 15px;
    }

    .btn-view, .btn-edit, .btn-delete {
        flex: 1;
        padding: 8px 0;
        text-align: center;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        font-size: 14px;
    }

    .btn-view {
        background-color: #f0f0f0;
        color: #333;
    }

    .btn-edit {
        background-color: #17a2b8;
        color: white;
    }

    .btn-delete {
        background-color: #dc3545;
        color: white;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
    }

    .modal-content {
        background-color: white;
        margin: 15% auto;
        padding: 20px;
        border-radius: 10px;
        width: 90%;
        max-width: 500px;
        position: relative;
    }

    .close {
        position: absolute;
        top: 10px;
        right: 20px;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    .btn-cancel, .btn-confirm {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-cancel {
        background-color: #f0f0f0;
        color: #333;
    }

    .btn-confirm {
        background-color: #dc3545;
        color: white;
    }

    @@media (max-width: 768px) {
        .my-listings-header

    {
        flex-direction: column;
        align-items: flex-start;
        gap: 10px;
    }

    .listings-grid {
        grid-template-columns: 1fr;
    }

    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Filter buttons functionality
        const filterButtons = document.querySelectorAll('.filter-btn');
        const listingCards = document.querySelectorAll('.listing-card');

        filterButtons.forEach(button => {
            button.addEventListener('click', function() {
                const filter = this.getAttribute('data-filter');

                // Update active button
                filterButtons.forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');

                // Filter listings
                listingCards.forEach(card => {
                    if (filter === 'all' || card.getAttribute('data-status') === filter) {
                        card.style.display = 'block';
                    } else {
                        card.style.display = 'none';
                    }
                });

                // Show empty state if no listings match the filter
                const visibleListings = document.querySelectorAll('.listing-card[style="display: block"]');
                const emptyState = document.querySelector('.empty-listings');
                const listingsGrid = document.querySelector('.listings-grid');

                if (visibleListings.length === 0 && listingsGrid) {
                    if (!emptyState) {
                        const emptyDiv = document.createElement('div');
                        emptyDiv.className = 'empty-listings';
                        emptyDiv.innerHTML = `
                            <i class="fas fa-filter"></i>
                            <p>No listings found for this filter</p>
                            <button class="filter-btn" data-filter="all">Show All Listings</button>
                        `;

                        listingsGrid.parentNode.appendChild(emptyDiv);

                        // Add event listener to the "Show All Listings" button
                        emptyDiv.querySelector('.filter-btn').addEventListener('click', function() {
                            filterButtons.forEach(btn => {
                                if (btn.getAttribute('data-filter') === 'all') {
                                    btn.click();
                                }
                            });
                            emptyDiv.remove();
                        });

                        listingsGrid.style.display = 'none';
                    }
                } else {
                    if (emptyState) {
                        emptyState.remove();
                    }
                    if (listingsGrid) {
                        listingsGrid.style.display = 'grid';
                    }
                }
            });
        });

        // Delete listing functionality
        const deleteButtons = document.querySelectorAll('.btn-delete');
        const deleteModal = document.getElementById('deleteModal');
        const closeModal = document.querySelector('.close');
        const cancelDelete = document.getElementById('cancelDelete');
        const confirmDelete = document.getElementById('confirmDelete');
        let listingToDelete = null;

        deleteButtons.forEach(button => {
            button.addEventListener('click', function() {
                listingToDelete = this.getAttribute('data-id');
                deleteModal.style.display = 'block';
            });
        });

        closeModal.addEventListener('click', function() {
            deleteModal.style.display = 'none';
        });

        cancelDelete.addEventListener('click', function() {
            deleteModal.style.display = 'none';
        });

        window.addEventListener('click', function(event) {
            if (event.target === deleteModal) {
                deleteModal.style.display = 'none';
            }
        });

        confirmDelete.addEventListener('click', function() {
            if (listingToDelete) {
                deleteListing(listingToDelete);
            }
        });

        function deleteListing(listingId) {
            fetch('/Listing/DeleteListing', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: `id=${listingId}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    deleteModal.style.display = 'none';

                    // Remove the listing card with animation
                    const listingCard = document.querySelector(`.listing-card[data-id="${listingId}"]`);
                    if (listingCard) {
                        listingCard.style.opacity = '0';
                        listingCard.style.transform = 'scale(0.8)';

                        setTimeout(() => {
                            listingCard.remove();

                            // Check if there are any listings left
                            const remainingListings = document.querySelectorAll('.listing-card');
                            if (remainingListings.length === 0) {
                                document.querySelector('.my-listings-container').innerHTML = `
                                    <div class="empty-listings">
                                        <i class="fas fa-list-alt"></i>
                                        <p>You don't have any listings yet</p>
                                        <a href="/User/CreateListing" class="btn-create-first">Create Your First Listing</a>
                                    </div>
                                `;
                            }
                        }, 300);
                    }

                    // Show success message
                    const successAlert = document.createElement('div');
                    successAlert.className = 'alert alert-success';
                    successAlert.textContent = 'Listing deleted successfully';

                    const header = document.querySelector('.my-listings-header');
                    header.parentNode.insertBefore(successAlert, header.nextSibling);

                    // Remove alert after 3 seconds
                    setTimeout(() => {
                        successAlert.style.opacity = '0';
                        setTimeout(() => successAlert.remove(), 300);
                    }, 3000);
                } else {
                    // Show error message
                    alert(data.message || 'Error deleting listing. Please try again.');
                    deleteModal.style.display = 'none';
                }
            })
            .catch(error => {
                console.error('Error deleting listing:', error);
                alert('Error deleting listing. Please try again.');
                deleteModal.style.display = 'none';
            });
        }
    });
</script>

<!-- Add Font Awesome for icons -->
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
```