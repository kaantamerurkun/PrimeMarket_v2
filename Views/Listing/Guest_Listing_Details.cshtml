@model PrimeMarket.Models.ViewModel.ListingDetailsViewModel

@{
    ViewData["Title"] = Model.Listing.Title;
    Layout = "~/Views/Shared/_LayoutGuest.cshtml";
}

<div class="container" style="margin-top: 120px; margin-bottom: 50px;">
    <nav class="breadcrumb">
        <a href="@Url.Action("Guest_Listing_Details", "Listing")">Home</a> &gt;
        <a href="#">@Model.Listing.Category</a> &gt;
        <a href="#">@Model.Listing.SubCategory</a>
        @if (!string.IsNullOrEmpty(Model.Listing.DetailCategory))
        {
            <span> &gt; <a href="#">@Model.Listing.DetailCategory</a></span>
        }
    </nav>

    <div class="listing-header">
        <h1>@Model.Listing.Title</h1>
        <div class="price">@Model.Listing.Price.ToString("C")</div>
    </div>

    <div class="main-content">
        <div class="image-gallery">
            @if (Model.Listing.Images != null && Model.Listing.Images.Any())
            {
                var mainImage = Model.Listing.Images.FirstOrDefault(i => i.IsMainImage)?.ImagePath ?? Model.Listing.Images.First().ImagePath;
                <img src="@mainImage" alt="@Model.Listing.Title" class="main-image" id="main-image">

                <div class="thumbnail-container">
                    @foreach (var image in Model.Listing.Images)
                    {
                        <img src="@image.ImagePath" alt="@Model.Listing.Title" class="thumbnail" onclick="changeMainImage('@image.ImagePath')">
                    }
                </div>
            }
            else
            {
                <img src="/images/placeholder.png" alt="No Image Available" class="main-image">
            }
        </div>

        <div class="property-details">
            <div class="detail-item">
                <span class="label">Condition:</span>
                <span class="value">@Model.Listing.Condition</span>
            </div>
            <div class="detail-item">
                <span class="label">Category:</span>
                <span class="value">@Model.Listing.Category</span>
            </div>
            <div class="detail-item">
                <span class="label">Subcategory:</span>
                <span class="value">@Model.Listing.SubCategory</span>
            </div>
            @if (!string.IsNullOrEmpty(Model.Listing.DetailCategory))
            {
                <div class="detail-item">
                    <span class="label">Detail Category:</span>
                    <span class="value">@Model.Listing.DetailCategory</span>
                </div>
            }
            <div class="detail-item">
                <span class="label">Location:</span>
                <span class="value">@Model.Listing.Location</span>
            </div>
            <div class="detail-item">
                <span class="label">Listed Date:</span>
                <span class="value">@(((DateTime)Model.Listing.CreatedAt).ToString("MMMM dd, yyyy"))</span>
            </div>

            <!-- Action Buttons -->
            <div style="display:flex; gap:10px;justify-content: space-between;margin-top: 15px" class="action-buttons">
                <a asp-action="Login" asp-controller="User">
                <button style="display: flex;flex: 0 0 30%;font-size:0.8em" class="btn-bookmark"
                        onclick="toggleBookmark(@Model.Listing.Id)"
                        id="bookmark-btn">
                    @(Model.IsBookmarked ? "Remove from Bookmark" : "Add to Bookmark")
                </button>
                </a>
                <a asp-action="Login" asp-controller="Login">
                <a href="@Url.Action("Checkout", "Payment", new { listingId = Model.Listing.Id })">
                    <button style="display:flex;flex: 0 0 30%;font-size:0.8em" class="btn-buynow">Buy Now</button>
                </a>
                </a>
            </div>
        </div>
    </div>

    <!-- Product Specifications -->
    @if (Model.Product != null)
    {
        <div class="product-specifications">
            <h3>Product Specifications</h3>
            @foreach (var prop in Model.Product.GetType().GetProperties())
            {
                if (prop.Name != "Id" && prop.Name != "ListingId" && prop.Name != "Listing")
                {
                    var value = prop.GetValue(Model.Product);
                    if (value != null && !string.IsNullOrEmpty(value.ToString()))
                    {
                        <div class="detail-item">
                            <span class="label">@prop.Name:</span>
                            <span class="value">@value</span>
                        </div>
                    }
                }
            }
        </div>
    }

    <!-- Description -->
    <div class="description-section">
        <h3>Description</h3>
        <div class="description-content">
            @Html.Raw(Model.Listing.Description.Replace("\n", "<br>"))
        </div>
    </div>

    <!-- Seller Info -->
    <div class="seller-info">
        <div class="seller-card">
            <img src="@(string.IsNullOrEmpty(Model.Listing.Seller?.ProfileImagePath) ? "/images/PrimeMarket_Logo_V2.png" : Model.Listing.Seller.ProfileImagePath)"
                 alt="Seller Photo" class="seller-photo">
            <div class="seller-details">
                <h3>@Model.Listing.Seller?.FirstName @Model.Listing.Seller?.LastName</h3>
                <p class="phone">@(string.IsNullOrEmpty(Model.Listing.Seller?.PhoneNumber) ? "No phone number" : Model.Listing.Seller.PhoneNumber)</p>

                <!-- Message/Offer Buttons -->
                @if (!Model.IsOwner)
                {
                    <a asp-action="Login" asp-controller="User">
                    <a href="@Url.Action("StartConversation", "Message", new { userId = Model.Listing.SellerId, listingId = Model.Listing.Id })">
                        <button class="btn-sendmessage">Send Message</button>
                    </a>
                    </a>
                    <a asp-action="Login" asp-controller="User">
                    <button class="btn-makeoffer" onclick="openOfferModal()">Make an Offer</button>
                    </a>
                }
                else
                {
                    <p class="owner-badge">You are the seller of this listing</p>
                }
            </div>
        </div>
    </div>

    <!-- Related Listings -->
    @if (Model.RelatedListings != null && Model.RelatedListings.Any())
    {
        <div class="related-listings">
            <h3>Similar Listings</h3>
            <div class="related-listings-grid">
                @foreach (var related in Model.RelatedListings)
                {
                    <a href="@Url.Action("Details", "Listing", new { id = related.Id })" class="related-listing-item">
                        <div class="related-image">
                            @{
                                var relatedImage = related.Images?.FirstOrDefault(i => i.IsMainImage)?.ImagePath
                                ?? related.Images?.FirstOrDefault()?.ImagePath
                                ?? "/images/placeholder.png";
                            }
                            <img src="@relatedImage" alt="@related.Title">
                        </div>
                        <div class="related-info">
                            <h4>@related.Title</h4>
                            <p class="related-price">@related.Price.ToString("C")</p>
                        </div>
                    </a>
                }
            </div>
        </div>
    }
</div>

<!-- Offer Modal -->
<div id="offerModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeOfferModal()">&times;</span>
        <h2>Make an Offer</h2>
        <form id="offerForm">
            <input type="hidden" id="listingId" value="@Model.Listing.Id">
            <label for="offerAmount">Your Offer (@Model.Listing.Price.ToString("C") is the asking price):</label>
            <input style="border-radius:50px; padding:10px" type="number" id="offerAmount" name="offerAmount"
                   required min="1" max="@Model.Listing.Price" step="0.01" value="@Math.Round(Model.Listing.Price * 0.9m, 2)">
            <br><br>
            <label for="offerMessage">Message (optional):</label><br>
            <textarea id="offerMessage" name="offerMessage" rows="4" cols="40"
                      placeholder="Explain why you're making this offer..."></textarea>
            <br><br>
            <button type="submit" class="btn-sendmessage">Send Offer</button>
        </form>
    </div>
</div>

<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .breadcrumb {
        display: flex;
        margin-bottom: 20px;
        font-size: 14px;
        color: #666;
    }

        .breadcrumb a {
            color: #0066cc;
            text-decoration: none;
            margin: 0 5px;
        }

            .breadcrumb a:first-child {
                margin-left: 0;
            }

            .breadcrumb a:hover {
                text-decoration: underline;
            }

    .listing-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .listing-header h1 {
            margin: 0;
            font-size: 24px;
            flex: 1;
        }

    .price {
        font-size: 24px;
        font-weight: bold;
        color: #0066cc;
    }

    .main-content {
        display: flex;
        gap: 30px;
        margin-bottom: 30px;
    }

    .image-gallery {
        flex: 0 0 60%;
    }

    .main-image {
        width: 100%;
        height: 400px;
        object-fit: cover;
        border-radius: 10px;
        margin-bottom: 10px;
    }

    .thumbnail-container {
        display: flex;
        gap: 10px;
        overflow-x: auto;
        padding-bottom: 10px;
    }

    .thumbnail {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 5px;
        cursor: pointer;
        transition: transform 0.3s ease;
    }

        .thumbnail:hover {
            transform: scale(1.05);
        }

    .property-details {
        flex: 0 0 35%;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
        border-bottom: 1px solid #f0f0f0;
    }

    .label {
        font-weight: bold;
        color: #555;
    }

    .value {
        color: #333;
    }

    .btn-bookmark, .btn-buynow {
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 20px;
        background: white;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-bookmark:hover {
            background: #f0f0f0;
        }

        .btn-buynow:hover {
            background: #2CB736;
            color: white;
        }

    .product-specifications {
        margin-bottom: 30px;
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 10px;
    }

        .product-specifications h3 {
            margin-top: 0;
            margin-bottom: 15px;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }

    .description-section {
        margin-bottom: 30px;
    }

        .description-section h3 {
            margin-bottom: 15px;
        }

    .description-content {
        line-height: 1.6;
    }

    .seller-info {
        margin-bottom: 30px;
    }

    .seller-card {
        display: flex;
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
    }

    .seller-photo {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        margin-right: 20px;
        object-fit: cover;
    }

    .seller-details h3 {
        margin-top: 0;
        margin-bottom: 10px;
    }

    .phone {
        margin-bottom: 15px;
        color: #666;
    }

    .btn-sendmessage, .btn-makeoffer {
        padding: 8px 15px;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        margin-right: 10px;
        font-size: 14px;
    }

    .btn-sendmessage {
        background-color: #0066cc;
        color: white;
    }

    .btn-makeoffer {
        background-color: #f0f0f0;
        color: #333;
    }

    .btn-sendmessage:hover {
        background-color: #0055b3;
    }

    .btn-makeoffer:hover {
        background-color: #e0e0e0;
    }

    .owner-badge {
        display: inline-block;
        padding: 5px 10px;
        background-color: #f0f0f0;
        color: #666;
        border-radius: 15px;
        font-size: 14px;
    }

    .related-listings {
        margin-top: 40px;
    }

        .related-listings h3 {
            margin-bottom: 20px;
        }

    .related-listings-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 15px;
    }

    .related-listing-item {
        text-decoration: none;
        color: inherit;
        display: block;
        transition: transform 0.2s ease;
        border: 1px solid #eee;
        border-radius: 8px;
        overflow: hidden;
    }

        .related-listing-item:hover {
            transform: translateY(-5px);
        }

    .related-image {
        height: 150px;
        overflow: hidden;
    }

        .related-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .related-info {
        padding: 10px;
    }

        .related-info h4 {
            margin: 0 0 5px 0;
            font-size: 16px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

    .related-price {
        color: #0066cc;
        font-weight: bold;
        margin: 0;
    }

    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
    }

    .modal-content {
        background-color: white;
        margin: 10% auto;
        padding: 20px;
        width: 80%;
        max-width: 500px;
        border-radius: 10px;
        position: relative;
    }

    .close-btn {
        position: absolute;
        top: 10px;
        right: 15px;
        font-size: 24px;
        font-weight: bold;
        cursor: pointer;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .main-content {
            flex-direction: column;
        }

        .image-gallery {
            flex: 0 0 100%;
        }

        .property-details {
            flex: 0 0 100%;
        }

        .related-listings-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }</style>

<script>
    // Change main image when thumbnail is clicked
    function changeMainImage(imageSrc) {
        document.getElementById('main-image').src = imageSrc;
    }

    // Open offer modal
    function openOfferModal() {
        document.getElementById('offerModal').style.display = 'block';
    }

    // Close offer modal
    function closeOfferModal() {
        document.getElementById('offerModal').style.display = 'none';
    }

    // Toggle bookmark
    function toggleBookmark(listingId) {
        fetch('/Listing/ToggleBookmark', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `listingId=${listingId}`
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const bookmarkBtn = document.getElementById('bookmark-btn');
                if (data.isBookmarked) {
                    bookmarkBtn.textContent = "Remove from Bookmark";
                } else {
                    bookmarkBtn.textContent = "Add to Bookmark";
                }
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    }

    // Handle offer submission
    document.getElementById('offerForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const listingId = document.getElementById('listingId').value;
        const offerAmount = document.getElementById('offerAmount').value;
        const message = document.getElementById('offerMessage').value;

        fetch('/Listing/MakeOffer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                listingId: listingId,
                offerAmount: offerAmount,
                message: message
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert(data.message);
                closeOfferModal();
            } else {
                alert(data.message);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('An error occurred while submitting your offer. Please try again.');
        });
    });

    // Close modal when clicking outside
    window.onclick = function(event) {
        const modal = document.getElementById('offerModal');
        if (event.target === modal) {
            closeOfferModal();
        }
    }

    // Optional: Pre-populate offer amount with a percentage of the listing price
    document.addEventListener('DOMContentLoaded', function() {
        const offerAmountInput = document.getElementById('offerAmount');
        if (offerAmountInput) {
            offerAmountInput.addEventListener('input', function() {
                // Ensure the offer doesn't exceed the listing price
                const maxPrice = @Model.Listing.Price;
                if (parseFloat(this.value) > maxPrice) {
                    this.value = maxPrice;
                }
            });
        }
    });
</script>